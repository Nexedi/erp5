<html>
  <head>
    <title tal:content="template/title">The title</title>
    <meta http-equiv="content-type" content="text/html;charset=utf-8">
  </head>
  <body>
  <table cellpadding="1" cellspacing="1" border="1">
<thead>
<tr><td rowspan="1" colspan="3">Support Request Zuite</td></tr>
</thead><tbody>
<tal:block metal:use-macro="here/Zuite_SupportRequestUITemplate/macros/init" />
<tr>
  <td>open</td>
  <td>${base_url}/web_site_module/erp5_officejs_support_request_ui/</td>
  <td></td>
</tr>
<tal:block metal:use-macro="here/Zuite_CommonTemplateForRenderjsUi/macros/wait_for_app_loaded" />

<tr>
  <td>click</td>
  <td>//input[@data-i18n='[value]Submit New Support Request']</td>
  <td></td>
</tr>
<tal:block metal:use-macro="here/Zuite_CommonTemplateForRenderjsUi/macros/wait_for_content_loaded" />

<tr>
  <td>type</td>
  <td>//input[@name='field_your_title']</td>
  <td>test</td>
</tr>
<tr>
  <td>select</td>
  <td>field_your_project</td>
  <td>RobotMaking</td>
</tr>
<tr>
  <td>waitForTextPresent</td>
  <td>FeatureRequire</td>
  <td></td>
</tr>
<tr>
  <td>select</td>
  <td>field_your_resource</td>
  <td>FeatureRequire</td>
</tr>
<tal:block tal:define="text_content string:Post test 1">
  <tal:block metal:use-macro="container/Zuite_CommonTemplateForRenderjsUi/macros/type_ckeditor_text_content"/>
</tal:block>

<tal:block metal:use-macro="here/Zuite_CommonTemplateForRenderjsUi/macros/submit_dialog" />
<tal:block tal:define="notification_configuration python: {'class': 'success',
                                                           'text': 'New Support Request created.'}">
  <tal:block metal:use-macro="here/Zuite_CommonTemplateForRenderjsUi/macros/wait_for_notification" />
</tal:block>
<tal:block metal:use-macro="here/Zuite_CommonTemplateForRenderjsUi/macros/wait_for_content_loaded" />

<tr>
  <td>waitForText</td>
  <td>//ol[@id="post_list"]//li[1]/p</td>
  <td>Post test 1</td>
</tr>
<tr>
  <td>waitForText</td>
  <td>//ol[@id="post_list"]//li[1]/p</td>
  <td>Post test 1</td>
</tr>
<tr>
  <td>assertElementPresent</td>
  <td>//ol[@id="post_list"]//li[1]/strong</td>
  <td></td>
</tr>
<tr>
  <td>assertText</td>
  <td>//ol[@id="post_list"]//li[1]/time</td>
  <td>a few seconds ago</td>
</tr>

<!-- The "just posted" message is available because it is retrieved from memcached,
eventhough it's not ingested yet. But this works only for one message, so to first message
posted when opening the SR and the second one posted as a comment, we need to flush
activities in between.
Not really good on one hand, because if activities are congested, there will be a problem
here, but on the other hand it allows us to see that once ingested messages are also properly
displayed
-->
<tr>
  <td>store</td>
  <td>javascript{selenium.browserbot.getCurrentWindow().location.href}</td>
  <td>current_location</td>
</tr>
<tr>
  <td>open</td>
  <td tal:content="string:${here/portal_url}/Zuite_waitForActivities"/>
  <td/>
</tr>
<tr>
  <td>waitForTextPresent</td>
  <td>Done.</td>
  <td/>
</tr>
<tr>
  <td>open</td>
  <td>${current_location}</td>
  <td></td>
</tr>
<tal:block metal:use-macro="here/Zuite_CommonTemplateForRenderjsUi/macros/wait_for_app_loaded" />

<tal:block tal:define="text_content string:Post test 2">
  <tal:block metal:use-macro="container/Zuite_CommonTemplateForRenderjsUi/macros/type_ckeditor_text_content"/>
</tal:block>
<tr>
  <td>click</td>
  <td>//input[@data-i18n='[value]Post Comment']</td>
  <td></td>
</tr>
<tr>
  <td>waitForText</td>
  <td>//ol[@id="post_list"]//li[2]/p</td>
  <td>Post test 2</td>
</tr>
<tr>
  <td>assertText</td>
  <td>//ol[@id="post_list"]//li[1]/p</td>
  <td>Post test 1</td>
</tr>
<tr>
  <td>assertText</td>
  <td>//ol[@id="post_list"]//li[1]/strong</td>
  <td>A1 Corporation</td>
</tr>
<tr>
  <td>assertText</td>
  <td>//ol[@id="post_list"]//li[1]/time</td>
  <td>a few seconds ago</td>
</tr>


<!-- flush activities and post one more message, to exercice ingesting post
posted from support request comment, which uses a different code path than
post ingested when submitting a new support request.
-->
<tr>
  <td>store</td>
  <td>javascript{selenium.browserbot.getCurrentWindow().location.href}</td>
  <td>current_location</td>
</tr>
<tr>
  <td>open</td>
  <td tal:content="string:${here/portal_url}/Zuite_waitForActivities"/>
  <td/>
</tr>
<tr>
  <td>waitForTextPresent</td>
  <td>Done.</td>
  <td/>
</tr>
<tr>
  <td>open</td>
  <td>${current_location}</td>
  <td></td>
</tr>
<tal:block metal:use-macro="here/Zuite_CommonTemplateForRenderjsUi/macros/wait_for_app_loaded" />

<tal:block tal:define="text_content string:Post test 3">
  <tal:block metal:use-macro="container/Zuite_CommonTemplateForRenderjsUi/macros/type_ckeditor_text_content"/>
</tal:block>
<tr>
  <td>click</td>
  <td>//input[@data-i18n='[value]Post Comment']</td>
  <td></td>
</tr>
<tr>
  <td>waitForText</td>
  <td>//ol[@id="post_list"]//li[3]/p</td>
  <td>Post test 3</td>
</tr>
<tr>
  <td>assertText</td>
  <td>//ol[@id="post_list"]//li[1]/p</td>
  <td>Post test 1</td>
</tr>
<tr>
  <td>assertText</td>
  <td>//ol[@id="post_list"]//li[2]/p</td>
  <td>Post test 2</td>
</tr>

<!-- The post show a relative time -->
<tr>
  <td>assertText</td>
  <td>//ol[@id="post_list"]//li[3]/time</td>
  <td>a few seconds ago</td>
</tr>

<!-- This relative time will be updated periodically.

To prove this, we break the text, wait 6 seconds - because this is refreshed every 5 seconds
and check that the relative time was updated.
 -->
<tr>
  <td>assertEval</td>
  <td>(function(){
    selenium.browserbot.findElement('//ol[@id="post_list"]//li[3]/time').textContent = "this will be updated";
    return "ok";
  })()</td>
  <td>ok</td>
</tr>
<tr>
  <td>pause</td> <!-- we are waiting for the next onLoop tic -->
  <td>6000</td>
  <td></td>
</tr>
<tr>
  <td>assertText</td>
  <td>//ol[@id="post_list"]//li[3]/time</td>
  <td>a few seconds ago</td>
</tr>

</tbody></table>
  </body>
</html>