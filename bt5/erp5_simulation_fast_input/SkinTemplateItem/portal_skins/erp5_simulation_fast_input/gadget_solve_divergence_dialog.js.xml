<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts49844688.61</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>gadget_solve_divergence_dialog.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/*global window, document, rJS, RSVP, Handlebars, jIO, location, console */\n
/*jslint nomen: true, maxlen:80, indent:2*/\n
// We should not use "document" since a gadget should be embedded and\n
// must not deals with other parts. Though here we use this gadget to\n
// modify an existing dialog, we do not have nice structure of a full\n
// renderjs web page\n
\n
// horrible copy/paste, this code is now present in latest renderjs,\n
// until we can use it, just duplicate the code and remove it when\n
// renderjs is up to date\n
function loopEventListener(target, type, useCapture, callback) {\n
  "use strict";\n
  //////////////////////////\n
  // Infinite event listener (promise is never resolved)\n
  // eventListener is removed when promise is cancelled/rejected\n
  //////////////////////////\n
  var handle_event_callback,\n
    callback_promise;\n
  function cancelResolver() {\n
    if ((callback_promise !== undefined) &&\n
        (typeof callback_promise.cancel === "function")) {\n
      callback_promise.cancel();\n
    }\n
  }\n
\n
  function canceller() {\n
    if (handle_event_callback !== undefined) {\n
      target.removeEventListener(type, handle_event_callback, useCapture);\n
    }\n
    cancelResolver();\n
  }\n
  function itsANonResolvableTrap(resolve, reject) {\n
\n
    handle_event_callback = function (evt) {\n
      evt.stopPropagation();\n
      evt.preventDefault();\n
      cancelResolver();\n
      callback_promise = new RSVP.Queue()\n
        .push(function () {\n
          return callback(evt);\n
        })\n
        .push(undefined, function (error) {\n
          if (!(error instanceof RSVP.CancellationError)) {\n
            canceller();\n
            reject(error);\n
          }\n
        });\n
    };\n
\n
    target.addEventListener(type, handle_event_callback, useCapture);\n
  }\n
  return new RSVP.Promise(itsANonResolvableTrap, canceller);\n
}\n
// end of horrible copy/paste\n
\n
\n
(function (rJS, jIO, Handlebars, RSVP, document, window) {\n
  "use strict";\n
  rJS(window)\n
    .ready(function (g) {\n
      g.props = {};\n
    })\n
    .ready(function (g) {\n
      return g.getElement().push(function (element) {\n
        g.props.element = element;\n
      });\n
    })\n
    .declareService(function (gadget) {\n
      console.log("location",location);\n
      var basedir = location.pathname.split(\'/\').slice(0, -1).join(\'/\') + \'/\',\n
        divergence_choice_list = [],\n
        i,\n
        divergence_element_choice,\n
        divergence_element_choice_list = document.querySelectorAll(\n
          \'input[type="radio"]\'),\n
        listener_list = [];\n
\n
      function fillDialog(event) {\n
        console.log("fillDialog, event", event);\n
        console.log("fillDialog, value", event.target.value);\n
        var solver_decision_uid = event.target.name.split("_").pop();\n
        return new RSVP.Queue()\n
          .push(function () {\n
            return jIO.util.ajax(\n
              {\n
                "type": "POST",\n
                "url":  basedir + \'Delivery_getSolveDivergenceDialogParameterFormBox?solver=\' + event.target.value + "&solver_decision_uid=" + solver_decision_uid,\n
                "xhrFields": {\n
                  withCredentials: true\n
                }\n
              }\n
            );\n
          })\n
          .push(function (data) {\n
            event.srcElement.parentElement.parentElement.querySelectorAll(\n
              ".listbox-table-data-cell")[2].innerHTML = data.target.response;\n
          });\n
      }\n
\n
      console.log("divergence_element_choice_list", divergence_element_choice_list);\n
      for (i = 0; i < divergence_element_choice_list.length; i++) {\n
        divergence_element_choice = divergence_element_choice_list[i];\n
        console.log("divergence_element_choice.name", divergence_element_choice.name);\n
        if (divergence_element_choice.name.startsWith("field_listbox_solver_") === true) {\n
          //divergence_choice_list.push(divergence_element_choice);\n
          divergence_choice_list.push(loopEventListener(\n
            divergence_element_choice,\n
            \'change\',\n
            false,\n
            fillDialog\n
          ));\n
        }\n
      }\n
      return divergence_choice_list;\n
    });\n
}(rJS, jIO, Handlebars, RSVP, document, window));

]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>4102</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
