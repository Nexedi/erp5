<html xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:metal="http://xml.zope.org/namespaces/metal">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Test and Update Test Files for RELEASE Template</title>
</head>
<body>
<!--
          UPDATE comparison files for LIVE TESTS | DON'T RUN AUTOMATICALLY
                    (else tests will always pass...)

This Zuite updates all test files (diff-html, pdfs, bmps) used in the LiveTests
based on the example web pages included in this bt5. Run this zuite after making
changes to the bt5 which will alter their look to automatically update all files
(else you need to do it by hand). This also means: DON'T RUN THIS AUTOMATICALLY,
because it will also update all test files with any errors you make, causing
liveTests to always pass (comparing wrong rendering to wrong test file).

Help:
http://www.seleniumhq.org/docs/02_selenium_ide.jsp#selenium-commands-selenese
http://seleniummaster.com/sitecontent/index.php/introduction-to-selenium-automation/selenium-ide/114-selenium-ide-complete-list-of-commands

Note:
# make sure to set editor to plain text in (erp5 test preferences)
-->

<table cellpadding="1" cellspacing="1" border="1">
<thead>
<tr><td rowspan="1" colspan="3">Test RenderJS UI</td></tr>
</thead>
<tbody>
  <tal:block metal:use-macro="here/Zuite_CommonTemplate/macros/init" />
  <tal:block tal:define="portal here/portal_url/getPortalObject;
                         caller python: getattr(context, 'Zuite_setSkipSave', None);
                         no_file_update python: caller() if caller else False">
    <tr>
      <td>open</td>
      <td>${base_url}/bar_module/ListBoxZuite_reset</td>
      <td></td>
    </tr>
    <tr>
      <td>assertTextPresent</td>
      <td>Reset Successfully.</td>
      <td></td>
    </tr>
    <tr>
      <td>open</td>
      <td>${base_url}/Zuite_setupTemplateTest</td>
      <td></td>
    </tr>
    <tr>
      <td>assertTextPresent</td>
      <td>Ok</td>
      <td></td>
    </tr>
    <tr>
      <td>echo</td>
      <td tal:content="python: ''.join(['skipping save: ', str(no_file_update)])"></td>
      <td></td>
    </tr>
    <tr>
      <td>echo</td>
      <td>ACTION => EXPORT</td>
      <td></td>
    </tr>
    <!-- CASE 1 - template_test_release_output_expected_001_en_html -->
    <tr>
      <td>echo</td>
      <td>CASE 1 => template_test_release_output_expected_001_en_html</td>
      <td></td>
    </tr>
    <tr>
      <td>open</td>
      <td>${base_url}/web_page_module/</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>records</td>
      <td></td>
    </tr>
    <tr>
      <td>type</td>
      <td>name=listbox_reference</td>
      <td>Template.Test.Release</td>
    </tr>
    <tr>
      <td>type</td>
      <td>name=listbox_version</td>
      <td>001</td>
    </tr>
    <tr>
      <td>keyPressAndWait</td>
      <td>listbox_version</td>
      <td>\13</td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Template Test Release</td>
      <td></td>
    </tr>
    <tr>
      <td>click</td>
      <td>//a[contains(text(), 'Template.Test.Release')]</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Short Title</td>
      <td></td>
    </tr>
    <!-- Save once to set modification date for live tests -->
    <tr>
      <td>waitForElementPresent</td>
      <td>//button[@class="save"]</td>
      <td></td>
    </tr>
    <tr>
      <td>verifyElementPresent</td>
      <td>//button[@class="save"]</td>
      <td></td>
    </tr>
    <tr>
      <td>clickAndWait</td>
      <td>//button[@class="save"]</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForElementPresent</td>
      <td>//div[@class="transition_message"]</td>
      <td></td>
    </tr>
    <tr>
      <td>assertTextPresent</td>
      <td>Data updated.</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForElementPresent</td>
      <td>//button[@class="import_export"]</td>
      <td></td>
    </tr>
    <tr>
      <td>click</td>
      <td>//button[@class="import_export"]</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Export Slideshow</td>
      <td></td>
    </tr>
    <tr>
      <td>selectAndWait</td>
      <td>name=select_dialog</td>
      <td>index=4</td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Export Release</td>
      <td></td>
    </tr>
    <tr>
      <td>clickAndWait</td>
      <td>name=Base_showUpdateDialog:method</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForElementPresent</td>
      <td>//div[@class="transition_message"]</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Preview updated.</td>
      <td></td>
    </tr>
    <tr>
      <td>clickAndWait</td>
      <td>name=Base_callDialogMethod:method</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForElementNotPresent</td>
      <td>name=Base_callDialogMethod:method</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForPageToLoad</td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Â©</td>
      <td></td>
    </tr>
    <tal:block tal:condition="python: no_file_update == False">
      <tr>
        <td>storeLocation</td>
        <td>url</td>
        <td></td>
      </tr>
      <tr>
        <td>echo</td>
        <td>${url}</td>
        <td></td>
      </tr>
      <!-- Can't fetch iframe source, so request page again -->
      <tr>
        <td>storeEval</td>
        <td>function ajax(url) {var xhr = new XMLHttpRequest();return new Promise(function(resolve, reject) {var k;xhr.open("GET", url, true);xhr.addEventListener("load", function(e) {if (e.target.status >= 400) {return reject(e);}resolve(e);});xhr.addEventListener("error", reject);xhr.send();}, function() {xhr.abort();});};ajax(storedVars["url"] + "&amp;batch_mode=True");</td>
        <td>page_source</td>
      </tr>
    </tal:block>
    <tr>
      <td>goBackAndWait</td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td>waitForPageToLoad</td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Web Pages</td>
      <td></td>
    </tr>
    <tr>
      <td>click</td>
      <td>//a[contains(text(), 'Web Pages')]</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>records</td>
      <td></td>
    </tr>
    <tr>
      <td>type</td>
      <td>name=listbox_reference</td>
      <td>%Template% AND %Output% AND %Release%</td>
    </tr>
    <tr>
      <td>type</td>
      <td>name=listbox_version</td>
      <td>001</td>
    </tr>
    <tr>
      <td>keyPressAndWait</td>
      <td>listbox_reference</td>
      <td>\13</td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Template.Test.Release.Expected.Output.Sample</td>
      <td></td>
    </tr>
    <tr>
      <td>click</td>
      <td>//a[contains(text(), 'Template.Test.Release.Expected.Output.Sample')]</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Short Title</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForElementPresent</td>
      <td>//a/span[contains(text(), 'Edit')]</td>
      <td></td>
    </tr>
    <tr>
      <td>click</td>
      <td>//a/span[contains(text(), 'Edit')]</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForElementPresent</td>
      <td>//div[@class="input"]/div/textarea</td>
      <td></td>
    </tr>
    <tal:block tal:condition="python: no_file_update == False">
      <tr>
        <td>storeEval</td>
        <td>storedVars["page_source"].then(function (evt) {var content = evt.target.response || evt.target.responseText;document.getElementById("selenium_myiframe").contentDocument.body.bad_parameter = content;})</td>
        <td></td>
      </tr>
      <tr>
        <td>storeEval</td>
        <td>document.getElementById("selenium_myiframe").contentDocument.body.bad_parameter;</td>
        <td>dump</td>
      </tr>
      <tr>
        <td>type</td>
        <td>//div[@class="input"]/div/textarea</td>
        <td>${dump}</td>
      </tr>
    </tal:block>
    <tr>
      <td>verifyElementPresent</td>
      <td>//button[@class="save"]</td>
      <td></td>
    </tr>
    <tr>
      <td>clickAndWait</td>
      <td>//button[@class="save"]</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForElementPresent</td>
      <td>//div[@class="transition_message"]</td>
      <td></td>
    </tr>
    <tr>
      <td>assertTextPresent</td>
      <td>Data updated.</td>
      <td></td>
    </tr>
    <!-- CASE 2 - template_test_release_output_expected_002_de_html -->
    <tr>
      <td>echo</td>
      <td>CASE 2 => template_test_release_output_expected_002_de_html</td>
      <td></td>
    </tr>
    <tr>
      <td>verifyTextPresent</td>
      <td>Web Pages</td>
      <td></td>
    </tr>
    <tr>
      <td>click</td>
      <td>//a[contains(text(), 'Web Pages')]</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>records</td>
      <td></td>
    </tr>
    <tr>
      <td>type</td>
      <td>name=listbox_reference</td>
      <td>Template.Test.Release</td>
    </tr>
    <tr>
      <td>type</td>
      <td>name=listbox_version</td>
      <td>002</td>
    </tr>
    <tr>
      <td>keyPressAndWait</td>
      <td>listbox_version</td>
      <td>\13</td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Template Test Release</td>
      <td></td>
    </tr>
    <tr>
      <td>click</td>
      <td>//a[contains(text(), 'Template.Test.Release')]</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Short Title</td>
      <td></td>
    </tr>
    <!-- Save once to set modification date for live tests -->
    <tr>
      <td>waitForElementPresent</td>
      <td>//button[@class="save"]</td>
      <td></td>
    </tr>
    <tr>
      <td>verifyElementPresent</td>
      <td>//button[@class="save"]</td>
      <td></td>
    </tr>
    <tr>
      <td>clickAndWait</td>
      <td>//button[@class="save"]</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForElementPresent</td>
      <td>//div[@class="transition_message"]</td>
      <td></td>
    </tr>
    <tr>
      <td>assertTextPresent</td>
      <td>Data updated.</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForElementPresent</td>
      <td>//button[@class="import_export"]</td>
      <td></td>
    </tr>
    <tr>
      <td>click</td>
      <td>//button[@class="import_export"]</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Export Slideshow</td>
      <td></td>
    </tr>
    <tr>
      <td>selectAndWait</td>
      <td>name=select_dialog</td>
      <td>index=4</td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Export Release</td>
      <td></td>
    </tr>
    <tr>
      <td>type</td>
      <td>name=field_override_source_organisation_title</td>
      <td>Test Association</td>
    </tr>
    <tr>
      <td>type</td>
      <td>name=field_override_source_person_title</td>
      <td>Test Association Member</td>
    </tr>
    <tr>
      <td>uncheck</td>
      <td>name=field_display_about</td>
      <td></td>
    </tr>
    <tr>
      <td>clickAndWait</td>
      <td>name=Base_showUpdateDialog:method</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForElementPresent</td>
      <td>//div[@class="transition_message"]</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Preview updated.</td>
      <td></td>
    </tr>
    <tr>
      <td>clickAndWait</td>
      <td>name=Base_callDialogMethod:method</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForPageToLoad</td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td>waitForElementNotPresent</td>
      <td>name=Base_callDialogMethod:method</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Â©</td>
      <td></td>
    </tr>
    <tal:block tal:condition="python: no_file_update == False">
      <tr>
        <td>storeLocation</td>
        <td>url</td>
        <td></td>
      </tr>
      <tr>
        <td>echo</td>
        <td>${url}</td>
        <td></td>
      </tr>
      <!-- Can't fetch iframe source, so request page again -->
      <tr>
        <td>storeEval</td>
        <td>function ajax(url) {var xhr = new XMLHttpRequest();return new Promise(function(resolve, reject) {var k;xhr.open("GET", url, true);xhr.addEventListener("load", function(e) {if (e.target.status >= 400) {return reject(e);}resolve(e);});xhr.addEventListener("error", reject);xhr.send();}, function() {xhr.abort();});};ajax(storedVars["url"] + "&amp;batch_mode=True");</td>
        <td>page_source</td>
      </tr>
    </tal:block>
    <tr>
      <td>goBackAndWait</td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td>waitForPageToLoad</td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Web Pages</td>
      <td></td>
    </tr>
    <tr>
      <td>click</td>
      <td>//a[contains(text(), 'Web Pages')]</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>records</td>
      <td></td>
    </tr>
    <tr>
      <td>type</td>
      <td>name=listbox_reference</td>
      <td>%Template% AND %Output% AND %Release%</td>
    </tr>
    <tr>
      <td>type</td>
      <td>name=listbox_version</td>
      <td>002</td>
    </tr>
    <tr>
      <td>keyPressAndWait</td>
      <td>listbox_reference</td>
      <td>\13</td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Template.Test.Release.Expected.Output.Sample</td>
      <td></td>
    </tr>
    <tr>
      <td>click</td>
      <td>//a[contains(text(), 'Template.Test.Release.Expected.Output.Sample')]</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Short Title</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForElementPresent</td>
      <td>//a/span[contains(text(), 'Edit')]</td>
      <td></td>
    </tr>
    <tr>
      <td>click</td>
      <td>//a/span[contains(text(), 'Edit')]</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForElementPresent</td>
      <td>//div[@class="input"]/div/textarea</td>
      <td></td>
    </tr>
    <tal:block tal:condition="python: no_file_update == False">
      <tr>
        <td>storeEval</td>
        <td>storedVars["page_source"].then(function (evt) {var content = evt.target.response || evt.target.responseText;document.getElementById("selenium_myiframe").contentDocument.body.bad_parameter = content;})</td>
        <td></td>
      </tr>
      <tr>
        <td>storeEval</td>
        <td>document.getElementById("selenium_myiframe").contentDocument.body.bad_parameter;</td>
        <td>dump</td>
      </tr>
      <tr>
        <td>type</td>
        <td>//div[@class="input"]/div/textarea</td>
        <td>${dump}</td>
      </tr>
    </tal:block>
    <tr>
      <td>verifyElementPresent</td>
      <td>//button[@class="save"]</td>
      <td></td>
    </tr>
    <tr>
      <td>clickAndWait</td>
      <td>//button[@class="save"]</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForElementPresent</td>
      <td>//div[@class="transition_message"]</td>
      <td></td>
    </tr>
    <tr>
      <td>assertTextPresent</td>
      <td>Data updated.</td>
      <td></td>
    </tr>
    <!-- CASE 1 (pdf) - template_test_release_input_001_en_pdf -->
    <tr>
      <td>echo</td>
      <td>CASE 1 (pdf) => template_test_release_input_001_en_pdf</td>
      <td></td>
    </tr>
    <tr>
      <td>open</td>
      <td>${base_url}/web_page_module/</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>records</td>
      <td></td>
    </tr>
    <tr>
      <td>type</td>
      <td>name=listbox_reference</td>
      <td>Template.Test.Release</td>
    </tr>
    <tr>
      <td>type</td>
      <td>name=listbox_version</td>
      <td>001</td>
    </tr>
    <tr>
      <td>keyPressAndWait</td>
      <td>listbox_version</td>
      <td>\13</td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Template Test Release</td>
      <td></td>
    </tr>
    <tr>
      <td>click</td>
      <td>//a[contains(text(), 'Template.Test.Release')]</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Short Title</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForElementPresent</td>
      <td>//button[@class="import_export"]</td>
      <td></td>
    </tr>
    <tr>
      <td>click</td>
      <td>//button[@class="import_export"]</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Export Slideshow</td>
      <td></td>
    </tr>
    <tr>
      <td>selectAndWait</td>
      <td>name=select_dialog</td>
      <td>index=4</td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Export Release</td>
      <td></td>
    </tr>
    <tr>
      <td>select</td>
      <td>name=field_format</td>
      <td>index=1</td>
    </tr>
    <tr>
      <td>clickAndWait</td>
      <td>name=Base_callDialogMethod:method</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForPageToLoad</td>
      <td></td>
      <td></td>
    </tr>
    <!-- PDF viewer has no document.title, wait for "" means pdf is loaded -->
    <tr>
      <td>waitForTitle</td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td>verifyTitle</td>
      <td></td>
      <td></td>
    </tr>
    <tal:block tal:condition="python: no_file_update == False">
      <!-- Store this location for re-requesting -->
      <tr>
        <td>storeLocation</td>
        <td>url</td>
        <td></td>
      </tr>
      <tr>
        <td>echo</td>
        <td>${url}</td>
        <td></td>
      </tr>
      <!-- Can't access pdf source inside iframe, so request page again -->
      <tr>
        <td>storeEval</td>
        <td>function ajax(url) { var xhr = new XMLHttpRequest(); return new Promise(function(resolve, reject) { var k; xhr.open("GET", url, true); xhr.responseType = "blob"; xhr.addEventListener("load", function(e) { if (e.target.status >= 400) { return reject(e); } resolve(e); }); xhr.addEventListener("error", reject); xhr.send(); }, function() { xhr.abort(); }); }; ajax(storedVars["url"] + "&amp;batch_mode=True");</td>
        <td>pdf_source</td>
      </tr>
      <!-- pause to let the ajax request finish. now if the table was a async, queue
           that would be nice, 3/6/9000 not enough-->
      <tr>
        <td>pause</td>
        <td>12000</td>
        <td></td>
      </tr>
    </tal:block>
    <tr>
      <td>goBackAndWait</td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td>waitForPageToLoad</td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Web Pages</td>
      <td></td>
    </tr>
    <tr>
      <td>click</td>
      <td>//a[contains(text(), 'ERP5')]</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForElementPresent</td>
      <td>//a[contains(text(), 'Documents')]</td>
      <td></td>
    </tr>
    <tr>
      <td>click</td>
      <td>//a[contains(text(), 'Documents')]</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>records</td>
      <td></td>
    </tr>
    <tr>
      <td>type</td>
      <td>name=listbox_reference</td>
      <td>Template.Test.Release</td>
    </tr>
    <tr>
      <td>type</td>
      <td>name=listbox_version</td>
      <td>001</td>
    </tr>
    <tr>
      <td>keyPressAndWait</td>
      <td>listbox_version</td>
      <td>\13</td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Template Test Release</td>
      <td></td>
    </tr>
    <tr>
      <td>clickAndWait</td>
      <td>//a[contains(text(), 'Template.Test.Release')]</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Short Title</td>
      <td></td>
    </tr>
    <tal:block tal:condition="python: no_file_update == False">
      <!-- manual form submit -->
      <tr>
        <td>storeLocation</td>
        <td>url</td>
        <td></td>
      </tr>
      <!-- only handle pdf_source (a promise!) here, because it needs to be set on
           the iframe and a page-reload resets all (bad) parameters manually set   -->
      <tr>
        <td>storeEval</td>
        <td>storedVars["pdf_source"].then(function (evt) {document.getElementById("selenium_myiframe").contentDocument.body.bad_pdf_parameter = new Blob([evt.target.response || evt.target.responseText], {"type": evt.target.getResponseHeader("Content-Type")});});</td>
        <td></td>
      </tr>
      <tr>
        <td>storeEval</td>
        <td>document.getElementById("selenium_myiframe").contentDocument.body.bad_pdf_parameter</td>
        <td>pdf_dump</td>
      </tr>
      <tr>
        <td>echo</td>
        <td>${pdf_dump}</td>
        <td></td>
      </tr>
      <tr>
        <td>verifyNotExpression</td>
        <td>${pdf_dump}</td>
        <td>null</td>
      </tr>
      <tr>
        <td>storeEval</td>
        <td>function ajax(url, param) { var xhr = new XMLHttpRequest(); return new Promise(function(resolve, reject) { var k; xhr.open("POST", url, true); xhr.responseType = param.dataType || ""; if (typeof param.headers === 'object' &amp;&amp; param.headers !== null) { for (k in param.headers) { if (param.headers.hasOwnProperty(k)) { xhr.setRequestHeader(k, param.headers[k]); } } } xhr.addEventListener("load", function(e) { if (e.target.status >= 400) { return reject(e); } resolve(e); }); xhr.addEventListener("error", reject); if (typeof param.xhrFields === 'object' &amp;&amp; param.xhrFields !== null) { for (k in param.xhrFields) { if (param.xhrFields.hasOwnProperty(k)) { xhr[k] = param.xhrFields[k]; } } } xhr.send(param.data); }, function() { xhr.abort(); }); } var form_data = new FormData(); form_data.append("field_my_file", storedVars["pdf_dump"], "Template.Test.Release-001-en.pdf"); form_data.append("form_id", "File_view");  x = ajax(storedVars["url"].split("?")[0] + "/Base_edit", {"xhrFields": {"with_credentials": true}, "data": form_data});</td>
        <td>promise</td>
      </tr>
      <tr>
        <td>storeEval</td>
        <td>storedVars["promise"].then(function () {document.getElementById("selenium_myiframe").src=storedVars["url"].split("?")[0]+"/File_view?portal_status_message=Data%20updated."});</td>
        <td></td>
      </tr>
      <tr>
        <td>waitForElementPresent</td>
        <td>//div[@class="transition_message"]</td>
        <td></td>
      </tr>
      <tr>
        <td>waitForTextPresent</td>
        <td>Data updated.</td>
        <td></td>
      </tr>
      <!-- generate image - template_test_release_input_page_0_001_en_bmp -->
      <tr>
        <td>echo</td>
        <td>update => template_test_release_input_page_0_001_en_bmp</td>
        <td></td>
      </tr>
      <tr>
        <td>storeEval</td>
        <td>storedVars["url"].split("?")[0]</td>
        <td>screenshot_url</td>
      </tr>
      <tr>
        <td>echo</td>
        <td>${screenshot_url}</td>
        <td></td>
      </tr>
      <tr>
        <td>open</td>
        <td>${screenshot_url}/Document_createScreenshot?frame=0&amp;doc_id=template_test_release_input_page_0_001_en_bmp</td>
        <td></td>
      </tr>
      <tr>
        <td>waitForTextPresent</td>
        <td>Screenshot updated.</td>
        <td></td>
      </tr>
    </tal:block>
    <!-- CASE 2 - template_test_release_input_002_de_pdf -->
    <tr>
      <td>echo</td>
      <td>CASE 2 => template_test_release_input_002_de_pdf</td>
      <td></td>
    </tr>
    <tr>
      <td>open</td>
      <td>${base_url}/web_page_module/</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>records</td>
      <td></td>
    </tr>
    <tr>
      <td>type</td>
      <td>name=listbox_reference</td>
      <td>Template.Test.Release</td>
    </tr>
    <tr>
      <td>type</td>
      <td>name=listbox_version</td>
      <td>002</td>
    </tr>
    <tr>
      <td>keyPressAndWait</td>
      <td>listbox_version</td>
      <td>\13</td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Template Test Release</td>
      <td></td>
    </tr>
    <tr>
      <td>click</td>
      <td>//a[contains(text(), 'Template.Test.Release')]</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Short Title</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForElementPresent</td>
      <td>//button[@class="import_export"]</td>
      <td></td>
    </tr>
    <tr>
      <td>click</td>
      <td>//button[@class="import_export"]</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Export Slideshow</td>
      <td></td>
    </tr>
    <tr>
      <td>selectAndWait</td>
      <td>name=select_dialog</td>
      <td>index=4</td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Export Release</td>
      <td></td>
    </tr>
    <tr>
      <td>select</td>
      <td>name=field_format</td>
      <td>index=1</td>
    </tr>
    <tr>
      <td>type</td>
      <td>name=field_override_source_organisation_title</td>
      <td>Test Association</td>
    </tr>
    <tr>
      <td>type</td>
      <td>name=field_override_source_person_title</td>
      <td>Test Association Member</td>
    </tr>
    <tr>
      <td>check</td>
      <td>name=field_display_about</td>
      <td></td>
    </tr>
    <tr>
      <td>clickAndWait</td>
      <td>name=Base_callDialogMethod:method</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForPageToLoad</td>
      <td></td>
      <td></td>
    </tr>
    <!-- PDF viewer has no document.title, wait for "" means pdf is loaded -->
    <tr>
      <td>waitForTitle</td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td>verifyTitle</td>
      <td></td>
      <td></td>
    </tr>
    <tal:block tal:condition="python: no_file_update == False">
      <!-- Store this location for re-requesting -->
      <tr>
        <td>storeLocation</td>
        <td>url</td>
        <td></td>
      </tr>
      <tr>
        <td>echo</td>
        <td>${url}</td>
        <td></td>
      </tr>
      <!-- Can't fetch pdf source, so request page again -->
      <tr>
        <td>storeEval</td>
        <td>function ajax(url) { var xhr = new XMLHttpRequest(); return new Promise(function(resolve, reject) { var k; xhr.open("GET", url, true); xhr.responseType = "blob", xhr.addEventListener("load", function(e) { if (e.target.status >= 400) { return reject(e); } resolve(e); }); xhr.addEventListener("error", reject); xhr.send(); }, function() { xhr.abort(); }); }; ajax(storedVars["url"] + "&amp;batch_mode=True");</td>
        <td>pdf_source</td>
      </tr>
      <!-- pause to let the ajax request finish. now if the table was a async, queue
           that would be nice, 3/6000 did not work-->
      <tr>
        <td>pause</td>
        <td>9000</td>
        <td></td>
      </tr>
    </tal:block>
    <tr>
      <td>goBackAndWait</td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td>waitForPageToLoad</td>
      <td></td>
      <td></td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Web Pages</td>
      <td></td>
    </tr>
    <tr>
      <td>click</td>
      <td>//a[contains(text(), 'ERP5')]</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForElementPresent</td>
      <td>//a[contains(text(), 'Documents')]</td>
      <td></td>
    </tr>
    <tr>
      <td>click</td>
      <td>//a[contains(text(), 'Documents')]</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>records</td>
      <td></td>
    </tr>
    <tr>
      <td>type</td>
      <td>name=listbox_reference</td>
      <td>Template.Test.Release</td>
    </tr>
    <tr>
      <td>type</td>
      <td>name=listbox_version</td>
      <td>002</td>
    </tr>
    <tr>
      <td>keyPressAndWait</td>
      <td>listbox_version</td>
      <td>\13</td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Template Test Release</td>
      <td></td>
    </tr>
    <tr>
      <td>clickAndWait</td>
      <td>//a[contains(text(), 'Template.Test.Release')]</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Short Title</td>
      <td></td>
    </tr>
    <tal:block tal:condition="python: no_file_update == False">
      <!-- manual form submit -->
      <tr>
        <td>storeLocation</td>
        <td>url</td>
        <td></td>
      </tr>
      <!-- only handle pdf_source (a promise!) here, because it needs to be set on
           the iframe and a page-reload resets all (bad) parameters manually set   -->
      <tr>
        <td>storeEval</td>
        <td>storedVars["pdf_source"].then(function (evt) {document.getElementById("selenium_myiframe").contentDocument.body.bad_pdf_parameter = new Blob([evt.target.response || evt.target.responseText], {"type": evt.target.getResponseHeader("Content-Type")});});</td>
        <td></td>
      </tr>
      <tr>
        <td>storeEval</td>
        <td>document.getElementById("selenium_myiframe").contentDocument.body.bad_pdf_parameter</td>
        <td>pdf_dump</td>
      </tr>
      <tr>
        <td>echo</td>
        <td>${pdf_dump}</td>
        <td></td>
      </tr>
      <tr>
        <td>verifyNotExpression</td>
        <td>${pdf_dump}</td>
        <td>null</td>
      </tr>
      <tr>
        <td>storeEval</td>
        <td>function ajax(url, param) { var xhr = new XMLHttpRequest(); return new Promise(function(resolve, reject) { var k; xhr.open("POST", url, true); xhr.responseType = param.dataType || ""; if (typeof param.headers === 'object' &amp;&amp; param.headers !== null) { for (k in param.headers) { if (param.headers.hasOwnProperty(k)) { xhr.setRequestHeader(k, param.headers[k]); } } } xhr.addEventListener("load", function(e) { if (e.target.status >= 400) { return reject(e); } resolve(e); }); xhr.addEventListener("error", reject); if (typeof param.xhrFields === 'object' &amp;&amp; param.xhrFields !== null) { for (k in param.xhrFields) { if (param.xhrFields.hasOwnProperty(k)) { xhr[k] = param.xhrFields[k]; } } } xhr.send(param.data); }, function() { xhr.abort(); }); } var form_data = new FormData(); form_data.append("field_my_file", storedVars["pdf_dump"], "Template.Test.Release-002-de.pdf"); form_data.append("form_id", "File_view");  x = ajax(storedVars["url"].split("?")[0] + "/Base_edit", {"xhrFields": {"with_credentials": true}, "data": form_data});</td>
        <td>promise</td>
      </tr>
      <tr>
        <td>storeEval</td>
        <td>storedVars["promise"].then(function () {document.getElementById("selenium_myiframe").src=storedVars["url"].split("?")[0]+"/File_view?portal_status_message=Data%20updated."});</td>
        <td></td>
      </tr>
      <tr>
        <td>waitForElementPresent</td>
        <td>//div[@class="transition_message"]</td>
        <td></td>
      </tr>
      <tr>
        <td>waitForTextPresent</td>
        <td>Data updated.</td>
        <td></td>
      </tr>
      <!-- generate image - template_test_release_input_page_0_002_de_bmp -->
      <tr>
        <td>echo</td>
        <td>update => template_test_release_input_page_0_002_de_bmp</td>
        <td></td>
      </tr>
      <tr>
        <td>storeEval</td>
        <td>storedVars["url"].split("?")[0]</td>
        <td>screenshot_url</td>
      </tr>
      <tr>
        <td>echo</td>
        <td>${screenshot_url}</td>
        <td></td>
      </tr>
      <tr>
        <td>open</td>
        <td>${screenshot_url}/Document_createScreenshot?frame=0&amp;doc_id=template_test_release_input_page_0_002_de_bmp</td>
        <td></td>
      </tr>
      <tr>
        <td>waitForTextPresent</td>
        <td>Screenshot updated.</td>
        <td></td>
      </tr>
    </tal:block>
    <!-- make sure print exchange works -->
    <tr>
      <td>echo</td>
      <td>ACTION => PRINT</td>
      <td></td>
    </tr>
    <tr>
      <td>open</td>
      <td>${base_url}/web_page_module/</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>records</td>
      <td></td>
    </tr>
    <tr>
      <td>type</td>
      <td>name=listbox_reference</td>
      <td>Template.Test.Release</td>
    </tr>
    <tr>
      <td>type</td>
      <td>name=listbox_version</td>
      <td>001</td>
    </tr>
    <tr>
      <td>keyPressAndWait</td>
      <td>listbox_version</td>
      <td>\13</td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Template Test Release</td>
      <td></td>
    </tr>
    <tr>
      <td>click</td>
      <td>//a[contains(text(), 'Template.Test.Release')]</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Short Title</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForElementPresent</td>
      <td>//button[@class="print"]</td>
      <td></td>
    </tr>
    <tr>
      <td>click</td>
      <td>//button[@class="print"]</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Print As Slideshow</td>
      <td></td>
    </tr>
    <tr>
      <td>selectAndWait</td>
      <td>name=select_dialog</td>
      <td>index=4</td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Display Automatic About</td>
      <td></td>
    </tr>
    <tr>
      <td>clickAndWait</td>
      <td>name=Base_showUpdateDialog:method</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForElementPresent</td>
      <td>//div[@class="transition_message"]</td>
      <td></td>
    </tr>
    <tr>
      <td>waitForTextPresent</td>
      <td>Preview updated.</td>
      <td></td>
    </tr>
  </tal:block>
</tbody>
</table>
</body>
</html>