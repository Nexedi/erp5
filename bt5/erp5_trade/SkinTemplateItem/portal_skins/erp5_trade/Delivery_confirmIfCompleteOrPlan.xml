<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="PythonScript" module="Products.PythonScripts.PythonScript"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string encoding="cdata"><![CDATA[

if REQUEST is not None and 0:\n
  from zExceptions import Unauthorized\n
  raise Unauthorized(script.id)\n
from Products.ERP5Type.Message import translateString\n
\n
if context.getSimulationState() == "draft":\n
  context.plan(comment=translateString(\'Initialised by Delivery Builder.\'))\n
if context.getSimulationState() == "planned":\n
  # Make sure that we are not going to receive more lines later, this could\n
  # happen if global builder took only partially the movement of an applied\n
  # rule.\n
  # We assume here that a Delivery is not going to receive movements from\n
  # different applied rules.\n
  # To check if we are not going to receive more simulation movement, we check\n
  # for all simulation movement of the same level as the simulation movement\n
  # used to construct this current delivery have all a delivery link.\n
  # If there is more than one packing list, do not confirm because it might mean\n
  # that we are in a split, so if the user splits again we want to also recieve\n
  # the movements of further splits.\n
  movement_list = context.getMovementList()\n
  assert len(movement_list) > 0\n
  simulation_movement = movement_list[0].getDeliveryRelatedValue(portal_type="Simulation Movement")\n
  getSpecialise = simulation_movement.getParentValue().getSpecialise()\n
  root_applied_rule = simulation_movement.getRootAppliedRule()\n
 \n
  def getSimilarSimulationMovementList(simulation_object):\n
    current_list = []\n
    if simulation_object.getPortalType() == "Applied Rule" and \\\n
         simulation_object.getSpecialise() == getSpecialise:\n
      current_list.extend([x for x in simulation_object.objectValues()])\n
    else:\n
      for sub_simulation_object in simulation_object.objectValues():\n
        current_list.extend(getSimilarSimulationMovementList(sub_simulation_object))\n
    return current_list\n
 \n
  is_complete = True\n
  packing_list_set = set()\n
  for simulation_movement in getSimilarSimulationMovementList(root_applied_rule):\n
    delivery = simulation_movement.getDeliveryValue()\n
    if delivery is None:\n
      is_complete = False\n
      break\n
    packing_list_set.add(delivery.getRootDeliveryValue())\n
  if is_complete and len(packing_list_set) == 1:\n
    context.confirm(comment=translateString(\'Initialised by Delivery Builder.\'))\n


]]></string> </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string>REQUEST=None</string> </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>Delivery_confirmIfCompleteOrPlan</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
