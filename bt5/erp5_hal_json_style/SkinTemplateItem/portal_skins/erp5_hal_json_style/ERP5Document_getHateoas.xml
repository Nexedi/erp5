<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="PythonScript" module="Products.PythonScripts.PythonScript"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string encoding="cdata"><![CDATA[

from ZTUtils import make_query\n
import json\n
from base64 import urlsafe_b64encode, urlsafe_b64decode\n
from DateTime import DateTime\n
if REQUEST is None:\n
  REQUEST = context.REQUEST\n
  # raise Unauthorized\n
if response is None:\n
  response = REQUEST.RESPONSE\n
\n
url_template_dict = {\n
  "form_action": "%(traversed_document_url)s/%(action_id)s",\n
  "traverse_generator": "%(root_url)s/%(script_id)s?mode=traverse" + \\\n
                       "&relative_url=%(relative_url)s&view=%(view)s",\n
  "traverse_template": "%(root_url)s/%(script_id)s?mode=traverse" + \\\n
                       "{&relative_url,view}",\n
  "search_template": "%(root_url)s/%(script_id)s?mode=search" + \\\n
                     "{&query,select_list*,limit*,sort_on*,local_roles*}",\n
  "worklist_template": "%(root_url)s/%(script_id)s?mode=worklist",\n
  "custom_search_template": "%(root_url)s/%(script_id)s?mode=search" + \\\n
                     "&relative_url=%(relative_url)s" \\\n
                     "&form_relative_url=%(form_relative_url)s" \\\n
                     "&list_method=%(list_method)s" \\\n
                     "&default_param_json=%(default_param_json)s" \\\n
                     "{&query,select_list*,limit*,sort_on*,local_roles*}",\n
  "custom_search_template_no_editable": "%(root_url)s/%(script_id)s?mode=search" + \\\n
                     "&relative_url=%(relative_url)s" \\\n
                     "&list_method=%(list_method)s" \\\n
                     "&default_param_json=%(default_param_json)s" \\\n
                     "{&query,select_list*,limit*,sort_on*,local_roles*}",\n
  "new_content_action": "%(root_url)s/%(script_id)s?mode=newContent",\n
  "bulk_action": "%(root_url)s/%(script_id)s?mode=bulk",\n
  # XXX View is set by default to empty\n
  "document_hal": "%(root_url)s/%(script_id)s?mode=traverse" + \\\n
                  "&relative_url=%(relative_url)s",\n
  "jio_get_template": "urn:jio:get:%(relative_url)s",\n
  "jio_search_template": "urn:jio:allDocs?%(query)s"\n
}\n
\n
default_document_uri_template = url_template_dict["jio_get_template"]\n
\n
def getRealRelativeUrl(document):\n
  return \'/\'.join(portal.portal_url.getRelativeContentPath(document))\n
\n
def getFormRelativeUrl(form):\n
  return portal.portal_catalog(\n
    portal_type="ERP5 Form",\n
    uid=form.getUid(),\n
    id=form.getId(),\n
    limit=1,\n
    select_dict={\'relative_url\': None}\n
  )[0].relative_url\n
\n
def getFieldDefault(traversed_document, field, key, value=None):\n
  # REQUEST.get(field.id, field.get_value("default"))\n
  return traversed_document.Field_getDefaultValue(field, key, value, REQUEST)\n
\n
def renderField(traversed_document, field, form_relative_url, value=None, meta_type=None, key=None):\n
  if meta_type is None:\n
    meta_type = field.meta_type\n
  if key is None:\n
    key = field.generate_field_key()\n
\n
  if meta_type == "ProxyField":\n
    result = renderField(traversed_document, field, form_relative_url, value, meta_type=field.getRecursiveTemplateField().meta_type, key=key)\n
  elif meta_type == "ListField":\n
    result = {\n
      "type": meta_type,\n
      "key": key,\n
      "editable": field.get_value("editable"),\n
      "css_class": field.get_value("css_class"),\n
      "hidden": field.get_value("hidden"),\n
      "description": field.get_value("description"),\n
      "title": field.get_value("title"),\n
      "required": field.get_value("required"),\n
      # XXX Message can not be converted to json as is\n
      "items": field.get_value("items"),\n
    }\n
    result["default"] = getFieldDefault(traversed_document, field, result["key"], value)\n
  elif meta_type == "RadioField":\n
    result = {\n
      "type": meta_type,\n
      "key": key,\n
      "editable": field.get_value("editable"),\n
      "css_class": field.get_value("css_class"),\n
      "hidden": field.get_value("hidden"),\n
      "description": field.get_value("description"),\n
      "title": field.get_value("title"),\n
      "required": field.get_value("required"),\n
      "items": field.get_value("items"),\n
      "select_first_item": field.get_value("first_item"),\n
      "orientation": field.get_value("orientation"),\n
    }\n
    result["default"] = getFieldDefault(traversed_document, field, result["key"], value)\n
  elif meta_type in ("ParallelListField", "MultiListField"):\n
    result = {\n
      "type": meta_type,\n
      "key": key,\n
      "editable": field.get_value("editable"),\n
      "css_class": field.get_value("css_class"),\n
      "hidden": field.get_value("hidden"),\n
      "description": field.get_value("description"),\n
      "title": field.get_value("title"),\n
      "required": field.get_value("required"),\n
      # XXX Message can not be converted to json as is\n
      "items": field.get_value("items"),\n
    }\n
    result["default"] = getFieldDefault(traversed_document, field, result["key"], value)\n
    result["sub_select_key"] = traversed_document.Field_getSubFieldKeyDict(field, \'default:list\', key=result["key"])\n
    result["sub_input_key"] = "default_" + traversed_document.Field_getSubFieldKeyDict(field, \'default:list:int\', key=result["key"])\n
  elif meta_type in ("StringField", "FloatField", "EmailField", "TextAreaField",\n
                     "LinesField", "ImageField", "FileField", "IntegerField",\n
                     "PasswordField", "EditorField"):\n
    result = {\n
      "type": meta_type,\n
      "key": key,\n
      "editable": field.get_value("editable"),\n
      "css_class": field.get_value("css_class"),\n
      "hidden": field.get_value("hidden"),\n
      "description": field.get_value("description"),\n
      "title": field.get_value("title"),\n
      "required": field.get_value("required"),\n
    }\n
    result["default"] = getFieldDefault(traversed_document, field, result["key"], value)\n
    if meta_type == "FloatField":\n
      result["precision"] = field.get_value("precision")\n
    if meta_type == "ImageField":\n
      options = {}\n
      options[\'display\'] = field.get_value(\'image_display\')\n
      options[\'format\'] = field.get_value(\'image_format\')\n
      options[\'quality\'] = field.get_value(\'image_quality\')\n
      pre_converted_only = field.get_value(\'image_pre_converted_only\')\n
      if pre_converted_only:\n
        options[\'pre_converted_only\'] = pre_converted_only\n
      parameters = \'&\'.join([\'%s=%s\' % (k, v) for k, v in options.items() \\\n
                            if v])\n
      if parameters:\n
        result["default"] = \'%s?%s\' % (result["default"], parameters)\n
\n
  elif meta_type == "DateTimeField":\n
    result = {\n
      "type": meta_type,\n
      "key": key,\n
      "editable": field.get_value("editable"),\n
      "css_class": field.get_value("css_class"),\n
      "hidden": field.get_value("hidden"),\n
      "description": field.get_value("description"),\n
      "title": field.get_value("title"),\n
      "required": field.get_value("required"),\n
      "date_only": field.get_value("date_only"),\n
      "ampm_time_style": field.get_value("ampm_time_style"),\n
      "timezone_style": field.get_value("timezone_style"),\n
      "allow_empty_time": field.get_value(\'allow_empty_time\'),\n
      "hide_day": field.get_value(\'hide_day\'),\n
      "hidden_day_is_last_day": field.get_value(\'hidden_day_is_last_day\'),\n
    }\n
    date_value = getFieldDefault(traversed_document, field, result["key"], value)\n
    if same_type(date_value, DateTime()):\n
      # Serialize DateTime\n
      date_value = date_value.rfc822()\n
    result["default"] = date_value\n
    for subkey in ("year", "month", "day", "hour", "minute", "ampm", "timezone"):\n
      result["subfield_%s_key" % subkey] = traversed_document.Field_getSubFieldKeyDict(field, subkey, key=result["key"])\n
\n
  elif meta_type in ("RelationStringField", "MultiRelationStringField"):\n
    portal_type_list = field.get_value(\'portal_type\')\n
    if portal_type_list:\n
      portal_type_list = [x[0] for x in portal_type_list]\n
\n
      # ported from Base_jumpToRelatedDocument\\n\n
      base_category = field.get_value(\'base_category\')\n
      kw = {}\n
      for k, v in field.get_value(\'parameter_list\'):\n
        kw[k] = v\n
\n
      accessor_name = \'get%sValueList\' % \\\n
        \'\'.join([part.capitalize() for part in base_category.split(\'_\')])\n
      jump_reference_list = getattr(traversed_document, accessor_name)(\n
        portal_type=[x[0] for x in field.get_value(\'portal_type\')],\n
\n
        filter=kw\n
      )\n
    query = url_template_dict["jio_search_template"] % {\n
      "query": make_query({"query": sql_catalog.buildQuery(\n
        {"portal_type": portal_type_list}\n
      ).asSearchTextExpression(sql_catalog)})\n
    }\n
    result = {\n
      "portal_types": portal_type_list,\n
      "query": query,\n
      "catalog_index": field.get_value(\'catalog_index\'),\n
      "allow_jump": field.get_value(\'allow_jump\'),\n
      "allow_creation": field.get_value(\'allow_creation\'),\n
      "type": meta_type,\n
      "key": key,\n
      "editable": field.get_value("editable"),\n
      "css_class": field.get_value("css_class"),\n
      "hidden": field.get_value("hidden"),\n
      "description": field.get_value("description"),\n
      "title": field.get_value("title"),\n
      "required": field.get_value("required")\n
    }\n
    result["default"] = getFieldDefault(traversed_document, field, result["key"], value)\n
    result["relation_field_id"] = traversed_document.Field_getSubFieldKeyDict(\n
      field,\n
      "relation",\n
      key=result["key"]\n
    )\n
    result["relation_item_key"] = traversed_document.Field_getSubFieldKeyDict(\n
      field,\n
      "item", key=result["key"]\n
    )\n
\n
    if jump_reference_list:\n
      url = [jump_reference.getRelativeUrl() for jump_reference in jump_reference_list]\n
      uid = [jump_reference.getUid() for jump_reference in jump_reference_list]\n
      result["relation_item_relative_url"] = url\n
      result["relation_item_uid"] = uid\n
\n
  elif meta_type == "CheckBoxField":\n
    result = {\n
      "type": meta_type,\n
      "key": key,\n
      "editable": field.get_value("editable"),\n
      "css_class": field.get_value("css_class"),\n
      "hidden": field.get_value("hidden"),\n
      "description": field.get_value("description"),\n
      "title": field.get_value("title")\n
    }\n
    result["default"] = getFieldDefault(traversed_document, field, result["key"], value)\n
  elif meta_type == "MultiCheckBoxField":\n
    result = {\n
      "type": meta_type,\n
      "key": key,\n
      "editable": field.get_value("editable"),\n
      "css_class": field.get_value("css_class"),\n
      "hidden": field.get_value("hidden"),\n
      "description": field.get_value("description"),\n
      "title": field.get_value("title"),\n
      "required": field.get_value("required"),\n
      # XXX Message can not be converted to json as is\n
      "items": field.get_value("items"),\n
    }\n
    result["default"] = getFieldDefault(traversed_document, field, result["key"], value)\n
  elif meta_type == "GadgetField":\n
    result = {\n
      "type": meta_type,\n
      "key": key,\n
      "editable": field.get_value("editable"),\n
      "css_class": field.get_value("css_class"),\n
      "hidden": field.get_value("hidden"),\n
      "description": field.get_value("description"),\n
      "title": field.get_value("title"),\n
      "url": field.get_value("gadget_url"),\n
      "sandbox": field.get_value("js_sandbox"),\n
    }\n
    result["default"] = getFieldDefault(traversed_document, field, result["key"], value)\n
  elif meta_type == "ListBox":\n
    # XXX Not implemented\n
    column_list = field.get_value("columns")\n
    editable_column_list = field.get_value(\'editable_columns\')\n
\n
    sort_column_list_tmp = field.get_value(\'sort_columns\')\n
    search_column_list_tmp = field.get_value(\'search_columns\')\n
    sort_column_list = []\n
    search_column_list = []\n
    \n
    #only get sortable&searchable column which is already displayed in listbox\n
    #see https://git.erp5.org/gitweb/erp5.git/blob/HEAD:/product/ERP5Form/ListBox.py?js=1#l1004\n
\n
    if search_column_list_tmp:\n
      search_column_list = search_column_list_tmp\n
    else:\n
      for grain in column_list:\n
        if sql_catalog.isValidColumn(grain[0]):\n
          search_column_list.append(grain)\n
\n
    \n
    if sort_column_list_tmp:\n
      sort_column_list = sort_column_list_tmp\n
    else:\n
      sort_column_list = search_column_list\n
\n
        \n
\n
\n
    # XXX \n
#     list_method = getattr(traversed_document, traversed_document.Listbox_getListMethodName(field))\n
    # portal_types = [x[1] for x in field.get_value(\'portal_types\')]\n
    portal_types = field.get_value(\'portal_types\')\n
    default_params = dict(field.get_value(\'default_params\'))\n
    # How to implement pagination?\n
    # default_params.update(REQUEST.form)\n
    lines = field.get_value(\'lines\')\n
    list_method_name = traversed_document.Listbox_getListMethodName(field)\n
    list_method_query_dict = dict(\n
      portal_type=[x[1] for x in portal_types], **default_params\n
    )\n
    list_method_custom = None\n
\n
    if (editable_column_list):\n
      list_method_custom = url_template_dict["custom_search_template"] % {\n
        "root_url": site_root.absolute_url(),\n
        "script_id": script.id,\n
        "relative_url": traversed_document.getRelativeUrl().replace("/", "%2F"),\n
        "form_relative_url": "%s/%s" % (form_relative_url, field.id),\n
        "list_method": list_method_name,\n
        "default_param_json": urlsafe_b64encode(json.dumps(list_method_query_dict))\n
      }\n
      list_method_query_dict = {}\n
    elif (list_method_name == "portal_catalog"):\n
      pass\n
    elif (list_method_name == "searchFolder"):\n
      list_method_query_dict["parent_uid"] = traversed_document.getUid()\n
    else:\n
      list_method_custom = url_template_dict["custom_search_template_no_editable"] % {\n
        "root_url": site_root.absolute_url(),\n
        "script_id": script.id,\n
        "relative_url": traversed_document.getRelativeUrl().replace("/", "%2F"),\n
        "list_method": list_method_name,\n
        "default_param_json": urlsafe_b64encode(json.dumps(list_method_query_dict))\n
      }\n
      list_method_query_dict = {}\n
\n
#     row_list = list_method(limit=lines, portal_type=portal_types,\n
#                            **default_params)\n
#     line_list = []\n
#     for row in row_list:\n
#       document = row.getObject()\n
#       line = {\n
#         "url": url_template_dict["document_hal"] % {\n
#           "root_url": site_root.absolute_url(),\n
#           "relative_url": document.getRelativeUrl(),\n
#           "script_id": script.id\n
#         }\n
#       }\n
#       for property, title in columns:\n
#         prop = document.getProperty(property)\n
#         if same_type(prop, DateTime()):\n
#           prop = "XXX Serialize DateTime"  \n
#         line[title] = prop\n
#         line["_relative_url"] = document.getRelativeUrl()\n
#       line_list.append(line)\n
\n
    result = {\n
      "type": meta_type,\n
      "editable": field.get_value("editable"),\n
      # "column_list": [x[1] for x in columns],\n
      "column_list": column_list,\n
      "search_column_list": search_column_list,\n
      "sort_column_list": sort_column_list,\n
      "editable_column_list": editable_column_list,\n
      "show_anchor": field.get_value("anchor"),\n
#       "line_list": line_list,\n
      "title": field.get_value("title"),\n
      "key": key,\n
      "portal_type": portal_types,\n
      "lines": lines,\n
      "default_params": default_params,\n
      "list_method": list_method_name\n
    }\n
    if (list_method_custom is not None):\n
      result["list_method_template"] = list_method_custom\n
\n
    result["query"] = url_template_dict["jio_search_template"] % {\n
        "query": make_query({"query": sql_catalog.buildQuery(\n
          list_method_query_dict\n
        ).asSearchTextExpression(sql_catalog)})\n
      }\n
  else:\n
    # XXX Not implemented\n
    result = {\n
      "type": meta_type,\n
      "_debug": "Unsupported field type",\n
      "title": field.get_value("title"),\n
      "key": key,\n
    }\n
  return result\n
\n
\n
def renderForm(traversed_document, form, response_dict):\n
  REQUEST.set(\'here\', traversed_document)\n
  field_errors = REQUEST.get(\'field_errors\', {})\n
\n
  #hardcoded\n
  if form.pt == \'form_dialog\':\n
    action_to_call = "Base_callDialogMethod"\n
  else:\n
    action_to_call = form.action\n
\n
  # Form action\n
  response_dict[\'_actions\'] = {\n
    \'put\': {\n
      "href": url_template_dict["form_action"] % {\n
        "traversed_document_url": site_root.absolute_url() + "/" + traversed_document.getRelativeUrl(),\n
        "action_id": action_to_call\n
      },\n
      "action": form.action,\n
      "method": form.method,\n
    }\n
  }\n
  # Form traversed_document\n
  response_dict[\'_links\'][\'traversed_document\'] = {\n
    "href": default_document_uri_template % {\n
      "root_url": site_root.absolute_url(),\n
      "relative_url": traversed_document.getRelativeUrl(),\n
      "script_id": script.id\n
    },\n
    "name": traversed_document.getRelativeUrl(),\n
    "title": traversed_document.getTitle()\n
  }\n
\n
  form_relative_url = getFormRelativeUrl(form)\n
  response_dict[\'_links\'][\'form_definition\'] = {\n
#     "href": default_document_uri_template % {\n
#       "root_url": site_root.absolute_url(),\n
#       "script_id": script.id,\n
#       "relative_url": getFormRelativeUrl(form)\n
#     },\n
    "href": default_document_uri_template % {\n
      "relative_url": form_relative_url\n
    },\n
    \'name\': form.id\n
  }\n
\n
  for group in form.Form_getGroupTitleAndId():\n
\n
    if group[\'gid\'].find(\'hidden\') < 0:\n
#       field_list = []\n
      for field in form.get_fields_in_group(group[\'goid\']):\n
#         field_list.append((field.id, renderRawField(field)))\n
        if field.get_value("enabled"):\n
          try:\n
            response_dict[field.id] = renderField(traversed_document, field, form_relative_url)\n
            if field_errors.has_key(field.id):\n
              response_dict[field.id]["error_text"] = field_errors[field.id].error_text\n
          except AttributeError:\n
            # Do not crash if field configuration is wrong.\n
            pass\n
\n
  #       for field_group in field.form.get_groups():\n
  #         traversed_document.log("Field group: " + field_group)\n
  #         traversed_document.log(field_group)\n
  #         for field_property in field.form.get_fields_in_group(field_group):\n
  # #           traversed_document.log("Field attribute: " + field_property.id)\n
  # #           field.get_value(field_property.id)\n
  #           traversed_document.log(field_property)\n
\n
#       group_list.append((group[\'gid\'], field_list))\n
\n
  response_dict["form_id"] = {\n
    "type": "StringField",\n
    "key": "form_id",\n
    "default": form.id,\n
    "editable": 0,\n
    "css_class": "",\n
    "hidden": 1,\n
    "description": "",\n
    "title": "form_id",\n
    "required": 1,\n
  }\n
\n
#   response_dict["group_list"] = group_list\n
# rendered_response_dict["_embedded"] = {\n
#   "form": raw_response_dict\n
# }\n
\n
\n
# XXX form action update, etc\n
def renderRawField(field):\n
  meta_type = field.meta_type\n
\n
  return {\n
    "meta_type": field.meta_type\n
  }\n
\n
\n
  if meta_type == "MethodField":\n
    result = {\n
      "meta_type": field.meta_type\n
    }\n
  else:\n
    result = {\n
      "meta_type": field.meta_type,\n
      "_values": field.values,\n
      # XXX TALES expression is not JSON serializable by default\n
      # "_tales": field.tales\n
      "_overrides": field.overrides\n
    }\n
  if meta_type == "ProxyField":\n
    result[\'_delegated_list\'] = field.delegated_list\n
#     try:\n
#       result[\'_delegated_list\'].pop(\'list_method\')\n
#     except KeyError:\n
#       pass\n
\n
  # XXX ListMethod is not JSON serialized by default\n
  try:\n
    result[\'_values\'].pop(\'list_method\')\n
  except KeyError:\n
    pass\n
  try:\n
    result[\'_overrides\'].pop(\'list_method\')\n
  except KeyError:\n
    pass\n
  return result\n
\n
\n
def renderFormDefinition(form, response_dict):\n
  group_list = []\n
  for group in form.Form_getGroupTitleAndId():\n
\n
    if group[\'gid\'].find(\'hidden\') < 0:\n
      field_list = []\n
\n
      for field in form.get_fields_in_group(group[\'goid\'], include_disabled=1):\n
        field_list.append((field.id, renderRawField(field)))\n
\n
      group_list.append((group[\'gid\'], field_list))\n
  response_dict["group_list"] = group_list\n
  response_dict["title"] = form.getTitle()\n
  response_dict["pt"] = form.pt\n
  response_dict["action"] = form.action\n
\n
\n
mime_type = \'application/hal+json\'\n
portal = context.getPortalObject()\n
sql_catalog = portal.portal_catalog.getSQLCatalog()\n
\n
# Calculate the site root to prevent unexpected browsing\n
is_web_mode = (context.REQUEST.get(\'current_web_section\', None) is not None) or (hasattr(context, \'isWebMode\') and context.isWebMode())\n
# is_web_mode =  traversed_document.isWebMode()\n
if is_web_mode:\n
  site_root = context.getWebSectionValue()\n
  view_action_type = site_root.getLayoutProperty("configuration_view_action_category", default=\'object_view\')\n
else:\n
  site_root = portal\n
  view_action_type = "object_view"\n
\n
context.Base_prepareCorsResponse(RESPONSE=response)\n
\n
# Check if traversed_document is the site_root\n
if relative_url:\n
  temp_traversed_document = site_root.restrictedTraverse(relative_url, None)\n
  if (temp_traversed_document is None):\n
    response.setStatus(404)\n
    return ""\n
else:\n
  temp_traversed_document = context\n
temp_is_site_root = (temp_traversed_document.getPath() == site_root.getPath())\n
temp_is_portal = (temp_traversed_document.getPath() == portal.getPath())\n
\n
def calculateHateoas(is_portal=None, is_site_root=None, traversed_document=None, REQUEST=None,\n
                     response=None, view=None, mode=None, query=None,\n
                     select_list=None, limit=None, form=None,\n
                     relative_url=None, restricted=None, list_method=None,\n
                     default_param_json=None, form_relative_url=None):\n
\n
  if relative_url:\n
    try:\n
      traversed_document = site_root.restrictedTraverse(str(relative_url))\n
      view = str(view)\n
      is_site_root = False\n
    except:\n
      raise NotImplementedError(relative_url)\n
  result_dict = {\n
    \'_debug\': mode,\n
    \'_links\': {\n
      "self": {\n
        # XXX Include query parameters\n
        # FIXME does not work in case of bulk queries\n
        "href": traversed_document.Base_getRequestUrl()\n
      },\n
      # Always inform about site root\n
      "site_root": {\n
        "href": default_document_uri_template % {\n
          "root_url": site_root.absolute_url(),\n
          "relative_url": site_root.getRelativeUrl(),\n
          "script_id": script.id\n
        },\n
        "name": site_root.getTitle(),\n
      },\n
      # Always inform about portal\n
      "portal": {\n
        "href": default_document_uri_template % {\n
          "root_url": portal.absolute_url(),\n
          # XXX the portal has an empty getRelativeUrl. Make it still compatible\n
          # with restrictedTraverse\n
          "relative_url": portal.getId(),\n
          "script_id": script.id\n
        },\n
        "name": portal.getTitle(),\n
      }\n
    }\n
  }\n
  \n
  \n
  if (restricted == 1) and (portal.portal_membership.isAnonymousUser()):\n
    response.setStatus(401)\n
  \n
  elif mime_type != traversed_document.Base_handleAcceptHeader([mime_type]):\n
    response.setStatus(406)\n
    return ""\n
  \n
  \n
  elif (mode == \'root\') or (mode == \'traverse\'):\n
    #################################################\n
    # Raw document\n
    #################################################\n
    if (REQUEST is not None) and (REQUEST.other[\'method\'] != "GET"):\n
      response.setStatus(405)\n
      return ""\n
    # Default properties shared by all ERP5 Document and Site\n
    action_dict = {}\n
  #   result_dict[\'_relative_url\'] = traversed_document.getRelativeUrl()\n
    result_dict[\'title\'] = traversed_document.getTitle()\n
  \n
    # Add a link to the portal type if possible\n
    if not is_portal:\n
      result_dict[\'_links\'][\'type\'] = {\n
        "href": default_document_uri_template % {\n
          "root_url": site_root.absolute_url(),\n
          "relative_url": portal.portal_types[traversed_document.getPortalType()]\\\n
                            .getRelativeUrl(), \n
          "script_id": script.id\n
        },\n
        "name": traversed_document.getPortalType(),\n
      }\n
      \n
    # Return info about container\n
    if not is_portal:\n
      container = traversed_document.getParentValue()\n
      if container != portal:\n
        # Jio does not support fetching the root document for now\n
        result_dict[\'_links\'][\'parent\'] = {\n
          "href": default_document_uri_template % {\n
            "root_url": site_root.absolute_url(),\n
            "relative_url": container.getRelativeUrl(), \n
            "script_id": script.id\n
          },\n
          "name": container.getTitle(),\n
        }\n
  \n
    # XXX Loop on form rendering\n
    erp5_action_dict = portal.Base_filterDuplicateActions(\n
      portal.portal_actions.listFilteredActionsFor(traversed_document))\n
  \n
    embedded_url = None\n
    # XXX See ERP5Type.getDefaultViewFor\n
    for erp5_action_key in erp5_action_dict.keys():\n
      erp5_action_list = []\n
      for view_action in erp5_action_dict[erp5_action_key]:\n
        # Action condition is probably checked in Base_filterDuplicateActions\n
        erp5_action_list.append({\n
          \'href\': \'%s\' % view_action[\'url\'],\n
          \'name\': view_action[\'id\'],\n
          \'title\': view_action[\'title\']\n
        })\n
        # Try to embed the form in the result\n
        if (view == view_action[\'id\']):\n
          embedded_url = \'%s\' % view_action[\'url\']\n
          \n
        if (erp5_action_key in (view_action_type, "view", "workflow", "object_new_content_action")):\n
          erp5_action_list[-1][\'href\'] = url_template_dict["traverse_generator"] % {\n
                "root_url": site_root.absolute_url(),\n
                "script_id": script.id,\n
                "relative_url": traversed_document.getRelativeUrl().replace("/", "%2F"),\n
                "view": erp5_action_list[-1][\'name\']\n
              }\n
  \n
      if erp5_action_list:\n
        if len(erp5_action_list) == 1:\n
          erp5_action_list = erp5_action_list[0]\n
          \n
        if erp5_action_key == view_action_type:\n
          # Configure view tabs on server level\n
          result_dict[\'_links\']["view"] = erp5_action_list\n
          \n
        # XXX Put a prefix to prevent conflict\n
        result_dict[\'_links\']["action_" + erp5_action_key] = erp5_action_list\n
  \n
  #   for view_action in erp5_action_dict.get(\'object_view\', []):\n
  #     traversed_document.log(view_action)\n
  #     # XXX Check the action condition\n
  # #     if (view is None) or (view != view_action[\'name\']):\n
  #     object_view_list.append({\n
  #       \'href\': \'%s\' % view_action[\'url\'],\n
  #       \'name\': view_action[\'name\']\n
  #     })\n
  \n
  \n
  #   if (renderer_form is not None):\n
  #     traversed_document_property_dict, renderer_form_json = traversed_document.Base_renderFormAsSomething(renderer_form)\n
  #     result_dict[\'_embedded\'] = {\n
  #       \'object_view\': renderer_form_json\n
  #     }\n
  #     result_dict.update(traversed_document_property_dict)\n
  \n
    # XXX XXX XXX XXX\n
    if (embedded_url is not None):\n
      # XXX Try to fetch the form in the traversed_document of the document\n
      # Of course, this code will completely crash in many cases (page template\n
      # instead of form, unexpected action TALES expression). Happy debugging.\n
      # renderer_form_relative_url = view_action[\'url\'][len(portal.absolute_url()):]\n
      form_id = embedded_url.split(\'?\', 1)[0].split("/")[-1]\n
      # renderer_form = traversed_document.restrictedTraverse(form_id, None)\n
      # XXX Proxy field are not correctly handled in traversed_document of web site\n
      renderer_form = getattr(traversed_document, form_id)\n
  #     traversed_document.log(form_id)\n
      if (renderer_form is not None):\n
        embedded_dict = {\n
          \'_links\': {\n
            \'self\': {\n
              \'href\': embedded_url\n
            }\n
          }\n
        }\n
        # Put all query parameters (?reset:int=1&workflow_action=start_action) in request to mimic usual form display\n
        query_split = embedded_url.split(\'?\', 1)\n
        if len(query_split) == 2:\n
          for query_parameter in query_split[1].split("&"):\n
            query_key, query_value = query_parameter.split("=")\n
            REQUEST.set(query_key, query_value)\n
  \n
        renderForm(traversed_document, renderer_form, embedded_dict)\n
        result_dict[\'_embedded\'] = {\n
          \'_view\': embedded_dict\n
          # embedded_action_key: embedded_dict\n
        }\n
  #       result_dict[\'_links\']["_view"] = {"href": embedded_url}\n
  \n
        # Include properties in document JSON\n
        # XXX Extract from renderer form?\n
        """\n
        for group in renderer_form.Form_getGroupTitleAndId():\n
          for field in renderer_form.get_fields_in_group(group[\'goid\']):\n
            field_id = field.id\n
  #           traversed_document.log(field_id)\n
            if field_id.startswith(\'my_\'):\n
              property_name = field_id[len(\'my_\'):]\n
  #             traversed_document.log(property_name)\n
              property_value = traversed_document.getProperty(property_name, d=None)\n
              if (property_value is not None):\n
                if same_type(property_value, DateTime()):\n
                  # Serialize DateTime\n
                  property_value = property_value.rfc822()\n
                result_dict[property_name] = property_value \n
                """\n
  \n
    ##############\n
    # XXX Custom slapos code\n
    ##############\n
    if is_site_root:\n
  \n
      result_dict[\'default_view\'] = \'view\'\n
      REQUEST.set("X-HATEOAS-CACHE", 1)\n
  \n
      # Global action users for the jIO plugin\n
      # XXX Would be better to not hardcode them but put them as portal type\n
      # "actions" (search could be on portal_catalog document, traverse on all\n
      # documents, newContent on all, etc)\n
  #     result_dict[\'_links\'][\'object_search\'] = {\n
  #       \'href\': \'%s/ERP5Site_viewSearchForm?portal_skin=Hal\' % absolute_url,\n
  #       \'name\': \'Global Search\'\n
  #     }\n
      result_dict[\'_links\'][\'raw_search\'] = {\n
        "href": url_template_dict["search_template"] % {\n
          "root_url": site_root.absolute_url(),\n
          "script_id": script.id\n
        },\n
        \'name\': \'Raw Search\',\n
        \'templated\': True\n
      }\n
      result_dict[\'_links\'][\'traverse\'] = {\n
        "href": url_template_dict["traverse_template"] % {\n
          "root_url": site_root.absolute_url(),\n
          "script_id": script.id\n
        },\n
        \'name\': \'Traverse\',\n
        \'templated\': True\n
      }\n
      action_dict[\'add\'] = {\n
        "href": url_template_dict["new_content_action"] % {\n
          "root_url": site_root.absolute_url(),\n
          "script_id": script.id\n
        },\n
        \'method\': \'POST\',\n
        \'name\': \'New Content\',\n
      }\n
      action_dict[\'bulk\'] = {\n
        "href": url_template_dict["bulk_action"] % {\n
          "root_url": site_root.absolute_url(),\n
          "script_id": script.id\n
        },\n
        \'method\': \'POST\',\n
        \'name\': \'Bulk\'\n
      }\n
  \n
      # Handle also other kind of users: instance, computer, master\n
      person = portal.ERP5Site_getAuthenticatedMemberPersonValue()\n
      if person is not None:\n
        result_dict[\'_links\'][\'me\'] = {\n
          "href": default_document_uri_template % {\n
            "root_url": site_root.absolute_url(),\n
            "relative_url": person.getRelativeUrl(), \n
            "script_id": script.id\n
          },\n
  #         \'_relative_url\': person.getRelativeUrl()\n
        }\n
  \n
    else:\n
      traversed_document_portal_type = traversed_document.getPortalType()\n
      if traversed_document_portal_type == "ERP5 Form":\n
        renderFormDefinition(traversed_document, result_dict)\n
        REQUEST.set("X-HATEOAS-CACHE", 1)\n
      elif relative_url == \'portal_workflow\':\n
        result_dict[\'_links\'][\'action_worklist\'] = {\n
          "href": url_template_dict[\'worklist_template\'] % {\n
            "root_url": site_root.absolute_url(),\n
            "script_id": script.id\n
          }\n
        }\n
  \n
    # Define document action\n
    if action_dict:\n
      result_dict[\'_actions\'] = action_dict\n
  \n
  \n
  elif mode == \'search\':\n
    #################################################\n
    # Portal catalog search\n
    #################################################\n
    if REQUEST.other[\'method\'] != "GET":\n
      response.setStatus(405)\n
      return ""\n
  \n
    if query == "__root__":\n
      # XXX Hardcoded behaviour to get root object with jIO\n
      sql_list = [site_root]\n
  \n
    elif query == "__portal__":\n
      # XXX Hardcoded behaviour to get portal object with jIO\n
      sql_list = [portal]\n
  \n
  #     document = site_root\n
  #     document_result = {\n
  # #       \'_relative_url\': site_root.getRelativeUrl(),\n
  #       \'_links\': {\n
  #         \'self\': {\n
  #           "href": default_document_uri_template % {\n
  #             "root_url": site_root.absolute_url(),\n
  #             "relative_url": document.getRelativeUrl(), \n
  #             "script_id": script.id\n
  #           },\n
  #         },\n
  #       }\n
  #     }\n
  #     for select in select_list:\n
  #       document_result[select] = document.getProperty(select, d=None)\n
  #     result_dict[\'_embedded\'] = {"contents": [document_result]}\n
    else:\n
  #     raise NotImplementedError("Unsupported query: %s" % query)\n
      \n
  \n
  #   # XXX\n
  #   length = len(\'/%s/\' % portal.getId())\n
  #   # context.log(portal.portal_catalog(full_text=query, limit=limit, src__=1))\n
  #   context.log(query)\n
      catalog_kw = {}\n
      if (default_param_json is not None):\n
        catalog_kw = json.loads(urlsafe_b64decode(default_param_json))\n
      if (list_method is None):\n
        callable_list_method = portal.portal_catalog\n
      else:\n
        callable_list_method = getattr(traversed_document, list_method)\n
\n
      tmp_sort_on = ()\n
      if sort_on is not None:\n
        for grain in sort_on:\n
          if grain != "":\n
            tmp_sort_on += (tuple([x for x in grain.split(",")]),)\n
\n
      if query:\n
        sql_list = callable_list_method(full_text=query, limit=limit, sort_on=tmp_sort_on, local_roles=local_roles, **catalog_kw)\n
      else:\n
        sql_list = callable_list_method(limit=limit, sort_on=tmp_sort_on, local_roles=local_roles, **catalog_kw)\n
\n
    result_list = []\n
  \n
  #   if (select_list is None):\n
  #     # Only include links\n
  #     for sql_document in sql_list:\n
  #       document = sql_document.getObject()\n
  #       result_list.append({\n
  #         "href": default_document_uri_template % {\n
  #           "root_url": site_root.absolute_url(),\n
  #           "relative_url": document.getRelativeUrl(), \n
  #           "script_id": script.id\n
  #         },\n
  #       })\n
  #     result_dict[\'_links\'][\'contents\'] = result_list\n
  # \n
  #   else:\n
  \n
    # Cast to list if only one element is provided\n
    editable_field_dict = {}\n
    if select_list is None:\n
      select_list = []\n
    elif same_type(select_list, ""):\n
      select_list = [select_list]\n
  \n
    if select_list:\n
      if (form_relative_url is not None):\n
        listbox_field = portal.restrictedTraverse(form_relative_url)\n
        listbox_field_id = listbox_field.id\n
        # XXX Proxy field are not correctly handled in traversed_document of web site\n
        listbox_form = getattr(traversed_document, listbox_field.aq_parent.id)\n
        for select in select_list:\n
          # See Listbox.py getEditableField method\n
          if listbox_form.has_field("%s_%s" % (listbox_field_id, select), include_disabled=1):\n
            editable_field_dict[select] = listbox_form.get_field("%s_%s" % (listbox_field_id, select), include_disabled=1)\n
  \n
    for sql_document in sql_list:\n
      try:\n
        document = sql_document.getObject()\n
      except AttributeError:\n
        # XXX ERP5 Site is not an ERP5 document\n
        document = sql_document\n
      document_uid = document.getUid()\n
      document_result = {\n
  #       \'_relative_url\': sql_document.path[length:],\n
        \'_links\': {\n
          \'self\': {\n
            "href": default_document_uri_template % {\n
              "root_url": site_root.absolute_url(),\n
              # XXX ERP5 Site is not an ERP5 document\n
              "relative_url": getRealRelativeUrl(document) or document.getId(), \n
              "script_id": script.id\n
            },\n
          },\n
        }\n
      }\n
      if editable_field_dict:\n
        document_result[\'listbox_uid:list\'] = {\n
          \'key\': "%s_uid:list" % listbox_field_id,\n
          \'value\': document_uid\n
        }\n
      for select in select_list:\n
        if editable_field_dict.has_key(select):\n
          REQUEST.set(\'cell\', document)\n
  \n
          if (\'default\' in editable_field_dict[select].tales):\n
            tmp_value = None\n
          else:\n
            tmp_value = document.getProperty(select, d=None)\n
  \n
          property_value = renderField(traversed_document, editable_field_dict[select], form_relative_url,\n
                                       tmp_value,\n
                                       key=\'field_%s_%s\' % (editable_field_dict[select].id,\n
                                       document_uid))\n
          REQUEST.other.pop(\'cell\', None)\n
        else:\n
          property_value = document.getProperty(select, d=None)\n
        if property_value is not None:\n
          if same_type(property_value, DateTime()):\n
            # Serialize DateTime\n
            property_value = property_value.rfc822()\n
          document_result[select] = property_value\n
      result_list.append(document_result)\n
    result_dict[\'_embedded\'] = {"contents": result_list}\n
  \n
    result_dict[\'_query\'] = query\n
    result_dict[\'_local_roles\'] = local_roles\n
    result_dict[\'_limit\'] = limit\n
    result_dict[\'_select_list\'] = select_list\n
  \n
  elif mode == \'form\':\n
    #################################################\n
    # Calculate form value\n
    #################################################\n
    if REQUEST.other[\'method\'] != "POST":\n
      response.setStatus(405)\n
      return ""\n
  \n
    renderForm(traversed_document, form, result_dict)\n
  \n
  elif mode == \'newContent\':\n
    #################################################\n
    # Create new document\n
    #################################################\n
    if REQUEST.other[\'method\'] != "POST":\n
      response.setStatus(405)\n
      return ""\n
    portal_type = REQUEST.form["portal_type"]\n
    parent_relative_url = REQUEST.form["parent_relative_url"]\n
    # First, try to validate the data on a temp document\n
    parent = portal.restrictedTraverse(parent_relative_url)\n
    # module = portal.getDefaultModule(portal_type=portal_type)\n
    document = parent.newContent(\n
      portal_type=portal_type\n
    )\n
    # http://en.wikipedia.org/wiki/Post/Redirect/Get\n
    response.setStatus(201)\n
    response.setHeader("X-Location",\n
      default_document_uri_template % {\n
        "root_url": site_root.absolute_url(),\n
        "relative_url": document.getRelativeUrl(),\n
        "script_id": script.id\n
      })\n
    return \'\'\n
  \n
  elif mode == \'bulk\':\n
    #################################################\n
    # Return multiple documents in one request\n
    #################################################\n
    if REQUEST.other[\'method\'] != "POST":\n
      response.setStatus(405)\n
      return ""\n
    result_dict["result_list"] = [calculateHateoas(mode="traverse", **x) for x in json.loads(bulk_list)]\n
  \n
  elif mode == \'worklist\':\n
    #################################################\n
    # Return all worklist jio urls\n
    #################################################\n
    if REQUEST.other[\'method\'] != "GET":\n
      response.setStatus(405)\n
      return ""\n
    action_list = portal.portal_workflow.WorkflowTool_listActionParameterList()\n
    work_list = []\n
    for action in action_list:\n
      query = sql_catalog.buildQuery(action[\'query\'])\\\n
                         .asSearchTextExpression(sql_catalog)\n
\n
      if (action[\'local_roles\']):\n
        # Hack to consider local_roles as a valid catalog parameter\n
        role_query = sql_catalog.buildQuery({\'simulation_state\': action[\'local_roles\']})\\\n
                                .asSearchTextExpression(sql_catalog)\n
\n
        query += \' AND %s\' % role_query.replace(\'simulation_state\', \'local_roles\')\n
\n
      portal_type = action[\'query\'].get(\'portal_type\', None)\n
      if (portal_type):\n
        if not same_type(portal_type, \'\'):\n
          portal_type = portal_type[0]\n
\n
        work_list.append({\n
          \'href\': url_template_dict["jio_search_template"] % {\n
                    "query": make_query({"query": query})\n
                  },\n
          \'name\': action[\'name\'],\n
          \'count\': action[\'count\'],\n
          \'module\': default_document_uri_template % {\n
                      "relative_url": portal.getDefaultModuleId(portal_type)\n
                    }\n
        })\n
\n
    result_dict["worklist"] = work_list\n
\n
  else:\n
    raise NotImplementedError("Unsupported mode %s" % mode)\n
  \n
  return result_dict\n
\n
response.setHeader(\'Content-Type\', mime_type)\n
hateoas = calculateHateoas(is_portal=temp_is_portal, is_site_root=temp_is_site_root,\n
                           traversed_document=temp_traversed_document,\n
                           relative_url=relative_url,\n
                           REQUEST=REQUEST, response=response, view=view, mode=mode,\n
                           query=query, select_list=select_list, limit=limit, form=form,\n
                           restricted=restricted, list_method=list_method,\n
                           default_param_json=default_param_json,\n
                           form_relative_url=form_relative_url)\n
if hateoas == "":\n
  return hateoas\n
else:\n
  return json.dumps(hateoas, indent=2)\n


]]></string> </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string>REQUEST=None, response=None, view=None, mode=\'root\', query=None, select_list=None, limit=10, local_roles=None, form=None, relative_url=None, restricted=0, list_method=None, default_param_json=None, form_relative_url=None, bulk_list="[]", sort_on=()</string> </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>ERP5Document_getHateoas</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
