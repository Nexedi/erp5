<tal:block tal:replace="nothing"
           xmlns:tal="http://xml.zope.org/namespaces/tal"
           xmlns:metal="http://xml.zope.org/namespaces/metal"
           xmlns:i18n="http://xml.zope.org/namespaces/i18n">
<!--
Copyright (c) 2006 Nexedi SARL and Contributors. All Rights Reserved.
                   Vincent Pelletier <vincent@nexedi.com>
                   Christophe Dumez <christophe@nexedi.com>

This program is Free Software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
-->
</tal:block>

<tal:block metal:use-macro="here/view_main/macros/master">
  <tal:block metal:fill-slot="main">
<tal:block metal:define-macro="master">

  <tal:block tal:define="object_name form/title;
        object_name python:object_name.replace(' ','');
        portal_url here/portal_url;
        getCSSUrl python: getattr(form, 'getCSSUrl', None);
        dummy python:request.set('editable_mode', 1);">
    <link href="my_css" rel="stylesheet" type="text/css"
          tal:attributes="href python: getCSSUrl and getCSSUrl() or '%s_css.css' % object_name;"/>
  </tal:block>
  <tal:block tal:define="field_errors python: request.get('field_errors',{});
                         dummy python: request.set('here', here);
                         groups python: form.get_groups();
                         getBackgroundUrl python: getattr(form, 'getBackgroundUrl', None);
                         object_name form/title;
                         object_name python:object_name.replace(' ','')">
    <tal:block tal:condition="preferred_html_style_developper_mode"> 
      <tal:block metal:use-macro="developper_shortcut_render/macros/form"/>
    </tal:block>
    <tal:block tal:repeat="pagenum python:range(len(groups))">
      <div class="my_page_class"
        tal:attributes="class string:page_${pagenum}">
        <img src="test_object_page_0.png"
            alt="background"
            class="page_0_background"
            tal:attributes="src python: getBackgroundUrl and getBackgroundUrl(pagenum) 
                                        or '%s_background_%s' % (object_name, pagenum);
             class python:'page_%s_background %s' % 
            (pagenum, test(pagenum == 0,'first_page', 'other_page'))"/>
        <div tal:replace="nothing" >
          page is not empty (there is at least one element) 
          considering class = 'page_' + pagenum
        </div>
        <div tal:repeat="field python:form.get_fields_in_group(groups[pagenum])"
            tal:omit-tag=""><!--get a field-->
          <div tal:condition="python:field.meta_type != 'HiddenStringField'"
                tal:define="name python:str(field.id);
                            value python:request.get(field.id,None);
                            class_base string:${name}"
                tal:omit-tag="">
            <div tal:omit-tag=""
              tal:define="struct python:field.render(value,request)">
              <div tal:omit-tag=""
                    tal:define="struct python:struct.replace('&nbsp'+chr(59),'');
                                struct_input_div python:struct.split('<input');
                                struct_input_len python:len(struct_input_div);
                                struct_input_range python:range(struct_input_len);
                                struct_input_test python:int(struct_input_len) < 3;
                                struct_selec_div python:struct.split('<select');
                                struct_selec_len python:len(struct_selec_div);
                                struct_selec_range python:range(struct_selec_len);
                                struct_selec_test python:struct_selec_len == 1 or struct_input_len == 2;
                                struct_test python:struct_selec_test and struct_input_test">
                <div tal:replace="nothing">
                  - rendering final output string through 'field.render'.
                  - replacing all '&nbsp' with '' to prevent error in rendering
                  - making two tests : first one (struct_input_test) is used to test if
                  rendering is single field (StringField, ) or multi-field
                  (DateTimeField, RelationStringField, ).
                  PLEASE note : CheckboxField is rendered as a single field in html_style
                  but as a multi-field in xhtml_style
                  Second one takes care of the RelationStrinField item when it is filled
                  as it is composed of 1 input field + 1 select field
                </div>
                <div tal:omit-tag="" 
                  tal:condition="struct_test"><!-- begining single field processing -->
                  <div tal:replace="nothing">
                    this bloc has been implemented to take care of the textarea
                    and single inputfield renderings. this just process the
                    output rendering as a single field.
                    UPDATE : with xhtml_style, this 
                  </div>
-                  <div class="input" tal:attributes="class python: ('<' not in struct) and '%s_class' % name or ''" tal:condition="python:(not field_errors.has_key(field.id))"><!-- field has no error -->
                    <div tal:content="structure struct"
                          tal:attributes="class string:${name}_class;
                          title field/title"/>
                  </div>
                  <div class="input" tal:attributes="class python: ('<' not in struct) and '%s_class' % name or ''" tal:condition="python: field_errors.has_key(field.id)"><!-- field has errors-->
                    <div tal:content="structure struct"
                    i18n:attributes="title"
                    tal:attributes="class string:${name}_class_error;
                    title string:${field/title}"/>
                  </div>
                  <!-- end single field processing-->
                </div>
                <div tal:omit-tag=""
                      tal:condition="not:struct_input_test"><!-- begining multi-input processing -->
                  <div tal:replace="nothing">
                    this bloc is designed to process standard multi-input fields such as
                    DateTimeFields and RelationStringFields. (and checkbox field in
                    xhtml_style).
                    As the rendering is based on several inputs, need to take each of them,
                    give them the good attributes (class) and then pasting the result string
                    in the document before processing the next input
                  </div>
                  <tal:block tal:condition="python: 'hidden' not in struct_input_div[1]">
                    <tal:block tal:define="struct_range python:range(struct_input_len)"
                          tal:repeat="struct_ind python:struct_range[1:]">
                      <div tal:condition="python:(not field_errors.has_key(field.id))"><!-- field has no error 1-->
                        <div tal:define="struct_content python:struct_input_div[struct_ind];
                          struct_content python:'/>'in struct_content and struct_content[:struct_content.rfind('/>')+2] or struct_content;
                                                        struct_final python:'%s %s' %
                                                        ('<input ', struct_content);
                                                        class_final python:'%s%s%s' %
                                                        (class_base,'_class_', struct_ind)"
                              tal:content="structure struct_final"
                              tal:attributes="class class_final;
                                              title field/title">
                        </div>
                      </div>
                      <div tal:condition="python:field_errors.has_key(field.id)"><!-- field has errors 1-->
                        <div tal:define="struct_content python:struct_input_div[struct_ind];
                                          struct_final python:'%s %s' %
                                          ('<input ', struct_content);
                                          class_final python:'%s%s%s%s' %
                                          (class_base,'_class_', struct_ind, '_error')"
                              tal:content="structure struct_final"
                              i18n:attributes="title"
                              tal:attributes="class class_final;
                              title field/title"/>
                      </div>
                    </tal:block>
                  </tal:block>
                  <tal:block tal:condition="python: 'hidden' in struct_input_div[1]">
                    <!-- processing CheckBoxField in xhtml_style -->
                    <div tal:define="struct_range python:range(struct_input_len)"
                          tal:repeat="struct_ind python:struct_range[1:]">
                      <tal:block tal:condition="python:(not field_errors.has_key(field.id))">
                        <!-- field has no error 2-->
                        <div tal:define="struct_content python:struct_input_div[struct_ind];
                                          struct_final python:'%s %s' %
                                          ('<input ', struct_content);
                                          class_final python:'%s%s' %
                                          (class_base,'_class')"
                                          tal:content="structure struct_final"
                                          tal:attributes="class class_final;
                                          title field/title"/>
                      </tal:block>
                      <tal:block tal:condition="python:field_errors.has_key(field.id)">
                        <!-- field has errors 2-->
                        <div tal:define="struct_content python:struct_input_div[struct_ind];
                                          struct_final python:'%s %s' %
                                          ('<input ', struct_content);
                                          class_final python:'%s%s' %
                                          (class_base,'_class_error')"
                              tal:content="structure struct_final"
                              tal:attributes="class class_final;
                              title field/title"/>
                      </tal:block>
                    </div>
                  </tal:block>
                </div>
                <div tal:omit-tag=""
                      tal:condition="not:struct_selec_test">
                      <!-- start select-field rendering -->
                  <div tal:replace="nothing">
                    this bloc is here to process special multi-fields rendering based on
                    input + select (for RelationStringFields when user can select element
                    from a list object)
                  </div>
                  <div tal:omit-tag=""
                    tal:define="struct_content0 python:struct_selec_div[0];
                                struct_content1 python:struct_selec_div[1];
                                struct_content1 python:'%s %s' %
                                ('<select',struct_content1);
                                struct_selec_div python:['',struct_content0, struct_content1];
                                struct_range python:range(struct_selec_len +1)"
                    tal:repeat="struct_ind python:struct_range[1:]">
                    <div><!-- field has no errors-->
                      <div tal:condition="python:(not field_errors.has_key(field.id))"
                            tal:define="class_final python:'%s%s%s' %
                                        (class_base,'_class_', struct_ind)"
                            tal:content="structure python:struct_selec_div[struct_ind]"
                            tal:attributes="class class_final;
                            title field/title"/>
                            <!-- field has errors -->
                      <div tal:condition="python:field_errors.has_key(field.id)"
                            tal:define="class_final python:'%s%s%s%s' %
                                        (class_base,'_class_', struct_ind, '_error')"
                            tal:content="structure python:struct_selec_div[struct_ind]"
                            tal:attributes="class class_final;
                            title field/title"/>
                    </div>
                  </div>
                </div>
                <div tal:omit-tag=""
                  tal:condition="python:field_errors.has_key(field.id)">
                  <!-- rendering error text -->
                  <div tal:replace="nothing">
                    once all the field have been rendered, just need to add error text
                    if necessary on the rigth side of the page.
                  </div>
                  <div tal:define="class_final python:'%s%s' %
                                    (class_base, '_error_display')"
                        tal:content="python:field_errors[field.id].error_text"
                        i18n:translate=""
                        i18n:domain="ui"
                        tal:attributes="class class_final;
                        title string:${field/title}">
                  </div>
                </div>
              </div>



            </div>
          </div>
        </div>

        <br/>
        <br/>
      </div>
      <div tal:replace="nothing">
          this test is needed to add a content after the last page
          displayed to be sure it is well displayed under Konqueror
          (Mozilla does not have this kind of problem)
      </div>
      <div tal:condition="python:pagenum==(len(groups)-1)"
          tal:attributes="class string:page_end"> 
          <b></b>
      </div>
    </tal:block>
  </tal:block>
</tal:block>
</tal:block>
</tal:block>