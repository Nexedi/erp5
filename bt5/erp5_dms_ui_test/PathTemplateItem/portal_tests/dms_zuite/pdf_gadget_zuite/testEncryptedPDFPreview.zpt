<html xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:metal="http://xml.zope.org/namespaces/metal">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title tal:content="template/title_and_id"></title>
</head>
<body>
<table cellpadding="1" cellspacing="1" border="1">
<thead>
<tr><td rowspan="1" colspan="3" tal:content="template/title_and_id"></td></tr>
</thead><tbody>

<tal:block metal:use-macro="here/Zuite_CommonTemplate/macros/init" />
<tr>
  <td>openAndWait</td>
  <td>${base_url}/document_module/test_ERP5_Logo_Encrypted_PDF</td>
  <td></td>
</tr>
<tr>
  <td>clickAndWait</td>
  <td>link=Preview</td>
  <td></td>
</tr>
<tr>
  <td>waitForElementPresent</td>
  <td>//iframe[contains(@src, "pdfjs.gadget.html")]</td>
  <td></td>
</tr>
<tr>
  <td>selectFrame</td>
  <td>//iframe[contains(@src, "pdfjs.gadget.html")]</td>
  <td></td>
</tr>
<tr>
  <td>waitForText</td>
  <td>//body//div[@class='textLayer']/span[1]</td>
  <td>This is a sample PDF with some text and an image</td>
</tr>
<tr>
  <td>selectFrame</td>
  <td>relative=top</td>
  <td></td>
</tr>

<!--
  This PDF is automatically decrypted because of the ID
  (see portal_skins/erp5_dms_ui_test/PDF_getContentPassword)
  Make a clone, that will not be automatically decrypted (because Id will be different)
  It is still possible for user to enter a password and view.
-->
<tr>
  <td>clickAndWait</td>
  <td>Base_createCloneDocument:method</td>
  <td></td>
</tr>
<tr>
  <td>assertPortalStatusMessage</td>
  <td>Created Clone PDF.</td>
  <td></td>
</tr>
<tr>
  <td>waitForElementPresent</td>
  <td>//iframe[contains(@src, "pdfjs.gadget.html")]</td>
  <td></td>
</tr>
<tr>
  <td>selectFrame</td>
  <td>//iframe[contains(@src, "pdfjs.gadget.html")]</td>
  <td></td>
</tr>
<tr>
  <td>waitForElementPresent</td>
  <td>//dialog[@id="passwordDialog" and @open]</td>
  <td></td>
</tr>
<tr>
  <td>type</td>
  <td>password</td>
  <td>secret</td>
</tr>
<tr>
  <td>click</td>
  <td>passwordSubmit</td>
  <td></td>
</tr>
<tr>
  <td>waitForText</td>
  <td>//body//div[@class='textLayer']/span[1]</td>
  <td>This is a sample PDF with some text and an image</td>
</tr>
<tr>
  <td>selectFrame</td>
  <td>relative=top</td>
  <td></td>
</tr>
<!-- when user enter a wrong password, this does not cause a crash. -->
<tr>
  <td>clickAndWait</td>
  <td>link=Preview</td>
  <td></td>
</tr>
<tr>
  <td>waitForElementPresent</td>
  <td>//iframe[contains(@src, "pdfjs.gadget.html")]</td>
  <td></td>
</tr>
<tr>
  <td>selectFrame</td>
  <td>//iframe[contains(@src, "pdfjs.gadget.html")]</td>
  <td></td>
</tr>
<tr>
  <td>waitForElementPresent</td>
  <td>//dialog[@id="passwordDialog" and @open]</td>
  <td></td>
</tr>
<tr>
  <td>type</td>
  <td>password</td>
  <td>wrong</td>
</tr>
<tr>
  <td>click</td>
  <td>passwordSubmit</td>
  <td></td>
</tr>
<tr>
  <td>waitForText</td>
  <td>css=#passwordText</td>
  <td>Invalid password. Please try again.</td>
</tr>
<tr>
  <td>click</td>
  <td>passwordCancel</td>
  <td></td>
</tr>
<tr>
  <td>waitForElementPresent</td>
  <td>//div[@id="dialogContainer"]/dialog[contains(text(), "Incorrect Password")]</td>
  <td></td>
</tr>
<tr>
  <td>selectFrame</td>
  <td>relative=top</td>
  <td></td>
</tr>
</tbody></table>
</body>
</html>