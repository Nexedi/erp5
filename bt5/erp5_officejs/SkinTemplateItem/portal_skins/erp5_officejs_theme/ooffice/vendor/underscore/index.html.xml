<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts44314741.84</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>index.html</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>text/html</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value>
              <persistent> <string encoding="base64">AAAAAAAAAAI=</string> </persistent>
            </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>95532</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
  <record id="2" aka="AAAAAAAAAAI=">
    <pickle>
      <global name="Pdata" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

<!DOCTYPE HTML>\n
<html>\n
<head>\n
  <meta http-equiv="content-type" content="text/html;charset=UTF-8" />\n
  <meta http-equiv="X-UA-Compatible" content="chrome=1" />\n
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>\n
  <meta name="viewport" content="target-densitydpi=device-dpi" />\n
  <meta name="HandheldFriendly" content="true"/>\n
  <link rel="canonical" href="http://underscorejs.org" />\n
  <link rel="shortcut icon" href="favicon.ico" type="image/x-icon" />\n
  <title>Underscore.js</title>\n
  <style>\n
    body {\n
      font-size: 14px;\n
      line-height: 22px;\n
      background: #f4f4f4 url(docs/images/background.png);\n
      color: #000;\n
      font-family: Helvetica Neue, Helvetica, Arial;\n
    }\n
    .interface {\n
      font-family: "Lucida Grande", "Lucida Sans Unicode", Helvetica, Arial, sans-serif !important;\n
    }\n
    div#sidebar {\n
      background: #fff;\n
      position: fixed;\n
      top: 0; left: 0; bottom: 0;\n
      width: 200px;\n
      overflow-y: auto;\n
      overflow-x: hidden;\n
      -webkit-overflow-scrolling: touch;\n
      padding: 15px 0 30px 30px;\n
      border-right: 1px solid #bbb;\n
      box-shadow: 0 0 20px #ccc; -webkit-box-shadow: 0 0 20px #ccc; -moz-box-shadow: 0 0 20px #ccc;\n
    }\n
    a.toc_title, a.toc_title:visited {\n
      display: block;\n
      color: black;\n
      font-weight: bold;\n
      margin-top: 15px;\n
    }\n
      a.toc_title:hover {\n
        text-decoration: underline;\n
      }\n
      #sidebar .version {\n
        font-size: 10px;\n
        font-weight: normal;\n
      }\n
    ul.toc_section {\n
      font-size: 11px;\n
      line-height: 14px;\n
      margin: 5px 0 0 0;\n
      padding-left: 0px;\n
      list-style-type: none;\n
      font-family: Lucida Grande;\n
    }\n
      .toc_section li {\n
        cursor: pointer;\n
        margin: 0 0 3px 0;\n
      }\n
        .toc_section li a {\n
          text-decoration: none;\n
          color: black;\n
        }\n
          .toc_section li a:hover {\n
            text-decoration: underline;\n
          }\n
    div.container {\n
      width: 550px;\n
      margin: 40px 0 50px 260px;\n
    }\n
    img#logo {\n
      width: 396px;\n
      height: 69px;\n
    }\n
    div.warning {\n
      margin-top: 15px;\n
      font: bold 11px Arial;\n
      color: #770000;\n
    }\n
    p {\n
      margin: 20px 0;\n
      width: 550px;\n
    }\n
    a, a:visited {\n
      color: #444;\n
    }\n
    a:active, a:hover {\n
      color: #000;\n
    }\n
    h1, h2, h3, h4, h5, h6 {\n
      padding-top: 20px;\n
    }\n
      h2 {\n
        font-size: 20px;\n
      }\n
    b.header {\n
      font-size: 16px;\n
      line-height: 30px;\n
    }\n
    span.alias {\n
      font-size: 14px;\n
      font-style: italic;\n
      margin-left: 20px;\n
    }\n
    table, tr, td {\n
      margin: 0; padding: 0;\n
    }\n
      td {\n
        padding: 2px 12px 2px 0;\n
      }\n
      table .rule {\n
        height: 1px;\n
        background: #ccc;\n
        margin: 5px 0;\n
      }\n
    ul {\n
      list-style-type: circle;\n
      padding: 0 0 0 20px;\n
    }\n
      li {\n
        width: 500px;\n
        margin-bottom: 10px;\n
      }\n
      code, pre, tt {\n
        font-family: Monaco, Consolas, "Lucida Console", monospace;\n
        font-size: 12px;\n
        line-height: 18px;\n
        font-style: normal;\n
      }\n
        tt {\n
          padding: 0px 3px;\n
          background: #fff;\n
          border: 1px solid #ddd;\n
          zoom: 1;\n
        }\n
        code {\n
          margin-left: 20px;\n
        }\n
        pre {\n
          font-size: 12px;\n
          padding: 2px 0 2px 15px;\n
          border-left: 5px solid #bbb;\n
          margin: 0px 0 30px;\n
        }\n
    @media only screen and (-webkit-min-device-pixel-ratio: 1.5) and (max-width: 640px),\n
          only screen and (-o-min-device-pixel-ratio: 3/2) and (max-width: 640px),\n
          only screen and (min-device-pixel-ratio: 1.5) and (max-width: 640px) {\n
      img {\n
        max-width: 100%;\n
      }\n
      div#sidebar {\n
        -webkit-overflow-scrolling: initial;\n
        position: relative;\n
        width: 90%;\n
        height: 120px;\n
        left: 0;\n
        top: -7px;\n
        padding: 10px 0 10px 30px;\n
        border: 0;\n
      }\n
      img#logo {\n
        width: auto;\n
        height: auto;\n
      }\n
      div.container {\n
        margin: 0;\n
        width: 100%;\n
      }\n
      p, div.container ul {\n
        max-width: 98%;\n
        overflow-x: scroll;\n
      }\n
      pre {\n
        overflow: scroll;\n
      }\n
    }\n
  </style>\n
</head>\n
<body>\n
\n
  <div id="sidebar" class="interface">\n
\n
    <a class="toc_title" href="#">\n
      Underscore.js <span class="version">(1.5.2)</span>\n
    </a>\n
    <ul class="toc_section">\n
      <li>&raquo; <a href="http://github.com/jashkenas/underscore">GitHub Repository</a></li>\n
      <li>&raquo; <a href="docs/underscore.html">Annotated Source</a></li>\n
    </ul>\n
\n
    <a class="toc_title" href="#">\n
      Introduction\n
    </a>\n
\n
    <a class="toc_title" href="#collections">\n
      Collections\n
    </a>\n
    <ul class="toc_section">\n
      <li>- <a href="#each">each</a></li>\n
      <li>- <a href="#map">map</a></li>\n
      <li>- <a href="#reduce">reduce</a></li>\n
      <li>- <a href="#reduceRight">reduceRight</a></li>\n
      <li>- <a href="#find">find</a></li>\n
      <li>- <a href="#filter">filter</a></li>\n
      <li>- <a href="#where">where</a></li>\n
      <li>- <a href="#findWhere">findWhere</a></li>\n
      <li>- <a href="#reject">reject</a></li>\n
      <li>- <a href="#every">every</a></li>\n
      <li>- <a href="#some">some</a></li>\n
      <li>- <a href="#contains">contains</a></li>\n
      <li>- <a href="#invoke">invoke</a></li>\n
      <li>- <a href="#pluck">pluck</a></li>\n
      <li>- <a href="#max">max</a></li>\n
      <li>- <a href="#min">min</a></li>\n
      <li>- <a href="#sortBy">sortBy</a></li>\n
      <li>- <a href="#groupBy">groupBy</a></li>\n
      <li>- <a href="#indexBy">indexBy</a></li>\n
      <li>- <a href="#countBy">countBy</a></li>\n
      <li>- <a href="#shuffle">shuffle</a></li>\n
      <li>- <a href="#sample">sample</a></li>\n
      <li>- <a href="#toArray">toArray</a></li>\n
      <li>- <a href="#size">size</a></li>\n
    </ul>\n
\n
    <a class="toc_title" href="#arrays">\n
      Arrays\n
    </a>\n
    <ul class="toc_section">\n
      <li>- <a href="#first">first</a></li>\n
      <li>- <a href="#initial">initial</a></li>\n
      <li>- <a href="#last">last</a></li>\n
      <li>- <a href="#rest">rest</a></li>\n
      <li>- <a href="#compact">compact</a></li>\n
      <li>- <a href="#flatten">flatten</a></li>\n
      <li>- <a href="#without">without</a></li>\n
      <li>- <a href="#union">union</a></li>\n
      <li>- <a href="#intersection">intersection</a></li>\n
      <li>- <a href="#difference">difference</a></li>\n
      <li>- <a href="#uniq">uniq</a></li>\n
      <li>- <a href="#zip">zip</a></li>\n
      <li>- <a href="#object">object</a></li>\n
      <li>- <a href="#indexOf">indexOf</a></li>\n
      <li>- <a href="#lastIndexOf">lastIndexOf</a></li>\n
      <li>- <a href="#sortedIndex">sortedIndex</a></li>\n
      <li>- <a href="#range">range</a></li>\n
    </ul>\n
\n
    <a class="toc_title" href="#functions">\n
      Functions\n
    </a>\n
    <ul class="toc_section">\n
      <li>- <a href="#bind">bind</a></li>\n
      <li>- <a href="#bindAll">bindAll</a></li>\n
      <li>- <a href="#partial">partial</a></li>\n
      <li>- <a href="#memoize">memoize</a></li>\n
      <li>- <a href="#delay">delay</a></li>\n
      <li>- <a href="#defer">defer</a></li>\n
      <li>- <a href="#throttle">throttle</a></li>\n
      <li>- <a href="#debounce">debounce</a></li>\n
      <li>- <a href="#once">once</a></li>\n
      <li>- <a href="#after">after</a></li>\n
      <li>- <a href="#wrap">wrap</a></li>\n
      <li>- <a href="#compose">compose</a></li>\n
    </ul>\n
\n
    <a class="toc_title" href="#objects">\n
      Objects\n
    </a>\n
    <ul class="toc_section">\n
      <li>- <a href="#keys">keys</a></li>\n
      <li>- <a href="#values">values</a></li>\n
      <li>- <a href="#pairs">pairs</a></li>\n
      <li>- <a href="#invert">invert</a></li>\n
      <li>- <a href="#object-functions">functions</a></li>\n
      <li>- <a href="#extend">extend</a></li>\n
      <li>- <a href="#pick">pick</a></li>\n
      <li>- <a href="#omit">omit</a></li>\n
      <li>- <a href="#defaults">defaults</a></li>\n
      <li>- <a href="#clone">clone</a></li>\n
      <li>- <a href="#tap">tap</a></li>\n
      <li>- <a href="#has">has</a></li>\n
      <li>- <a href="#isEqual">isEqual</a></li>\n
      <li>- <a href="#isEmpty">isEmpty</a></li>\n
      <li>- <a href="#isElement">isElement</a></li>\n
      <li>- <a href="#isArray">isArray</a></li>\n
      <li>- <a href="#isObject">isObject</a></li>\n
      <li>- <a href="#isArguments">isArguments</a></li>\n
      <li>- <a href="#isFunction">isFunction</a></li>\n
      <li>- <a href="#isString">isString</a></li>\n
      <li>- <a href="#isNumber">isNumber</a></li>\n
      <li>- <a href="#isFinite">isFinite</a></li>\n
      <li>- <a href="#isBoolean">isBoolean</a></li>\n
      <li>- <a href="#isDate">isDate</a></li>\n
      <li>- <a href="#isRegExp">isRegExp</a></li>\n
      <li>- <a href="#isNaN">isNaN</a></li>\n
      <li>- <a href="#isNull">isNull</a></li>\n
      <li>- <a href="#isUndefined">isUndefined</a></li>\n
    </ul>\n
\n
    <a class="toc_title" href="#utility">\n
      Utility\n
    </a>\n
    <ul class="toc_section">\n
      <li>- <a href="#noConflict">noConflict</a></li>\n
      <li>- <a href="#identity">identity</a></li>\n
      <li>- <a href="#times">times</a></li>\n
      <li>- <a href="#random">random</a></li>\n
      <li>- <a href="#mixin">mixin</a></li>\n
      <li>- <a href="#uniqueId">uniqueId</a></li>\n
      <li>- <a href="#escape">escape</a></li>\n
      <li>- <a href="#unescape">unescape</a></li>\n
      <li>- <a href="#result">result</a></li>\n
      <li>- <a href="#template">template</a></li>\n
    </ul>\n
\n
    <a class="toc_title" href="#chaining">\n
      Chaining\n
    </a>\n
    <ul class="toc_section">\n
      <li>- <a href="#chain">chain</a></li>\n
      <li>- <a href="#value">value</a></li>\n
    </ul>\n
\n
    <a class="toc_title" href="#links">\n
      Links\n
    </a>\n
\n
    <a class="toc_title" href="#changelog">\n
      Change Log\n
    </a>\n
\n
  </div>\n
\n
  <div class="container">\n
\n
    <p id="introduction">\n
      <img id="logo" src="docs/images/underscore.png" alt="Underscore.js" />\n
    </p>\n
\n
    <p>\n
      <a href="http://github.com/jashkenas/underscore/">Underscore</a> is a\n
      utility-belt library for JavaScript that provides a lot of the\n
      functional programming support that you would expect in\n
      <a href="http://prototypejs.org/doc/latest/">Prototype.js</a>\n
      (or <a href="http://www.ruby-doc.org/core/classes/Enumerable.html">Ruby</a>),\n
      but without extending any of the built-in JavaScript objects. It\'s the\n
      tie to go along with <a href="http://jquery.com">jQuery</a>\'s tux,\n
      and <a href="http://backbonejs.org">Backbone.js</a>\'s suspenders.\n
    </p>\n
\n
    <p>\n
      Underscore provides 80-odd functions that support both the usual\n
      functional suspects: <b>map</b>, <b>select</b>, <b>invoke</b> &mdash;\n
      as well as more specialized helpers: function binding, javascript\n
      templating, deep equality testing, and so on. It delegates to built-in\n
      functions, if present, so modern browsers will use the\n
      native implementations of <b>forEach</b>, <b>map</b>, <b>reduce</b>,\n
      <b>filter</b>, <b>every</b>, <b>some</b> and <b>indexOf</b>.\n
    </p>\n
\n
    <p>\n
      A complete <a href="test/">Test &amp; Benchmark Suite</a>\n
      is included for your perusal.\n
    </p>\n
\n
    <p>\n
      You may also read through the <a href="docs/underscore.html">annotated source code</a>.\n
    </p>\n
\n
    <p>\n
      The project is\n
      <a href="http://github.com/jashkenas/underscore/">hosted on GitHub</a>.\n
      You can report bugs and discuss features on the\n
      <a href="http://github.com/jashkenas/underscore/issues">issues page</a>,\n
      on Freenode in the <tt>#documentcloud</tt> channel,\n
      or send tweets to <a href="http://twitter.com/documentcloud">@documentcloud</a>.\n
    </p>\n
\n
    <p>\n
      <i>Underscore is an open-source component of <a href="http://documentcloud.org/">DocumentCloud</a>.</i>\n
    </p>\n
\n
    <h2>Downloads <i style="padding-left: 12px; font-size:12px;">(Right-click, and use "Save As")</i></h2>\n
\n
    <table>\n
      <tr>\n
        <td><a href="underscore.js">Development Version (1.5.2)</a></td>\n
        <td><i>43kb, Uncompressed with Plentiful Comments</i></td>\n
      </tr>\n
      <tr>\n
        <td><a href="underscore-min.js">Production Version (1.5.2)</a></td>\n
        <td>\n
          <i>4.9kb, Minified and Gzipped</i>\n
          &nbsp;<small>(<a href="underscore-min.map">Source Map</a>)</small>\n
        </td>\n
      </tr>\n
      <tr>\n
        <td colspan="2"><div class="rule"></div></td>\n
      </tr>\n
      <tr>\n
        <td><a href="https://raw.github.com/jashkenas/underscore/master/underscore.js">Edge Version</a></td>\n
        <td><i>Unreleased, current <tt>master</tt>, use at your own risk</i></td>\n
      </tr>\n
    </table>\n
\n
    <div id="documentation">\n
\n
      <h2 id="collections">Collection Functions (Arrays or Objects)</h2>\n
\n
      <p id="each">\n
        <b class="header">each</b><code>_.each(list, iterator, [context])</code>\n
        <span class="alias">Alias: <b>forEach</b></span>\n
        <br />\n
        Iterates over a <b>list</b> of elements, yielding each in turn to an <b>iterator</b>\n
        function. The <b>iterator</b> is bound to the <b>context</b> object, if one is\n
        passed. Each invocation of <b>iterator</b> is called with three arguments:\n
        <tt>(element, index, list)</tt>. If <b>list</b> is a JavaScript object, <b>iterator</b>\'s\n
        arguments will be <tt>(value, key, list)</tt>. Delegates to the native\n
        <b>forEach</b> function if it exists.\n
      </p>\n
      <pre>\n
_.each([1, 2, 3], alert);\n
=&gt; alerts each number in turn...\n
_.each({one: 1, two: 2, three: 3}, alert);\n
=&gt; alerts each number value in turn...</pre>\n
\n
      <p>\n
        <i>\n
          Note: Collection functions work on arrays, objects, and\n
          array-like objects such as</i> <tt>arguments</tt>, <tt>NodeList</tt><i>\n
          and similar. But it works by duck-typing, so avoid passing objects with\n
          a numeric <tt>length</tt> property.\n
        </i>\n
      </p>\n
\n
      <p id="map">\n
        <b class="header">map</b><code>_.map(list, iterator, [context])</code>\n
        <span class="alias">Alias: <b>collect</b></span>\n
        <br />\n
        Produces a new array of values by mapping each value in <b>list</b>\n
        through a transformation function (<b>iterator</b>). If the native <b>map</b> method\n
        exists, it will be used instead. If <b>list</b> is a JavaScript object,\n
        <b>iterator</b>\'s arguments will be <tt>(value, key, list)</tt>.\n
      </p>\n
      <pre>\n
_.map([1, 2, 3], function(num){ return num * 3; });\n
=&gt; [3, 6, 9]\n
_.map({one: 1, two: 2, three: 3}, function(num, key){ return num * 3; });\n
=&gt; [3, 6, 9]</pre>\n
\n
      <p id="reduce">\n
        <b class="header">reduce</b><code>_.reduce(list, iterator, memo, [context])</code>\n
        <span class="alias">Aliases: <b>inject, foldl</b></span>\n
        <br />\n
        Also known as <b>inject</b> and <b>foldl</b>, <b>reduce</b> boils down a\n
        <b>list</b> of values into a single value. <b>Memo</b> is the initial state\n
        of the reduction, and each successive step of it should be returned by\n
        <b>iterator</b>. The iterator is passed four arguments: the <tt>memo</tt>,\n
        then the <tt>value</tt> and <tt>index</tt> (or key) of the iteration,\n
        and finally a reference to the entire <tt>list</tt>.\n
      </p>\n
      <pre>\n
var sum = _.reduce([1, 2, 3], function(memo, num){ return memo + num; }, 0);\n
=&gt; 6\n
</pre>\n
\n
      <p id="reduceRight">\n
        <b class="header">reduceRight</b><code>_.reduceRight(list, iterator, memo, [context])</code>\n
        <span class="alias">Alias: <b>foldr</b></span>\n
        <br />\n
        The right-associative version of <b>reduce</b>. Delegates to the\n
        JavaScript 1.8 version of <b>reduceRight</b>, if it exists. <b>Foldr</b>\n
        is not as useful in JavaScript as it would be in a language with lazy\n
        evaluation.\n
      </p>\n
      <pre>\n
var list = [[0, 1], [2, 3], [4, 5]];\n
var flat = _.reduceRight(list, function(a, b) { return a.concat(b); }, []);\n
=&gt; [4, 5, 2, 3, 0, 1]\n
</pre>\n
\n
      <p id="find">\n
        <b class="header">find</b><code>_.find(list, iterator, [context])</code>\n
        <span class="alias">Alias: <b>detect</b></span>\n
        <br />\n
        Looks through each value in the <b>list</b>, returning the first one that\n
        passes a truth test (<b>iterator</b>), or <code>undefined</code> if no value\n
        passes the test. The function returns as\n
        soon as it finds an acceptable element, and doesn\'t traverse the\n
        entire list.\n
      </p>\n
      <pre>\n
var even = _.find([1, 2, 3, 4, 5, 6], function(num){ return num % 2 == 0; });\n
=&gt; 2\n
</pre>\n
\n
      <p id="filter">\n
        <b class="header">filter</b><code>_.filter(list, iterator, [context])</code>\n
        <span class="alias">Alias: <b>select</b></span>\n
        <br />\n
        Looks through each value in the <b>list</b>, returning an array of all\n
        the values that pass a truth test (<b>iterator</b>). Delegates to the\n
        native <b>filter</b> method, if it exists.\n
      </p>\n
      <pre>\n
var evens = _.filter([1, 2, 3, 4, 5, 6], function(num){ return num % 2 == 0; });\n
=&gt; [2, 4, 6]\n
</pre>\n
\n
      <p id="where">\n
        <b class="header">where</b><code>_.where(list, properties)</code>\n
        <br />\n
        Looks through each value in the <b>list</b>, returning an array of all\n
        the values that contain all of the key-value pairs listed in <b>properties</b>.\n
      </p>\n
      <pre>\n
_.where(listOfPlays, {author: "Shakespeare", year: 1611});\n
=&gt; [{title: "Cymbeline", author: "Shakespeare", year: 1611},\n
    {title: "The Tempest", author: "Shakespeare", year: 1611}]\n
</pre>\n
\n
      <p id="findWhere">\n
        <b class="header">findWhere</b><code>_.findWhere(list, properties)</code>\n
        <br />\n
        Looks through the <b>list</b> and returns the <i>first</i> value that matches\n
        all of the key-value pairs listed in <b>properties</b>.\n
      </p>\n
      <p>\n
        If no match is found, or if <b>list</b> is empty, <i>undefined</i> will be\n
        returned.\n
      </p>\n
      <pre>\n
_.findWhere(publicServicePulitzers, {newsroom: "The New York Times"});\n
=&gt; {year: 1918, newsroom: "The New York Times",\n
  reason: "For its public service in publishing in full so many official reports,\n
  documents and speeches by European statesmen relating to the progress and\n
  conduct of the war."}\n
</pre>\n
\n
      <p id="reject">\n
        <b class="header">reject</b><code>_.reject(list, iterator, [context])</code>\n
        <br />\n
        Returns the values in <b>list</b> without the elements that the truth\n
        test (<b>iterator</b>) passes. The opposite of <b>filter</b>.\n
      </p>\n
      <pre>\n
var odds = _.reject([1, 2, 3, 4, 5, 6], function(num){ return num % 2 == 0; });\n
=&gt; [1, 3, 5]\n
</pre>\n
\n
      <p id="every">\n
        <b class="header">every</b><code>_.every(list, [iterator], [context])</code>\n
        <span class="alias">Alias: <b>all</b></span>\n
        <br />\n
        Returns <i>true</i> if all of the values in the <b>list</b> pass the <b>iterator</b>\n
        truth test. Delegates to the native method <b>every</b>, if present.\n
      </p>\n
      <pre>\n
_.every([true, 1, null, \'yes\'], _.identity);\n
=&gt; false\n
</pre>\n
\n
      <p id="some">\n
        <b class="header">some</b><code>_.some(list, [iterator], [context])</code>\n
        <span class="alias">Alias: <b>any</b></span>\n
        <br />\n
        Returns <i>true</i> if any of the values in the <b>list</b> pass the\n
        <b>iterator</b> truth test. Short-circuits and stops traversing the list\n
        if a true element is found. Delegates to the native method <b>some</b>,\n
        if present.\n
      </p>\n
      <pre>\n
_.some([null, 0, \'yes\', false]);\n
=&gt; true\n
</pre>\n
\n
      <p id="contains">\n
        <b class="header">contains</b><code>_.contains(list, value)</code>\n
        <span class="alias">Alias: <b>include</b></span>\n
        <br />\n
        Returns <i>true</i> if the <b>value</b> is present in the <b>list</b>.\n
        Uses <b>indexOf</b> internally, if <b>list</b> is an Array.\n
      </p>\n
      <pre>\n
_.contains([1, 2, 3], 3);\n
=&gt; true\n
</pre>\n
\n
      <p id="invoke">\n
        <b class="header">invoke</b><code>_.invoke(list, methodName, [*arguments])</code>\n
        <br />\n
        Calls the method named by <b>methodName</b> on each value in the <b>list</b>.\n
        Any extra arguments passed to <b>invoke</b> will be forwarded on to the\n
        method invocation.\n
      </p>\n
      <pre>\n
_.invoke([[5, 1, 7], [3, 2, 1]], \'sort\');\n
=&gt; [[1, 5, 7], [1, 2, 3]]\n
</pre>\n
\n
      <p id="pluck">\n
        <b class="header">pluck</b><code>_.pluck(list, propertyName)</code>\n
        <br />\n
        A convenient version of what is perhaps the most common use-case for\n
        <b>map</b>: extracting a list of property values.\n
      </p>\n
      <pre>\n
var stooges = [{name: \'moe\', age: 40}, {name: \'larry\', age: 50}, {name: \'curly\', age: 60}];\n
_.pluck(stooges, \'name\');\n
=&gt; ["moe", "larry", "curly"]\n
</pre>\n
\n
      <p id="max">\n
        <b class="header">max</b><code>_.max(list, [iterator], [context])</code>\n
        <br />\n
        Returns the maximum value in <b>list</b>. If an <b>iterator</b>\n
        function is provided, it will be used on each value to generate the\n
        criterion by which the value is ranked.\n
      </p>\n
      <pre>\n
var stooges = [{name: \'moe\', age: 40}, {name: \'larry\', age: 50}, {name: \'curly\', age: 60}];\n
_.max(stooges, function(stooge){ return stooge.age; });\n
=&gt; {name: \'curly\', age: 60};\n
</pre>\n
\n
      <p id="min">\n
        <b class="header">min</b><code>_.min(list, [iterator], [context])</code>\n
        <br />\n
        Returns the minimum value in <b>list</b>. If an <b>iterator</b>\n
        function is provided, it will be used on each value to generate the\n
        criterion by which the value is ranked.\n
      </p>\n
      <pre>\n
var numbers = [10, 5, 100, 2, 1000];\n
_.min(numbers);\n
=&gt; 2\n
</pre>\n
\n
      <p id="sortBy">\n
        <b class="header">sortBy</b><code>_.sortBy(list, iterator, [context])</code>\n
        <br />\n
        Returns a (stably) sorted copy of <b>list</b>, ranked in ascending\n
        order by the results of running each value through <b>iterator</b>.\n
        Iterator may also be the string name of the property to sort by (eg.\n
        <tt>length</tt>).\n
      </p>\n
      <pre>\n
_.sortBy([1, 2, 3, 4, 5, 6], function(num){ return Math.sin(num); });\n
=&gt; [5, 4, 6, 3, 1, 2]\n
</pre>\n
\n
      <p id="groupBy">\n
        <b class="header">groupBy</b><code>_.groupBy(list, iterator, [context])</code>\n
        <br />\n
        Splits a collection into sets, grouped by the result of running each\n
        value through <b>iterator</b>. If <b>iterator</b> is a string instead of\n
        a function, groups by the property named by <b>iterator</b> on each of\n
        the values.\n
      </p>\n
      <pre>\n
_.groupBy([1.3, 2.1, 2.4], function(num){ return Math.floor(num); });\n
=&gt; {1: [1.3], 2: [2.1, 2.4]}\n
\n
_.groupBy([\'one\', \'two\', \'three\'], \'length\');\n
=&gt; {3: ["one", "two"], 5: ["three"]}\n
</pre>\n
\n
      <p id="indexBy">\n
        <b class="header">indexBy</b><code>_.indexBy(list, iterator, [context])</code>\n
        <br />\n
        Given a <b>list</b>, and an <b>iterator</b> function that returns a \n
        key for each element in the list (or a property name), \n
        returns an object with an index of each item. \n
        Just like <a href="#groupBy">groupBy</a>, but for when you know your \n
        keys are unique.\n
      </p>\n
      <pre>\n
var stooges = [{name: \'moe\', age: 40}, {name: \'larry\', age: 50}, {name: \'curly\', age: 60}];\n
_.indexBy(stooges, \'age\');\n
=&gt; {\n
  "40": {name: \'moe\', age: 40},\n
  "50": {name: \'larry\', age: 50},\n
  "60": {name: \'curly\', age: 60}\n
}\n
</pre>\n
\n
      <p id="countBy">\n
        <b class="header">countBy</b><code>_.countBy(list, iterator, [context])</code>\n
        <br />\n
        Sorts a list into groups and returns a count for the number of objects\n
        in each group.\n
        Similar to <tt>groupBy</tt>, but instead of returning a list of values,\n
        returns a count for the number of values in that group.\n
      </p>\n
      <pre>\n
_.countBy([1, 2, 3, 4, 5], function(num) {\n
  return num % 2 == 0 ? \'even\': \'odd\';\n
});\n
=&gt; {odd: 3, even: 2}\n
</pre>\n
\n
      <p id="shuffle">\n
        <b class="header">shuffle</b><code>_.shuffle(list)</code>\n
        <br />\n
        Returns a shuffled copy of the <b>list</b>, using a version of the\n
        <a href="http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle">Fisher-Yates shuffle</a>.\n
      </p>\n
      <pre>\n
_.shuffle([1, 2, 3, 4, 5, 6]);\n
=&gt; [4, 1, 6, 3, 5, 2]\n
</pre>\n
\n
      <p id="sample">\n
        <b class="header">sample</b><code>_.sample(list, [n])</code>\n
        <br />\n
        Produce a random sample from the <b>list</b>. Pass a number to\n
        return <b>n</b> random elements from the list. Otherwise a single random\n
        item will be returned.\n
      </p>\n
      <pre>\n
_.sample([1, 2, 3, 4, 5, 6]);\n
=&gt; 4\n
\n
_.sample([1, 2, 3, 4, 5, 6], 3);\n
=&gt; [1, 6, 2]\n
</pre>\n
\n
      <p id="toArray">\n
        <b class="header">toArray</b><code>_.toArray(list)</code>\n
        <br />\n
        Creates a real Array from the <b>list</b> (anything that can be\n
        iterated over).  Useful for transmuting the <b>arguments</b> object.\n
      </p>\n
      <pre>\n
(function(){ return _.toArray(arguments).slice(1); })(1, 2, 3, 4);\n
=&gt; [2, 3, 4]\n
</pre>\n
\n
      <p id="size">\n
        <b class="header">size</b><code>_.size(list)</code>\n
        <br />\n
        Return the number of values in the <b>list</b>.\n
      </p>\n
      <pre>\n
_.size({one: 1, two: 2, three: 3});\n
=&gt; 3\n
</pre>\n
\n
      <h2 id="arrays">Array Functions</h2>\n
\n
      <p>\n
        <i>\n
          Note: All array functions will also work on the <b>arguments</b> object.\n
          However, Underscore functions are not designed to work on "sparse" arrays.\n
        </i>\n
      </p>\n
\n
      <p id="first">\n
        <b class="header">first</b><code>_.first(array, [n])</code>\n
        <span class="alias">Alias: <b>head</b>, <b>take</b></span>\n
        <br />\n
        Returns the first element of an <b>array</b>. Passing <b>n</b> will\n
        return the first <b>n</b> elements of the array.\n
      </p>\n
      <pre>\n
_.first([5, 4, 3, 2, 1]);\n
=&gt; 5\n
</pre>\n
\n
      <p id="initial">\n
        <b class="header">initial</b><code>_.initial(array, [n])</code>\n
        <br />\n
        Returns everything but the last entry of the array. Especially useful on\n
        the arguments object. Pass <b>n</b> to exclude the last <b>n</b> elements\n
        from the result.\n
      </p>\n
      <pre>\n
_.initial([5, 4, 3, 2, 1]);\n
=&gt; [5, 4, 3, 2]\n
</pre>\n
\n
      <p id="last">\n
        <b class="header">last</b><code>_.last(array, [n])</code>\n
        <br />\n
        Returns the last element of an <b>array</b>. Passing <b>n</b> will return\n
        the last <b>n</b> elements of the array.\n
      </p>\n
      <pre>\n
_.last([5, 4, 3, 2, 1]);\n
=&gt; 1\n
</pre>\n
\n
      <p id="rest">\n
        <b class="header">rest</b><code>_.rest(array, [index])</code>\n
        <span class="alias">Alias: <b>tail, drop</b></span>\n
        <br />\n
        Returns the <b>rest</b> of the elements in an array. Pass an <b>index</b>\n
        to return the values of the array from that index onward.\n
      </p>\n
      <pre>\n
_.rest([5, 4, 3, 2, 1]);\n
=&gt; [4, 3, 2, 1]\n
</pre>\n
\n
      <p id="compact">\n
        <b class="header">compact</b><code>_.compact(array)</code>\n
        <br />\n
        Returns a copy of the <b>array</b> with all falsy values removed.\n
        In JavaScript, <i>false</i>, <i>null</i>, <i>0</i>, <i>""</i>,\n
        <i>undefined</i> and <i>NaN</i> are all falsy.\n
      </p>\n
      <pre>\n
_.compact([0, 1, false, 2, \'\', 3]);\n
=&gt; [1, 2, 3]\n
</pre>\n
\n
      <p id="flatten">\n
        <b class="header">flatten</b><code>_.flatten(array, [shallow])</code>\n
        <br />\n
        Flattens a nested <b>array</b> (the nesting can be to any depth). If you\n
        pass <b>shallow</b>, the array will only be flattened a single level.\n
      </p>\n
      <pre>\n
_.flatten([1, [2], [3, [[4]]]]);\n
=&gt; [1, 2, 3, 4];\n
\n
_.flatten([1, [2], [3, [[4]]]], true);\n
=&gt; [1, 2, 3, [[4]]];\n
</pre>\n
\n
      <p id="without">\n
        <b class="header">without</b><code>_.without(array, [*values])</code>\n
        <br />\n
        Returns a copy of the <b>array</b> with all instances of the <b>values</b>\n
        removed.\n
      </p>\n
      <pre>\n
_.without([1, 2, 1, 0, 3, 1, 4], 0, 1);\n
=&gt; [2, 3, 4]\n
</pre>\n
\n
      <p id="union">\n
        <b class="header">union</b><code>_.union(*arrays)</code>\n
        <br />\n
        Computes the union of the passed-in <b>arrays</b>: the list of unique items,\n
        in order, that are present in one or more of the <b>arrays</b>.\n
      </p>\n
      <pre>\n
_.union([1, 2, 3], [101, 2, 1, 10], [2, 1]);\n
=&gt; [1, 2, 3, 101, 10]\n
</pre>\n
\n
      <p id="intersection">\n
        <b class="header">intersection</b><code>_.intersection(*arrays)</code>\n
        <br />\n
        Computes the list of values that are the intersection of all the <b>arrays</b>.\n
        Each value in the result is present in each of the <b>arrays</b>.\n
      </p>\n
      <pre>\n
_.intersection([1, 2, 3], [101, 2, 1, 10], [2, 1]);\n
=&gt; [1, 2]\n
</pre>\n
\n
      <p id="difference">\n
        <b class="header">difference</b><code>_.difference(array, *others)</code>\n
        <br />\n
        Similar to <b>without</b>, but returns the values from <b>array</b> that\n
        are not present in the <b>other</b> arrays.\n
      </p>\n
      <pre>\n
_.difference([1, 2, 3, 4, 5], [5, 2, 10]);\n
=&gt; [1, 3, 4]\n
</pre>\n
\n
      <p id="uniq">\n
        <b class="header">uniq</b><code>_.uniq(array, [isSorted], [iterator])</code>\n
        <span class="alias">Alias: <b>unique</b></span>\n
        <br />\n
        Produces a duplicate-free version of the <b>array</b>, using <i>===</i> to test\n
        object equality. If you know in advance that the <b>array</b> is sorted,\n
        passing <i>true</i> for <b>isSorted</b> will run a much faster algorithm.\n
        If you want to compute unique items based on a transformation, pass an\n
        <b>iterator</b> function.\n
      </p>\n
      <pre>\n
_.uniq([1, 2, 1, 3, 1, 4]);\n
=&gt; [1, 2, 3, 4]\n
</pre>\n
\n
      <p id="zip">\n
        <b class="header">zip</b><code>_.zip(*arrays)</code>\n
        <br />\n
        Merges together the values of each of the <b>arrays</b> with the\n
        values at the corresponding position. Useful when you have separate\n
        data sources that are coordinated through matching array indexes.\n
        If you\'re working with a matrix of nested arrays, <tt>_.zip.apply</tt>\n
        can transpose the matrix in a similar fashion.\n
      </p>\n
      <pre>\n
_.zip([\'moe\', \'larry\', \'curly\'], [30, 40, 50], [true, false, false]);\n
=&gt; [["moe", 30, true], ["larry", 40, false], ["curly", 50, false]]\n
\n
_.zip.apply(_, arrayOfRowsOfData);\n
=&gt; arrayOfColumnsOfData\n
</pre>\n
\n
      <p id="object">\n
        <b class="header">object</b><code>_.object(list, [values])</code>\n
        <br />\n
        Converts arrays into objects. Pass either a single list of\n
        <tt>[key, value]</tt> pairs, or a list of keys, and a list of values.\n
        If duplicate keys exist, the last value wins.\n
      </p>\n
      <pre>\n
_.object([\'moe\', \'larry\', \'curly\'], [30, 40, 50]);\n
=&gt; {moe: 30, larry: 40, curly: 50}\n
\n
_.object([[\'moe\', 30], [\'larry\', 40], [\'curly\', 50]]);\n
=&gt; {moe: 30, larry: 40, curly: 50}\n
</pre>\n
\n
      <p id="indexOf">\n
        <b class="header">indexOf</b><code>_.indexOf(array, value, [isSorted])</code>\n
        <br />\n
        Returns the index at which <b>value</b> can be found in the <b>array</b>,\n
        or <i>-1</i> if value is not present in the <b>array</b>. Uses the native\n
        <b>indexOf</b> function unless it\'s missing. If you\'re working with a\n
        large array, and you know that the array is already sorted, pass <tt>true</tt>\n
        for <b>isSorted</b> to use a faster binary search ... or, pass a number as\n
        the third argument in order to look for the first matching value in the\n
        array after the given index.\n
      </p>\n
      <pre>\n
_.indexOf([1, 2, 3], 2);\n
=&gt; 1\n
</pre>\n
\n
      <p id="lastIndexOf">\n
        <b class="header">lastIndexOf</b><code>_.lastIndexOf(array, value, [fromIndex])</code>\n
        <br />\n
        Returns the index of the last occurrence of <b>value</b> in the <b>array</b>,\n
        or <i>-1</i> if value is not present. Uses the native <b>lastIndexOf</b>\n
        function if possible. Pass <b>fromIndex</b> to start your search at a\n
        given index.\n
      </p>\n
      <pre>\n
_.lastIndexOf([1, 2, 3, 1, 2, 3], 2);\n
=&gt; 4\n
</pre>\n
\n
      <p id="sortedIndex">\n
        <b class="header">sortedIndex</b><code>_.sortedIndex(list, value, [iterator], [context])</code>\n
        <br />\n
        Uses a binary search to determine the index at which the <b>value</b>\n
        <i>should</i> be inserted into the <b>list</b> in order to maintain the <b>list</b>\'s\n
        sorted order. If an <b>iterator</b> function is provided, it will be used to compute\n
        the sort ranking of each value, including the <b>value</b> you pass.\n
        Iterator may also be the string name of the property to sort by (eg. <tt>length</tt>).\n
      </p>\n
      <pre>\n
_.sortedIndex([10, 20, 30, 40, 50], 35);\n
=&gt; 3\n
\n
var stooges = [{name: \'moe\', age: 40}, {name: \'curly\', age: 60}];\n
_.sortedIndex(stooges, {name: \'larry\', age: 50}, \'age\');\n
=&gt; 1\n
</pre>\n
\n
      <p id="range">\n
        <b class="header">range</b><code>_.range([start], stop, [step])</code>\n
        <br />\n
        A function to create flexibly-numbered lists of integers, handy for\n
        <tt>each</tt> and <tt>map</tt> loops. <b>start</b>, if omitted, defaults\n
        to <i>0</i>; <b>step</b> defaults to <i>1</i>. Returns a list of integers\n
        from <b>start</b> to <b>stop</b>, incremented (or decremented) by <b>step</b>,\n
        exclusive. Note that ranges that <b>stop</b> before they <b>start</b> \n
        are considered to be zero-length instead of negative — if you\'d like a \n
        negative range, use a negative <b>step</b>.\n
      </p>\n
      <pre>\n
_.range(10);\n
=&gt; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n
_.range(1, 11);\n
=&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n
_.range(0, 30, 5);\n
=&gt; [0, 5, 10, 15, 20, 25]\n
_.range(0, -10, -1);\n
=&gt; [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]\n
_.range(0);\n
=&gt; []\n
</pre>\n
\n
      <h2 id="functions">Function (uh, ahem) Functions</h2>\n
\n
      <p id="bind">\n
        <b class="header">bind</b><code>_.bind(function, object, [*arguments])</code>\n
        <br />\n
        Bind a <b>function</b> to an <b>object</b>, meaning that whenever\n
        the function is called, the value of <i>this</i> will be the <b>object</b>.\n
        Optionally, pass <b>arguments</b> to the <b>function</b> to pre-fill them,\n
        also known as <b>partial application</b>.\n
      </p>\n
      <pre>\n
var func = function(greeting){ return greeting + \': \' + this.name };\n
func = _.bind(func, {name: \'moe\'}, \'hi\');\n
func();\n
=&gt; \'hi: moe\'\n
</pre>\n
\n
      <p id="bindAll">\n
        <b class="header">bindAll</b><code>_.bindAll(object, *methodNames)</code>\n
        <br />\n
        Binds a number of methods on the <b>object</b>, specified by\n
        <b>methodNames</b>, to be run in the context of that object whenever they\n
        are invoked. Very handy for binding functions that are going to be used\n
        as event handlers, which would otherwise be invoked with a fairly useless\n
        <i>this</i>. <b>methodNames</b> are required.\n
      </p>\n
      <pre>\n
var buttonView = {\n
  label  : \'underscore\',\n
  onClick: function(){ alert(\'clicked: \' + this.label); },\n
  onHover: function(){ console.log(\'hovering: \' + this.label); }\n
};\n
_.bindAll(buttonView, \'onClick\', \'onHover\');\n
// When the button is clicked, this.label will have the correct value.\n
jQuery(\'#underscore_button\').bind(\'click\', buttonView.onClick);\n
</pre>\n
\n
      <p id="partial">\n
        <b class="header">partial</b><code>_.partial(function, [*arguments])</code>\n
        <br />\n
        Partially apply a function by filling in any number of its arguments,\n
        <i>without</i> changing its dynamic <tt>this</tt> value. A close cousin\n
        of <a href="#bind">bind</a>.\n
      </p>\n
      <pre>\n
var add = function(a, b) { return a + b; };\n
add5 = _.partial(add, 5);\n
add5(10);\n
=&gt; 15\n
</pre>\n
\n
      <p id="memoize">\n
        <b class="header">memoize</b><code>_.memoize(function, [hashFunction])</code>\n
        <br />\n
        Memoizes a given <b>function</b> by caching the computed result. Useful\n
        for speeding up slow-running computations. If passed an optional\n
        <b>hashFunction</b>, it will be used to compute the hash key for storing\n
        the result, based on the arguments to the original function. The default\n
        <b>hashFunction</b> just uses the first argument to the memoized function\n
        as the key.\n
      </p>\n
      <pre>\n
var fibonacci = _.memoize(function(n) {\n
  return n &lt; 2 ? n: fibonacci(n - 1) + fibonacci(n - 2);\n
});\n
</pre>\n
\n
      <p id="delay">\n
        <b class="header">delay</b><code>_.delay(function, wait, [*arguments])</code>\n
        <br />\n
        Much like <b>setTimeout</b>, invokes <b>function</b> after <b>wait</b>\n
        milliseconds. If you pass the optional <b>arguments</b>, they will be\n
        forwarded on to the <b>function</b> when it is invoked.\n
      </p>\n
      <pre>\n
var log = _.bind(console.log, console);\n
_.delay(log, 1000, \'logged later\');\n
=&gt; \'logged later\' // Appears after one second.\n
</pre>\n
\n
      <p id="defer">\n
        <b class="header">defer</b><code>_.defer(function, [*arguments])</code>\n
        <br />\n
        Defers invoking the <b>function</b> until the current call stack has cleared,\n
        similar to using <b>setTimeout</b> with a delay of 0. Useful for performing\n
        expensive computations or HTML rendering in chunks without blocking the UI thread\n
        from updating. If you pass the optional <b>arguments</b>, they will be\n
        forwarded on to the <b>function</b> when it is invoked.\n
      </p>\n
      <pre>\n
_.defer(function(){ alert(\'deferred\'); });\n
// Returns from the function before the alert runs.\n
</pre>\n
\n
      <p id="throttle">\n
        <b class="header">throttle</b><code>_.throttle(function, wait, [options])</code>\n
        <br />\n
        Creates and returns a new, throttled version of the passed function,\n
        that, when invoked repeatedly, will only actually call the original function\n
        at most once per every <b>wait</b>\n
        milliseconds. Useful for rate-limiting events that occur faster than you\n
        can keep up with.\n
      </p>\n
      <p>\n
        By default, <b>throttle</b> will execute the function as soon as you call it\n
        for the first time, and, if you call it again any number of times\n
        during the <b>wait</b> period, as soon as that period is over.\n
        If you\'d like to disable the leading-edge\n
        call, pass <tt>{leading: false}</tt>, and if you\'d like to disable the\n
        execution on the trailing-edge, pass <br /> <tt>{trailing: false}</tt>.\n
      </p>\n
      <pre>\n
var throttled = _.throttle(updatePosition, 100);\n
$(window).scroll(throttled);\n
</pre>\n
\n
      <p id="debounce">\n
        <b class="header">debounce</b><code>_.debounce(function, wait, [immediate])</code>\n
        <br />\n
        Creates and returns a new debounced version of the passed function which\n
        will postpone its execution until after\n
        <b>wait</b> milliseconds have elapsed since the last time it\n
        was invoked. Useful for implementing behavior that should only happen\n
        <i>after</i> the input has stopped arriving. For example: rendering a\n
        preview of a Markdown comment, recalculating a layout after the window\n
        has stopped being resized, and so on.\n
      </p>\n
\n
      <p>\n
        Pass <tt>true</tt> for the <b>immediate</b> parameter to cause\n
        <b>debounce</b> to trigger the function on the leading instead of the\n
        trailing edge of the <b>wait</b> interval. Useful in circumstances like\n
        preventing accidental double-clicks on a "submit" button from firing a\n
        second time.\n
      </p>\n
\n
      <pre>\n
var lazyLayout = _.debounce(calculateLayout, 300);\n
$(window).resize(lazyLayout);\n
</pre>\n
\n
      <p id="once">\n
        <b class="header">once</b><code>_.once(function)</code>\n
        <br />\n
        Creates a version of the function that can only be called one time.\n
        Repeated calls to the modified function will have no effect, returning\n
        the value from the original call. Useful for initialization functions,\n
        instead of having to set a boolean flag and then check it later.\n
      </p>\n
      <pre>\n
var initialize = _.once(createApplication);\n
initialize();\n
initialize();\n
// Application is only created once.\n
</pre>\n
\n
      <p id="after">\n
        <b class="header">after</b><code>_.after(count, function)</code>\n
        <br />\n
        Creates a version of the function that will only be run after first\n
        being called <b>count</b> times. Useful for grouping asynchronous responses,\n
        where you want to be sure that all the async calls have finished, before\n
        proceeding.\n
      </p>\n
      <pre>\n
var renderNotes = _.after(notes.length, render);\n
_.each(notes, function(note) {\n
  note.asyncSave({success: renderNotes});\n
});\n
// renderNotes is run once, after all notes have saved.\n
</pre>\n
\n
      <p id="wrap">\n
        <b class="header">wrap</b><code>_.wrap(function, wrapper)</code>\n
        <br />\n
        Wraps the first <b>function</b> inside of the <b>wrapper</b> function,\n
        passing it as the first argument. This allows the <b>wrapper</b> to\n
        execute code before and after the <b>function</b> runs, adjust the arguments,\n
        and execute it conditionally.\n
      </p>\n
      <pre>\n
var hello = function(name) { return "hello: " + name; };\n
hello = _.wrap(hello, function(func) {\n
  return "before, " + func("moe") + ", after";\n
});\n
hello();\n
=&gt; \'before, hello: moe, after\'\n
</pre>\n
\n
      <p id="compose">\n
        <b class="header">compose</b><code>_.compose(*functions)</code>\n
        <br />\n
        Returns the composition of a list of <b>functions</b>, where each function\n
        consumes the return value of the function that follows. In math terms,\n
        composing the functions <i>f()</i>, <i>g()</i>, and <i>h()</i> produces\n
        <i>f(g(h()))</i>.\n
      </p>\n
      <pre>\n
var greet    = function(name){ return "hi: " + name; };\n
var exclaim  = function(statement){ return statement.toUpperCase() + "!"; };\n
var welcome = _.compose(greet, exclaim);\n
welcome(\'moe\');\n
=&gt; \'hi: MOE!\'\n
</pre>\n
\n
      <h2 id="objects">Object Functions</h2>\n
\n
      <p id="keys">\n
        <b class="header">keys</b><code>_.keys(object)</code>\n
        <br />\n
        Retrieve all the names of the <b>object</b>\'s properties.\n
      </p>\n
      <pre>\n
_.keys({one: 1, two: 2, three: 3});\n
=&gt; ["one", "two", "three"]\n
</pre>\n
\n
      <p id="values">\n
        <b class="header">values</b><code>_.values(object)</code>\n
        <br />\n
        Return all of the values of the <b>object</b>\'s properties.\n
      </p>\n
      <pre>\n
_.values({one: 1, two: 2, three: 3});\n
=&gt; [1, 2, 3]\n
</pre>\n
\n
      <p id="pairs">\n
        <b class="header">pairs</b><code>_.pairs(object)</code>\n
        <br />\n
        Convert an object into a list of <tt>[key, value]</tt> pairs.\n
      </p>\n
      <pre>\n
_.pairs({one: 1, two: 2, three: 3});\n
=&gt; [["one", 1], ["two", 2], ["three", 3]]\n
</pre>\n
\n
      <p id="invert">\n
        <b class="header">invert</b><code>_.invert(object)</code>\n
        <br />\n
        Returns a copy of the <b>object</b> where the keys have become the values\n
        and the values the keys. For this to work, all of your object\'s values\n
        should be unique and string serializable.\n
      </p>\n
      <pre>\n
_.invert({Moe: "Moses", Larry: "Louis", Curly: "Jerome"});\n
=&gt; {Moses: "Moe", Louis: "Larry", Jerome: "Curly"};\n
</pre>\n
\n
      <p id="object-functions">\n
        <b class="header">functions</b><code>_.functions(object)</code>\n
        <span class="alias">Alias: <b>methods</b></span>\n
        <br />\n
        Returns a sorted list of the names of every method in an object &mdash;\n
        that is to say, the name of every function property of the object.\n
      </p>\n
      <pre>\n
_.functions(_);\n
=&gt; ["all", "any", "bind", "bindAll", "clone", "compact", "compose" ...\n
</pre>\n
\n
      <p id="extend">\n
        <b class="header">extend</b><code>_.extend(destination, *sources)</code>\n
        <br />\n
        Copy all of the properties in the <b>source</b> objects over to the\n
        <b>destination</b> object, and return the <b>destination</b> object.\n
        It\'s in-order, so the last source will override properties of the same\n
        name in previous arguments.\n
      </p>\n
      <pre>\n
_.extend({name: \'moe\'}, {age: 50});\n
=&gt; {name: \'moe\', age: 50}\n
</pre>\n
\n
      <p id="pick">\n
        <b class="header">pick</b><code>_.pick(object, *keys)</code>\n
        <br />\n
        Return a copy of the <b>object</b>, filtered to only have values for\n
        the whitelisted <b>keys</b> (or array of valid keys).\n
      </p>\n
      <pre>\n
_.pick({name: \'moe\', age: 50, userid: \'moe1\'}, \'name\', \'age\');\n
=&gt; {name: \'moe\', age: 50}\n
</pre>\n
\n
      <p id="omit">\n
        <b class="header">omit</b><code>_.omit(object, *keys)</code>\n
        <br />\n
        Return a copy of the <b>object</b>, filtered to omit the blacklisted\n
        <b>keys</b> (or array of keys).\n
      </p>\n
      <pre>\n
_.omit({name: \'moe\', age: 50, userid: \'moe1\'}, \'userid\');\n
=&gt; {name: \'moe\', age: 50}\n
</pre>\n
\n
      <p id="defaults">\n
        <b class="header">defaults</b><code>_.defaults(object, *defaults)</code>\n
        <br />\n
        Fill in <tt>undefined</tt> properties in <b>object</b> with values from the\n
        <b>defaults</b> objects, and return the <b>object</b>. As soon as the\n
        property is filled, further defaults will have no effect.\n
      </p>\n
      <pre>\n
var iceCream = {flavor: "chocolate"};\n
_.defaults(iceCream, {flavor: "vanilla", sprinkles: "lots"});\n
=&gt; {flavor: "chocolate", sprinkles: "lots"}\n
</pre>\n
\n
      <p id="clone">\n
        <b class="header">clone</b><code>_.clone(object)</code>\n
        <br />\n
        Create a shallow-copied clone of the <b>object</b>. Any nested objects\n
        or arrays will be copied by reference, not duplicated.\n
      </p>\n
      <pre>\n
_.clone({name: \'moe\'});\n
=&gt; {name: \'moe\'};\n
</pre>\n
\n
      <p id="tap">\n
        <b class="header">tap</b><code>_.tap(object, interceptor)</code>\n
        <br />\n
        Invokes <b>interceptor</b> with the <b>object</b>, and then returns <b>object</b>.\n
        The primary purpose of this method is to "tap into" a method chain, in order to perform operations on intermediate results within the chain.\n
      </p>\n
      <pre>\n
_.chain([1,2,3,200])\n
  .filter(function(num) { return num % 2 == 0; })\n
  .tap(alert)\n
  .map(function(num) { return num * num })\n
  .value();\n
=&gt; // [2, 200] (alerted)\n
=&gt; [4, 40000]\n
</pre>\n
\n
      <p id="has">\n
        <b class="header">has</b><code>_.has(object, key)</code>\n
        <br />\n
        Does the object contain the given key? Identical to\n
        <tt>object.hasOwnProperty(key)</tt>, but uses a safe reference to the\n
        <tt>hasOwnProperty</tt> function, in case it\'s been\n
        <a href="http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/">overridden accidentally</a>.\n
      </p>\n
      <pre>\n
_.has({a: 1, b: 2, c: 3}, "b");\n
=&gt; true\n
</pre>\n
\n
      <p id="isEqual">\n
        <b class="header">isEqual</b><code>_.isEqual(object, other)</code>\n
        <br />\n
        Performs an optimized deep comparison between the two objects, to determine\n
        if they should be considered equal.\n
      </p>\n
      <pre>\n
var moe   = {name: \'moe\', luckyNumbers: [13, 27, 34]};\n
var clone = {name: \'moe\', luckyNumbers: [13, 27, 34]};\n
moe == clone;\n
=&gt; false\n
_.isEqual(moe, clone);\n
=&gt; true\n
</pre>\n
\n
      <p id="isEmpty">\n
        <b class="header">isEmpty</b><code>_.isEmpty(object)</code>\n
        <br />\n
        Returns <i>true</i> if <b>object</b> contains no values\n
        (no enumerable own-properties).\n
      </p>\n
      <pre>\n
_.isEmpty([1, 2, 3]);\n
=&gt; false\n
_.isEmpty({});\n
=&gt; true\n
</pre>\n
\n
      <p id="isElement">\n
        <b class="header">isElement</b><code>_.isElement(object)</code>\n
        <br />\n
        Returns <i>true</i> if <b>object</b> is a DOM element.\n
      </p>\n
      <pre>\n
_.isElement(jQuery(\'body\')[0]);\n
=&gt; true\n
</pre>\n
\n
      <p id="isArray">\n
        <b class="header">isArray</b><code>_.isArray(object)</code>\n
        <br />\n
        Returns <i>true</i> if <b>object</b> is an Array.\n
      </p>\n
      <pre>\n
(function(){ return _.isArray(arguments); })();\n
=&gt; false\n
_.isArray([1,2,3]);\n
=&gt; true\n
</pre>\n
\n
      <p id="isObject">\n
        <b class="header">isObject</b><code>_.isObject(value)</code>\n
        <br />\n
        Returns <i>true</i> if <b>value</b> is an Object. Note that JavaScript\n
        arrays and functions are objects, while (normal) strings and numbers are not.\n
      </p>\n
      <pre>\n
_.isObject({});\n
=&gt; true\n
_.isObject(1);\n
=&gt; false\n
</pre>\n
\n
      <p id="isArguments">\n
        <b class="header">isArguments</b><code>_.isArguments(object)</code>\n
        <br />\n
        Returns <i>true</i> if <b>object</b> is an Arguments object.\n
      </p>\n
      <pre>\n
(function(){ return _.isArguments(arguments); })(1, 2, 3);\n
=&gt; true\n
_.isArguments([1,2,3]);\n
=&gt; false\n
</pre>\n
\n
      <p id="isFunction">\n
        <b class="header">isFunction</b><code>_.isFunction(object)</code>\n
        <br />\n
        Returns <i>true</i> if <b>object</b> is a Function.\n
      </p>\n
      <pre>\n
_.isFunction(alert);\n
=&gt; true\n
</pre>\n
\n
      <p id="isString">\n
        <b class="header">isString</b><code>_.isString(object)</code>\n
        <br />\n
        Returns <i>true</i> if <b>object</b> is a String.\n
      </p>\n
      <pre>\n
_.isString("moe");\n
=&gt; true\n
</pre>\n
\n
      <p id="isNumber">\n
        <b class="header">isNumber</b><code>_.isNumber(object)</code>\n
        <br />\n
        Returns <i>true</i> if <b>object</b> is a Number (including <tt>NaN</tt>).\n
      </p>\n
      <pre>\n
_.isNumber(8.4 * 5);\n
=&gt; true\n
</pre>\n
\n
      <p id="isFinite">\n
        <b class="header">isFinite</b><code>_.isFinite(object)</code>\n
        <br />\n
        Returns <i>true</i> if <b>object</b> is a finite Number.\n
      </p>\n
      <pre>\n
_.isFinite(-101);\n
=&gt; true\n
\n
_.isFinite(-Infinity);\n
=&gt; false\n
</pre>\n
\n
      <p id="isBoolean">\n
        <b class="header">isBoolean</b><code>_.isBoolean(object)</code>\n
        <br />\n
        Returns <i>true</i> if <b>object</b> is either <i>true</i> or <i>false</i>.\n
      </p>\n
      <pre>\n
_.isBoolean(null);\n
=&gt; false\n
</pre>\n
\n
      <p id="isDate">\n
        <b class="header">isDate</b><code>_.isDate(object)</code>\n
        <br />\n
        Returns <i>true</i> if <b>object</b> is a Date.\n
      </p>\n
      <pre>\n
_.isDate(new Date());\n
=&gt; true\n
</pre>\n
\n
      <p id="isRegExp">\n
        <b class="header">isRegExp</b><code>_.isRegExp(object)</code>\n
        <br />\n
        Returns <i>true</i> if <b>object</b> is a RegExp.\n
      </p>\n
      <pre>\n
_.isRegExp(/moe/);\n
=&gt; true\n
</pre>\n
\n
      <p id="isNaN">\n
        <b class="header">isNaN</b><code>_.isNaN(object)</code>\n
        <br />\n
        Returns <i>true</i> if <b>object</b> is <i>NaN</i>.<br /> Note: this is not\n
        the same as the native <b>isNaN</b> function, which will also return\n
        true for many other not-number values, such as <tt>undefined</tt>.\n
      </p>\n
      <pre>\n
_.isNaN(NaN);\n
=&gt; true\n
isNaN(undefined);\n
=&gt; true\n
_.isNaN(undefined);\n
=&gt; false\n
</pre>\n
\n
      <p id="isNull">\n
        <b class="header">isNull</b><code>_.isNull(object)</code>\n
        <br />\n
        Returns <i>true</i> if the value of <b>object</b> is <i>null</i>.\n
      </p>\n
      <pre>\n
_.isNull(null);\n
=&gt; true\n
_.isNull(undefined);\n
=&gt; false\n
</pre>\n
\n
      <p id="isUndefined">\n
        <b class="header">isUndefined</b><code>_.isUndefined(value)</code>\n
        <br />\n
        Returns <i>true</i> if <b>value</b> is <i>undefined</i>.\n
      </p>\n
      <pre>\n
_.isUndefined(window.missingVariable);\n
=&gt; true\n
</pre>\n
\n
      <h2 id="utility">Utility Functions</h2>\n
\n
      <p id="noConflict">\n
        <b class="header">noConflict</b><code>_.noConflict()</code>\n
        <br />\n
        Give control of the "_" variable back to its previous owner. Returns\n
        a reference to the <b>Underscore</b> object.\n
      </p>\n
      <pre>\n
var underscore = _.noConflict();</pre>\n
\n
      <p id="identity">\n
        <b class="header">identity</b><code>_.identity(value)</code>\n
        <br />\n
        Returns the same value that is used as the argument. In math:\n
        <tt>f(x) = x</tt><br />\n
        This function looks useless, but is used throughout Underscore as\n
        a default iterator.\n
      </p>\n
      <pre>\n
var moe = {name: \'moe\'};\n
moe === _.identity(moe);\n
=&gt; true</pre>\n
\n
      <p id="times">\n
        <b class="header">times</b><code>_.times(n, iterator, [context])</code>\n
        <br />\n
        Invokes the given iterator function <b>n</b> times. Each invocation of\n
        <b>iterator</b> is called with an <tt>index</tt> argument. Produces an\n
        array of the returned values.\n
        <br />\n
        <i>Note: this example uses the <a href="#chaining">chaining syntax</a></i>.\n
      </p>\n
      <pre>\n
_(3).times(function(n){ genie.grantWishNumber(n); });</pre>\n
\n
      <p id="random">\n
        <b class="header">random</b><code>_.random(min, max)</code>\n
        <br />\n
        Returns a random integer between <b>min</b> and <b>max</b>, inclusive.\n
        If you only pass one argument, it will return a number between <tt>0</tt>\n
        and that number.\n
      </p>\n
      <pre>\n
_.random(0, 100);\n
=&gt; 42</pre>\n
\n
      <p id="mixin">\n
        <b class="header">mixin</b><code>_.mixin(object)</code>\n
        <br />\n
        Allows you to extend Underscore with your own utility functions. Pass\n
        a hash of <tt>{name: function}</tt> definitions to have your functions\n
        added to the Underscore object, as well as the OOP wrapper.\n
      </p>\n
      <pre>\n
_.mixin({\n
  capitalize: function(string) {\n
    return string.charAt(0).toUpperCase() + string.substring(1).toLowerCase();\n
  }\n
});\n
_("fabio").capitalize();\n
=&gt; "Fabio"\n
</pre>\n
\n
      <p id="uniqueId">\n
        <b class="header">uniqueId</b><code>_.uniqueId([prefix])</code>\n
        <br />\n
        Generate a globally-unique id for client-side models or DOM elements\n
        that need one. If <b>prefix</b> is passed, the id will be appended to it.\n
      </p>\n
      <pre>\n
_.uniqueId(\'contact_\');\n
=&gt; \'contact_104\'</pre>\n
\n
      <p id="escape">\n
        <b class="header">escape</b><code>_.escape(string)</code>\n
        <br />\n
        Escapes a string for insertion into HTML, replacing\n
        <tt>&amp;</tt>, <tt>&lt;</tt>, <tt>&gt;</tt>, <tt>&quot;</tt>, <tt>&#x27;</tt>, and <tt>&#x2F;</tt> characters.\n
      </p>\n
      <pre>\n
_.escape(\'Curly, Larry &amp; Moe\');\n
=&gt; "Curly, Larry &amp;amp; Moe"</pre>\n
\n
      <p id="unescape">\n
        <b class="header">unescape</b><code>_.unescape(string)</code>\n
        <br />\n
        The opposite of <a href="#escape"><b>escape</b></a>, replaces\n
        <tt>&amp;amp;</tt>, <tt>&amp;lt;</tt>, <tt>&amp;gt;</tt>,\n
        <tt>&amp;quot;</tt>, <tt>&amp;#x27;</tt>, and <tt>&amp;#x2F;</tt>\n
        with their unescaped counterparts.\n
      </p>\n
      <pre>\n
_.unescape(\'Curly, Larry &amp;amp; Moe\');\n
=&gt; "Curly, Larry &amp; Moe"</pre>\n
\n
      <p id="result">\n
        <b class="header">result</b><code>_.result(object, property)</code>\n
        <br />\n
        If the value of the named <b>property</b> is a function then invoke it\n
        with the <b>object</b> as context; otherwise, return it.\n
      </p>\n
      <pre>\n
var object = {cheese: \'crumpets\', stuff: function(){ return \'nonsense\'; }};\n
_.result(object, \'cheese\');\n
=&gt; "crumpets"\n
_.result(object, \'stuff\');\n
=&gt; "nonsense"</pre>\n
\n
      <p id="template">\n
        <b class="header">template</b><code>_.template(templateString, [data], [settings])</code>\n
        <br />\n
        Compiles JavaScript templates into functions that can be evaluated\n
        for rendering. Useful for rendering complicated bits of HTML from JSON\n
        data sources. Template functions can both interpolate variables, using\n
        <tt>&lt;%= &hellip; %&gt;</tt>, as well as execute arbitrary JavaScript code, with\n
        <tt>&lt;% &hellip; %&gt;</tt>. If you wish to interpolate a value, and have\n
        it be HTML-escaped, use <tt>&lt;%- &hellip; %&gt;</tt> When you evaluate a template function, pass in a\n
        <b>data</b> object that has properties corresponding to the template\'s free\n
        variables. If you\'re writing a one-off, you can pass the <b>data</b>\n
        object as the second parameter to <b>template</b> in order to render\n
        immediately instead of returning a template function.  The <b>settings</b> argument\n
        should be a hash containing any <tt>_.templateSettings</tt> that should be overridden.\n
      </p>\n
\n
      <pre>\n
var compiled = _.template("hello: &lt;%= name %&gt;");\n
compiled({name: \'moe\'});\n
=&gt; "hello: moe"\n
\n
var list = "&lt;% _.each(people, function(name) { %&gt; &lt;li&gt;&lt;%= name %&gt;&lt;/li&gt; &lt;% }); %&gt;";\n
_.template(list, {people: [\'moe\', \'curly\', \'larry\']});\n
=&gt; "&lt;li&gt;moe&lt;/li&gt;&lt;li&gt;curly&lt;/li&gt;&lt;li&gt;larry&lt;/li&gt;"\n
\n
var template = _.template("&lt;b&gt;&lt;%- value %&gt;&lt;/b&gt;");\n
template({value: \'&lt;script&gt;\'});\n
=&gt; "&lt;b&gt;&amp;lt;script&amp;gt;&lt;/b&gt;"</pre>\n
\n
      <p>\n
        You can also use <tt>print</tt> from within JavaScript code.  This is\n
        sometimes more convenient than using <tt>&lt;%= ... %&gt;</tt>.\n
      </p>\n
\n
      <pre>\n
var compiled = _.template("&lt;% print(\'Hello \' + epithet); %&gt;");\n
compiled({epithet: "stooge"});\n
=&gt; "Hello stooge"</pre>\n
\n
      <p>\n
        If ERB-style delimiters aren\'t your cup of tea, you can change Underscore\'s\n
        template settings to use different symbols to set off interpolated code.\n
        Define an <b>interpolate</b> regex to match expressions that should be\n
        interpolated verbatim, an <b>escape</b> regex to match expressions that should\n
        be inserted after being HTML escaped, and an <b>evaluate</b> regex to match\n
        expressions that should be evaluated without insertion into the resulting\n
        string. You may define or omit any combination of the three.\n
        For example, to perform\n
        <a href="http://github.com/janl/mustache.js#readme">Mustache.js</a>\n
        style templating:\n
      </p>\n
\n
      <pre>\n
_.templateSettings = {\n
  interpolate: /\\{\\{(.+?)\\}\\}/g\n
};\n
\n
var template = _.template("Hello {{ name }}!");\n
template({name: "Mustache"});\n
=&gt; "Hello Mustache!"</pre>\n
\n
      <p>\n
        By default, <b>template</b> places the values from your data in the local scope\n
        via the <tt>with</tt> statement.  However, you can specify a single variable name\n
        with the <b>variable</b> setting. This can significantly improve the speed\n
        at which a template is able to render.\n
      </p>\n
\n
      <pre>\n
_.template("Using \'with\': <%= data.answer %>", {answer: \'no\'}, {variable: \'data\'});\n
=&gt; "Using \'with\': no"</pre>\n
\n
      <p>\n
        Precompiling your templates can be a big help when debugging errors you can\'t\n
        reproduce.  This is because precompiled templates can provide line numbers and\n
        a stack trace, something that is not possible when compiling templates on the client.\n
        The <b>source</b> property is available on the compiled template\n
        function for easy precompilation.\n
      </p>\n
\n
      <pre>&lt;script&gt;\n
  JST.project = <%= _.template(jstText).source %>;\n
&lt;/script&gt;</pre>\n
\n
\n
      <h2 id="chaining">Chaining</h2>\n
\n
      <p>\n
        You can use Underscore in either an object-oriented or a functional style,\n
        depending on your preference. The following two lines of code are\n
        identical ways to double a list of numbers.\n
      </p>\n
\n
    <pre>\n
_.map([1, 2, 3], function(n){ return n * 2; });\n
_([1, 2, 3]).map(function(n){ return n * 2; });</pre>\n
\n
      <p>\n
        Calling <tt>chain</tt> will cause all future method calls to return\n
        wrapped objects. When you\'ve finished the computation, use\n
        <tt>value</tt> to retrieve the final value. Here\'s an example of chaining\n
        together a <b>map/flatten/reduce</b>, in order to get the word count of\n
        every word in a song.\n
      </p>\n
\n
<pre>\n
var lyrics = [\n
  {line: 1, words: "I\'m a lumberjack and I\'m okay"},\n
  {line: 2, words: "I sleep all night and I work all day"},\n
  {line: 3, words: "He\'s a lumberjack and he\'s okay"},\n
  {line: 4, words: "He sleeps all night and he works all day"}\n
];\n
\n
_.chain(lyrics)\n
  .map(function(line) { return line.words.split(\' \'); })\n
  .flatten()\n
  .reduce(function(counts, word) {\n
    counts[word] = (counts[word] || 0) + 1;\n
    return counts;\n
  }, {})\n
  .value();\n
\n
=&gt; {lumberjack: 2, all: 4, night: 2 ... }</pre>\n
\n
      <p>\n
        In addition, the\n
        <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/prototype">Array prototype\'s methods</a>\n
        are proxied through the chained Underscore object, so you can slip a\n
        <tt>reverse</tt> or a <tt>push</tt> into your chain, and continue to\n
        modify the array.\n
      </p>\n
\n
      <p id="chain">\n
        <b class="header">chain</b><code>_.chain(obj)</code>\n
        <br />\n
        Returns a wrapped object. Calling methods on this object will continue\n
        to return wrapped objects until <tt>value</tt> is used.\n
      </p>\n
      <pre>\n
var stooges = [{name: \'curly\', age: 25}, {name: \'moe\', age: 21}, {name: \'larry\', age: 23}];\n
var youngest = _.chain(stooges)\n
  .sortBy(function(stooge){ return stooge.age; })\n
  .map(function(stooge){ return stooge.name + \' is \' + stooge.age; })\n
  .first()\n
  .value();\n
=&gt; "moe is 21"\n
</pre>\n
\n
      <p id="value">\n
        <b class="header">value</b><code>_(obj).value()</code>\n
        <br />\n
        Extracts the value of a wrapped object.\n
      </p>\n
      <pre>\n
_([1, 2, 3]).value();\n
=&gt; [1, 2, 3]\n
</pre>\n
\n
      <h2 id="links">Links &amp; Suggested Reading</h2>\n
\n
      <p>\n
        The Underscore documentation is also available in\n
        <a href="http://learning.github.com/underscore/">Simplified Chinese</a>.\n
      </p>\n
\n
      <p>\n
        <a href="http://mirven.github.com/underscore.lua/">Underscore.lua</a>,\n
        a Lua port of the functions that are applicable in both languages.\n
        Includes OOP-wrapping and chaining.\n
        (<a href="http://github.com/mirven/underscore.lua">source</a>)\n
      </p>\n
\n
      <p>\n
        <a href="http://underscorem.org">Underscore.m</a>, an Objective-C port\n
        of many of the Underscore.js functions, using a syntax that encourages\n
        chaining.\n
        (<a href="https://github.com/robb/Underscore.m">source</a>)\n
      </p>\n
\n
      <p>\n
        <a href="http://kmalakoff.github.com/_.m/">_.m</a>, an alternative\n
        Objective-C port that tries to stick a little closer to the original\n
        Underscore.js API.\n
        (<a href="https://github.com/kmalakoff/_.m">source</a>)\n
      </p>\n
\n
      <p>\n
        <a href="http://brianhaveri.github.com/Underscore.php/">Underscore.php</a>,\n
        a PHP port of the functions that are applicable in both languages.\n
        Includes OOP-wrapping and chaining.\n
        (<a href="http://github.com/brianhaveri/Underscore.php">source</a>)\n
      </p>\n
\n
      <p>\n
        <a href="http://vti.github.com/underscore-perl/">Underscore-perl</a>,\n
        a Perl port of many of the Underscore.js functions,\n
        aimed at on Perl hashes and arrays.\n
        (<a href="https://github.com/vti/underscore-perl/">source</a>)\n
      </p>\n
\n
      <p>\n
        <a href="http://russplaysguitar.github.com/UnderscoreCF/">Underscore.cfc</a>,\n
        a Coldfusion port of many of the Underscore.js functions.\n
        (<a href="https://github.com/russplaysguitar/underscorecf">source</a>)\n
      </p>\n
\n
      <p>\n
        <a href="https://github.com/edtsech/underscore.string">Underscore.string</a>,\n
        an Underscore extension that adds functions for string-manipulation:\n
        <tt>trim</tt>, <tt>startsWith</tt>, <tt>contains</tt>, <tt>capitalize</tt>,\n
        <tt>reverse</tt>, <tt>sprintf</tt>, and more.\n
      </p>\n
\n
      <p>\n
        Ruby\'s <a href="http://ruby-doc.org/core/classes/Enumerable.html">Enumerable</a> module.\n
      </p>\n
\n
      <p>\n
        <a href="http://www.prototypejs.org/">Prototype.js</a>, which provides\n
        JavaScript with collection functions in the manner closest to Ruby\'s Enumerable.\n
      </p>\n
\n
      <p>\n
        Oliver Steele\'s\n
        <a href="http://osteele.com/sources/javascript/functional/">Functional JavaScript</a>,\n
        which includes comprehensive higher-order function support as well as string lambdas.\n
      </p>\n
\n
      <p>\n
        Michael Aufreiter\'s <a href="http://github.com/michael/data">Data.js</a>,\n
        a data manipulation + persistence library for JavaScript.\n
      </p>\n
\n
      <p>\n
        Python\'s <a href="http://docs.python.org/library/itertools.html">itertools</a>.\n
      </p>\n
\n
      <h2 id="changelog">Change Log</h2>\n
\n
      <p>\n
        <b class="header">1.5.2</b> &mdash; <small><i>Sept. 7, 2013</i></small> &mdash; <a href="https://github.com/jashkenas/underscore/compare/1.5.1...1.5.2">Diff</a><br />\n
        <ul>\n
          <li>\n
            Added an <tt>indexBy</tt> function, which fits in alongside its \n
            cousins, <tt>countBy</tt> and <tt>groupBy</tt>.\n
          </li>\n
          <li>\n
            Added a <tt>sample</tt> function, for sampling random elements from\n
            arrays.\n
          </li>\n
          <li>\n
            Some optimizations relating to functions that can be implemented\n
            in terms of <tt>_.keys</tt> (which includes, significantly, \n
            <tt>each</tt> on objects). Also for <tt>debounce</tt> in a tight loop.\n
          </li>\n
        </ul>\n
      </p>\n
\n
      <p>\n
        <b class="header">1.5.1</b> &mdash; <small><i>Jul. 8, 2013</i></small> &mdash; <a href="https://github.com/jashkenas/underscore/compare/1.5.0...1.5.1">Diff</a><br />\n
        <ul>\n
          <li>\n
            Removed <tt>unzip</tt>, as it\'s simply the application of <tt>zip</tt>\n
            to an array of arguments. Use <tt>_.zip.apply(_, list)</tt> to\n
            transpose instead.\n
          </li>\n
        </ul>\n
      </p>\n
\n
      <p>\n
        <b class="header">1.5.0</b> &mdash; <small><i>Jul. 6, 2013</i></small> &mdash; <a href="https://github.com/jashkenas/underscore/compare/1.4.4...1.5.0">Diff</a><br />\n
        <ul>\n
          <li>\n
            Added a new <tt>unzip</tt> function, as the inverse of <tt>_.zip</tt>.\n
          </li>\n
          <li>\n
            The <tt>throttle</tt> function now takes an <tt>options</tt> argument,\n
            allowing you to disable execution of the throttled function on either\n
            the <b>leading</b> or <b>trailing</b> edge.\n
          </li>\n
          <li>\n
            A source map is now supplied for easier debugging of the minified\n
            production build of Underscore.\n
          </li>\n
          <li>\n
            The <tt>defaults</tt> function now only overrides <tt>undefined</tt>\n
            values, not <tt>null</tt> ones.\n
          </li>\n
          <li>\n
            Removed the ability to call <tt>_.bindAll</tt> with no method name\n
            arguments. It\'s pretty much always wiser to white-list the names of\n
            the methods you\'d like to bind.\n
          </li>\n
          <li>\n
            Removed the ability to call <tt>_.after</tt> with an invocation count\n
            of zero. The minimum number of calls is (naturally) now <tt>1</tt>.\n
          </li>\n
        </ul>\n
      </p>\n
\n
      <p>\n
        <b class="header">1.4.4</b> &mdash; <small><i>Jan. 30, 2013</i></small> &mdash; <a href="https://github.com/jashkenas/underscore/compare/1.4.3...1.4.4">Diff</a><br />\n
        <ul>\n
          <li>\n
            Added <tt>_.findWhere</tt>, for finding the first element in a list\n
            that matches a particular set of keys and values.\n
          </li>\n
          <li>\n
            Added <tt>_.partial</tt>, for partially applying a function <i>without</i>\n
            changing its dynamic reference to <tt>this</tt>.\n
          </li>\n
          <li>\n
            Simplified <tt>bind</tt> by removing some edge cases involving\n
            constructor functions. In short: don\'t <tt>_.bind</tt> your\n
            constructors.\n
          </li>\n
          <li>\n
            A minor optimization to <tt>invoke</tt>.\n
          </li>\n
          <li>\n
            Fix bug in the minified version due to the minifier incorrectly\n
            optimizing-away <tt>isFunction</tt>.\n
          </li>\n
        </ul>\n
      </p>\n
\n
      <p>\n
        <b class="header">1.4.3</b> &mdash; <small><i>Dec. 4, 2012</i></small> &mdash; <a href="https://github.com/jashkenas/underscore/compare/1.4.2...1.4.3">Diff</a><br />\n
        <ul>\n
          <li>\n
            Improved Underscore compatibility with Adobe\'s JS engine that can be\n
            used to script Illustrator, Photoshop, and friends.\n
          </li>\n
          <li>\n
            Added a default <tt>_.identity</tt> iterator to <tt>countBy</tt> and\n
            <tt>groupBy</tt>.\n
          </li>\n
          <li>\n
            The <tt>uniq</tt> function can now take <tt>array, iterator, context</tt>\n
            as the argument list.\n
          </li>\n
          <li>\n
            The <tt>times</tt> function now returns the mapped array of iterator\n
            results.\n
          </li>\n
          <li>\n
            Simplified and fixed bugs in <tt>throttle</tt>.\n
          </li>\n
        </ul>\n
      </p>\n
\n
      <p>\n
        <b class="header">1.4.2</b> &mdash; <small><i>Oct. 1, 2012</i></small> &mdash; <a href="https://github.com/jashkenas/underscore/compare/1.4.1...1.4.2">Diff</a><br />\n
        <ul>\n
          <li>\n
            For backwards compatibility, returned to pre-1.4.0 behavior when\n
            passing <tt>null</tt> to iteration functions. They now become no-ops\n
            again.\n
          </li>\n
        </ul>\n
      </p>\n
\n
      <p>\n
        <b class="header">1.4.1</b> &mdash; <small><i>Oct. 1, 2012</i></small> &mdash; <a href="https://github.com/jashkenas/underscore/compare/1.4.0...1.4.1">Diff</a><br />\n
        <ul>\n
          <li>\n
            Fixed a 1.4.0 regression in the <tt>lastIndexOf</tt> function.\n
          </li>\n
        </ul>\n
      </p>\n
\n
      <p>\n
        <b class="header">1.4.0</b> &mdash; <small><i>Sept. 27, 2012</i></small>  &mdash; <a href="https://github.com/jashkenas/underscore/compare/1.3.3...1.4.0">Diff</a><br />\n
        <ul>\n
          <li>\n
            Added a <tt>pairs</tt> function, for turning a JavaScript object\n
            into <tt>[key, value]</tt> pairs ... as well as an <tt>object</tt>\n
            function, for converting an array of <tt>[key, value]</tt> pairs\n
            into an object.\n
          </li>\n
          <li>\n
            Added a <tt>countBy</tt> function, for counting the number of objects\n
            in a list that match a certain criteria.\n
          </li>\n
          <li>\n
            Added an <tt>invert</tt> function, for performing a simple inversion\n
            of the keys and values in an object.\n
          </li>\n
          <li>\n
            Added a <tt>where</tt> function, for easy cases of filtering a list\n
            for objects with specific values.\n
          </li>\n
          <li>\n
            Added an <tt>omit</tt> function, for filtering an object to remove\n
            certain keys.\n
          </li>\n
          <li>\n
            Added a <tt>random</tt> function, to return a random number in a\n
            given range.\n
          </li>\n
          <li>\n
            <tt>_.debounce</tt>\'d functions now return their last updated value,\n
            just like <tt>_.throttle</tt>\'d functions do.\n
          </li>\n
          <li>\n
            The <tt>sortBy</tt> function now runs a stable sort algorithm.\n
          </li>\n
          <li>\n
            Added the optional <tt>fromIndex</tt> option to <tt>indexOf</tt> and\n
            <tt>lastIndexOf</tt>.\n
          </li>\n
          <li>\n
            "Sparse" arrays are no longer supported in Underscore iteration\n
            functions. Use a <tt>for</tt> loop instead (or better yet, an object).\n
          </li>\n
          <li>\n
            The <tt>min</tt> and <tt>max</tt> functions may now be called on\n
            <i>very</i> large arrays.\n
          </li>\n
          <li>\n
            Interpolation in templates now represents <tt>null</tt> and\n
            <tt>undefined</tt> as the empty string.\n
          </li>\n
          <li>\n
            <del>Underscore iteration functions no longer accept <tt>null</tt> values\n
            as a no-op argument. You\'ll get an early error instead.</del>\n
          </li>\n
          <li>\n
            A number of edge-cases fixes and tweaks, which you can spot in the\n
            <a href="https://github.com/jashkenas/underscore/compare/1.3.3...1.4.0">diff</a>.\n
            Depending on how you\'re using Underscore, <b>1.4.0</b> may be more\n
            backwards-incompatible than usual &mdash; please test when you upgrade.\n
          </li>\n
        </ul>\n
      </p>\n
\n
      <p>\n
        <b class="header">1.3.3</b> &mdash; <small><i>April 10, 2012</i></small><br />\n
        <ul>\n
          <li>\n
            Many improvements to <tt>_.template</tt>, which now provides the\n
            <tt>source</tt> of the template function as a property, for potentially\n
            even more efficient pre-compilation on the server-side. You may now\n
            also set the <tt>variable</tt> option when creating a template,\n
            which will cause your passed-in data to be made available under the\n
            variable you named, instead of using a <tt>with</tt> statement &mdash;\n
            significantly improving the speed of rendering the template.\n
          </li>\n
          <li>\n
            Added the <tt>pick</tt> function, which allows you to filter an\n
            object literal with a whitelist of allowed property names.\n
          </li>\n
          <li>\n
            Added the <tt>result</tt> function, for convenience when working\n
            with APIs that allow either functions or raw properties.\n
          </li>\n
          <li>\n
            Added the <tt>isFinite</tt> function, because sometimes knowing that\n
            a value is a number just ain\'t quite enough.\n
          </li>\n
          <li>\n
            The <tt>sortBy</tt> function may now also be passed the string name\n
            of a property to use as the sort order on each object.\n
          </li>\n
          <li>\n
            Fixed <tt>uniq</tt> to work with sparse arrays.\n
          </li>\n
          <li>\n
            The <tt>difference</tt> function now performs a shallow flatten\n
            instead of a deep one when computing array differences.\n
          </li>\n
          <li>\n
            The <tt>debounce</tt> function now takes an <tt>immediate</tt>\n
            parameter, which will cause the callback to fire on the leading\n
            instead of the trailing edge.\n
          </li>\n
        </ul>\n
      </p>\n
\n
      <p>\n
        <b class="header">1.3.1</b> &mdash; <small><i>Jan. 23, 2012</i></small><br />\n
        <ul>\n
          <li>\n
            Added an <tt>_.has</tt> function, as a safer way to use <tt>hasOwnProperty</tt>.\n
          </li>\n
          <li>\n
            Added <tt>_.collect</tt> as an alias for <tt>_.map</tt>. Smalltalkers, rejoice.\n
          </li>\n
          <li>\n
            Reverted an old change so that <tt>_.extend</tt> will correctly copy\n
            over keys with undefined values again.\n
          </li>\n
          <li>\n
            Bugfix to stop escaping slashes within interpolations in <tt>_.template</tt>.\n
          </li>\n
        </ul>\n
      </p>\n
\n
      <p>\n
        <b class="header">1.3.0</b> &mdash; <small><i>Jan. 11, 2012</i></small><br />\n
        <ul>\n
          <li>\n
            Removed AMD (RequireJS) support from Underscore. If you\'d like to use\n
            Underscore with RequireJS, you can load it as a normal script, wrap\n
            or patch your copy, or download a forked version.\n
          </li>\n
        </ul>\n
      </p>\n
\n
      <p>\n
        <b class="header">1.2.4</b> &mdash; <small><i>Jan. 4, 2012</i></small><br />\n
        <ul>\n
          <li>\n
            You now can (and probably should, as it\'s simpler)\n
            write <tt>_.chain(list)</tt>\n
            instead of <tt>_(list).chain()</tt>.\n
          </li>\n
          <li>\n
            Fix for escaped characters in Underscore templates, and for supporting\n
            customizations of <tt>_.templateSettings</tt> that only define one or\n
            two of the required regexes.\n
          </li>\n
          <li>\n
            Fix for passing an array as the first argument to an <tt>_.wrap</tt>\'d function.\n
          </li>\n
          <li>\n
            Improved compatibility with ClojureScript, which adds a <tt>call</tt>\n
            function to <tt>String.prototype</tt>.\n
          </li>\n
        </ul>\n
      </p>\n
\n
      <p>\n
        <b class="header">1.2.3</b> &mdash; <small><i>Dec. 7, 2011</i></small><br />\n
        <ul>\n
          <li>\n
            Dynamic scope is now preserved for compiled <tt>_.template</tt> functions,\n
            so you can use the value of <tt>this</tt> if you like.\n
          </li>\n
          <li>\n
            Sparse array support of <tt>_.indexOf</tt>, <tt>_.lastIndexOf</tt>.\n
          </li>\n
          <li>\n
            Both <tt>_.reduce</tt> and <tt>_.reduceRight</tt> can now be passed an\n
            explicitly <tt>undefined</tt> value. (There\'s no reason why you\'d\n
            want to do this.)\n
          </li>\n
        </ul>\n
      </p>\n
\n
      <p>\n
        <b class="header">1.2.2</b> &mdash; <small><i>Nov. 14, 2011</i></small><br />\n
        <ul>\n
          <li>\n
            Continued tweaks to <tt>_.isEqual</tt> semantics. Now JS primitives are\n
            considered equivalent to their wrapped versions, and arrays are compared\n
            by their numeric properties only <small>(#351)</small>.\n
          </li>\n
          <li>\n
            <tt>_.escape</tt> no longer tries to be smart about not double-escaping\n
            already-escaped HTML entities. Now it just escapes regardless <small>(#350)</small>.\n
          </li>\n
          <li>\n
            In <tt>_.template</tt>, you may now leave semicolons out of evaluated\n
            statements if you wish: <tt>&lt;% }) %&gt;</tt> <small>(#369)</small>.\n
          </li>\n
          <li>\n
            <tt>_.after(callback, 0)</tt> will now trigger the callback immediately,\n
            making "after" easier to use with asynchronous APIs <small>(#366)</small>.\n
          </li>\n
        </ul>\n
      </p>\n
\n
      <p>\n
        <b class="header">1.2.1</b> &mdash; <small><i>Oct. 24, 2011</i></small><br />\n
        <ul>\n
          <li>\n
            Several important bug fixes for <tt>_.isEqual</tt>, which should now\n
            do better on mutated Arrays, and on non-Array objects with\n
            <tt>length</tt> properties. <small>(#329)</small>\n
          </li>\n
          <li>\n
            <b>jrburke</b> contributed Underscore exporting for AMD module loaders,\n
            and <b>tonylukasavage</b> for Appcelerator Titanium.\n
            <small>(#335, #338)</small>\n
          </li>\n
          <li>\n
            You can now <tt>_.groupBy(list, \'property\')</tt> as a shortcut for\n
            grouping values by a particular common property.\n
          </li>\n
          <li>\n
            <tt>_.throttle</tt>\'d functions now fire immediately upon invocation,\n
            and are rate-limited thereafter <small>(#170, #266)</small>.\n
          </li>\n
          <li>\n
            Most of the <tt>_.is[Type]</tt> checks no longer ducktype.\n
          </li>\n
          <li>\n
            The <tt>_.bind</tt> function now also works on constructors, a-la\n
            ES5 ... but you would never want to use <tt>_.bind</tt> on a\n
            constructor function.\n
          </li>\n
          <li>\n
            <tt>_.clone</tt> no longer wraps non-object types in Objects.\n
          </li>\n
          <li>\n
            <tt>_.find</tt> and <tt>_.filter</tt> are now the preferred names for\n
            <tt>_.detect</tt> and <tt>_.select</tt>.\n
          </li>\n
        </ul>\n
      </p>\n
\n
      <p>\n
        <b class="header">1.2.0</b> &mdash; <small><i>Oct. 5, 2011</i></small><br />\n
        <ul>\n
          <li>\n
            The <tt>_.isEqual</tt> function now\n
            supports true deep equality comparisons, with checks for cyclic structures,\n
            thanks to Kit Cambridge.\n
          </li>\n
          <li>\n
            Underscore templates now support HTML escaping interpolations, using\n
            <tt>&lt;%- ... %&gt;</tt> syntax.\n
          </li>\n
          <li>\n
            Ryan Tenney contributed <tt>_.shuffle</tt>, which uses a modified\n
            Fisher-Yates to give you a shuffled copy of an array.\n
          </li>\n
          <li>\n
            <tt>_.uniq</tt> can now be passed an optional iterator, to determine by\n
            what criteria an object should be considered unique.\n
          </li>\n
          <li>\n
            <tt>_.last</tt> now takes an optional argument which will return the last\n
            N elements of the list.\n
          </li>\n
          <li>\n
            A new <tt>_.initial</tt> function was added, as a mirror of <tt>_.rest</tt>,\n
            which returns all the initial values of a list (except the last N).\n
          </li>\n
        </ul>\n
      </p>\n
\n
      <p>\n
        <b class="header">1.1.7</b> &mdash; <small><i>July 13, 2011</i></small><br />\n
        Added <tt>_.groupBy</tt>, which aggregates a collection into groups of like items.\n
        Added <tt>_.union</tt> and <tt>_.difference</tt>, to complement the\n
        (re-named) <tt>_.intersection</tt>.\n
        Various improvements for support of sparse arrays.\n
        <tt>_.toArray</tt> now returns a clone, if directly passed an array.\n
        <tt>_.functions</tt> now also returns the names of functions that are present\n
        in the prototype chain.\n
      </p>\n
\n
      <p>\n
        <b class="header">1.1.6</b> &mdash; <small><i>April 18, 2011</i></small><br />\n
        Added <tt>_.after</tt>, which will return a function that only runs after\n
        first being called a specified number of times.\n
        <tt>_.invoke</tt> can now take a direct function reference.\n
        <tt>_.every</tt> now requires an iterator function to be passed, which\n
        mirrors the ECMA5 API.\n
        <tt>_.extend</tt> no longer copies keys when the value is undefined.\n
        <tt>_.bind</tt> now errors when trying to bind an undefined value.\n
      </p>\n
\n
      <p>\n
        <b class="header">1.1.5</b> &mdash; <small><i>Mar 20, 2011</i></small><br />\n
        Added an <tt>_.defaults</tt> function, for use merging together JS objects\n
        representing default options.\n
        Added an <tt>_.once</tt> function, for manufacturing functions that should\n
        only ever execute a single time.\n
        <tt>_.bind</tt> now delegates to the native ECMAScript 5 version,\n
        where available.\n
        <tt>_.keys</tt> now throws an error when used on non-Object values, as in\n
        ECMAScript 5.\n
        Fixed a bug with <tt>_.keys</tt> when used over sparse arrays.\n
      </p>\n
\n
      <p>\n
        <b class="header">1.1.4</b> &mdash; <small><i>Jan 9, 2011</i></small><br />\n
        Improved compliance with ES5\'s Array methods when passing <tt>null</tt>\n
        as a value. <tt>_.wrap</tt> now correctly sets <tt>this</tt> for the\n
        wrapped function. <tt>_.indexOf</tt> now takes an optional flag for\n
        finding the insertion index in an array that is guaranteed to already\n
        be sorted. Avoiding the use of <tt>.callee</tt>, to allow <tt>_.isArray</tt>\n
        to work properly in ES5\'s strict mode.\n
      </p>\n
\n
      <p>\n
        <b class="header">1.1.3</b> &mdash; <small><i>Dec 1, 2010</i></small><br />\n
        In CommonJS, Underscore may now be required with just: <br />\n
        <tt>var _ = require("underscore")</tt>.\n
        Added <tt>_.throttle</tt> and <tt>_.debounce</tt> functions.\n
        Removed <tt>_.breakLoop</tt>, in favor of an ECMA5-style un-<i>break</i>-able\n
        each implementation &mdash; this removes the try/catch, and you\'ll now have\n
        better stack traces for exceptions that are thrown within an Underscore iterator.\n
        Improved the <b>isType</b> family of functions for better interoperability\n
        with Internet Explorer host objects.\n
        <tt>_.template</tt> now correctly escapes backslashes in templates.\n
        Improved <tt>_.reduce</tt> compatibility with the ECMA5 version:\n
        if you don\'t pass an initial value, the first item in the collection is used.\n
        <tt>_.each</tt> no longer returns the iterated collection, for improved\n
        consistency with ES5\'s <tt>forEach</tt>.\n
      </p>\n
\n
      <p>\n
        <b class="header">1.1.2</b><br />\n
        Fixed <tt>_.contains</tt>, which was mistakenly pointing at\n
        <tt>_.intersect</tt> instead of <tt>_.include</tt>, like it should\n
        have been. Added <tt>_.unique</tt> as an alias for <tt>_.uniq</tt>.\n
      </p>\n
\n
      <p>\n
        <b class="header">1.1.1</b><br />\n
        Improved the speed of <tt>_.template</tt>, and its handling of multiline\n
        interpolations. Ryan Tenney contributed optimizations to many Underscore\n
        functions. An annotated version of the source code is now available.\n
      </p>\n
\n
      <p>\n
        <b class="header">1.1.0</b><br />\n
        The method signature of <tt>_.reduce</tt> has been changed to match\n
        the ECMAScript 5 signature, instead of the Ruby/Prototype.js version.\n
        This is a backwards-incompatible change. <tt>_.template</tt> may now be\n
        called with no arguments, and preserves whitespace. <tt>_.contains</tt>\n
        is a new alias for <tt>_.include</tt>.\n
      </p>\n
\n
      <p>\n
        <b class="header">1.0.4</b><br />\n
        <a href="http://themoell.com/">Andri Möll</a> contributed the <tt>_.memoize</tt>\n
        function, which can be used to speed up expensive repeated computations\n
        by caching the results.\n
      </p>\n
\n
      <p>\n
        <b class="header">1.0.3</b><br />\n
        Patch that makes <tt>_.isEqual</tt> return <tt>false</tt> if any property\n
        of the compared object has a <tt>NaN</tt> value. Technically the correct\n
        thing to do, but of questionable semantics. Watch out for NaN comparisons.\n
      </p>\n
\n
      <p>\n
        <b class="header">1.0.2</b><br />\n
        Fixes <tt>_.isArguments</tt> in recent versions of Opera, which have\n
        arguments objects as real Arrays.\n
      </p>\n
\n
      <p>\n
        <b class="header">1.0.1</b><br />\n
        Bugfix for <tt>_.isEqual</tt>, when comparing two objects with the same\n
        number of undefined keys, but with different names.\n
      </p>\n
\n
      <p>\n
        <b class="header">1.0.0</b><br />\n
        Things have been stable for many months now, so Underscore is now\n
        considered to be out of beta, at <b>1.0</b>. Improvements since <b>0.6</b>\n
        include <tt>_.isBoolean</tt>, and the ability to have <tt>_.extend</tt>\n
        take multiple source objects.\n
      </p>\n
\n
      <p>\n
        <b class="header">0.6.0</b><br />\n
        Major release. Incorporates a number of\n
        <a href="http://github.com/ratbeard">Mile Frawley\'s</a> refactors for\n
        safer duck-typing on collection functions, and cleaner internals. A new\n
        <tt>_.mixin</tt> method that allows you to extend Underscore with utility\n
        functions of your own. Added <tt>_.times</tt>, which works the same as in\n
        Ruby or Prototype.js. Native support for ECMAScript 5\'s <tt>Array.isArray</tt>,\n
        and <tt>Object.keys</tt>.\n
      </p>\n
\n
      <p>\n
        <b class="header">0.5.8</b><br />\n
        Fixed Underscore\'s collection functions to work on\n
        <a href="https://developer.mozilla.org/En/DOM/NodeList">NodeLists</a> and\n
        <a href="https://developer.mozilla.org/En/DOM/HTMLCollection">HTMLCollections</a>\n
        once more, thanks to\n
        <a href="http://github.com/jmtulloss">Justin Tulloss</a>.\n
      </p>\n
\n
      <p>\n
        <b class="header">0.5.7</b><br />\n
        A safer implementation of <tt>_.isArguments</tt>, and a\n
        faster <tt>_.isNumber</tt>,<br />thanks to\n
        <a href="http://jedschmidt.com/">Jed Schmidt</a>.\n
      </p>\n
\n
      <p>\n
        <b class="header">0.5.6</b><br />\n
        Customizable delimiters for <tt>_.template</tt>, contributed by\n
        <a href="http://github.com/iamnoah">Noah Sloan</a>.\n
      </p>\n
\n
      <p>\n
        <b class="header">0.5.5</b><br />\n
        Fix for a bug in MobileSafari\'s OOP-wrapper, with the arguments object.\n
      </p>\n
\n
      <p>\n
        <b class="header">0.5.4</b><br />\n
        Fix for multiple single quotes within a template string for\n
        <tt>_.template</tt>. See:\n
        <a href="http://www.west-wind.com/Weblog/posts/509108.aspx">Rick Strahl\'s blog post</a>.\n
      </p>\n
\n
      <p>\n
        <b class="header">0.5.2</b><br />\n
        New implementations of <tt>isArray</tt>, <tt>isDate</tt>, <tt>isFunction</tt>,\n
        <tt>isNumber</tt>, <tt>isRegExp</tt>, and <tt>isString</tt>, thanks to\n
        a suggestion from\n
        <a href="http://www.broofa.com/">Robert Kieffer</a>.\n
        Instead of doing <tt>Object#toString</tt>\n
        comparisons, they now check for expected properties, which is less safe,\n
        but more than an order of magnitude faster. Most other Underscore\n
        functions saw minor speed improvements as a result.\n
        <a href="http://dolzhenko.org/">Evgeniy Dolzhenko</a>\n
        contributed <tt>_.tap</tt>,\n
        <a href="http://ruby-doc.org/core-1.9/classes/Object.html#M000191">similar to Ruby 1.9\'s</a>,\n
        which is handy for injecting side effects (like logging) into chained calls.\n
      </p>\n
\n
      <p>\n
        <b class="header">0.5.1</b><br />\n
        Added an <tt>_.isArguments</tt> function. Lots of little safety checks\n
        and optimizations contributed by\n
        <a href="http://github.com/iamnoah/">Noah Sloan</a> and\n
        <a href="http://themoell.com/">Andri Möll</a>.\n
      </p>\n
\n
      <p>\n
        <b class="header">0.5.0</b><br />\n
        <b>[API Changes]</b> <tt>_.bindAll</tt> now takes the context object as\n
        its first parameter. If no method names are passed, all of the context\n
        object\'s methods are bound to it, enabling chaining and easier binding.\n
        <tt>_.functions</tt> now takes a single argument and returns the names\n
        of its Function properties. Calling <tt>_.functions(_)</tt> will get you\n
        the previous behavior.\n
        Added <tt>_.isRegExp</tt> so that <tt>isEqual</tt> can now test for RegExp equality.\n
        All of the "is" functions have been shrunk down into a single definition.\n
        <a href="http://github.com/grayrest/">Karl Guertin</a> contributed patches.\n
      </p>\n
\n
      <p>\n
        <b class="header">0.4.7</b><br />\n
        Added <tt>isDate</tt>, <tt>isNaN</tt>, and <tt>isNull</tt>, for completeness.\n
        Optimizations for <tt>isEqual</tt> when checking equality between Arrays\n
        or Dates. <tt>_.keys</tt> is now <small><i><b>25%&ndash;2X</b></i></small> faster (depending on your\n
        browser) which speeds up the functions that rely on it, such as <tt>_.each</tt>.\n
      </p>\n
\n
      <p>\n
        <b class="header">0.4.6</b><br />\n
        Added the <tt>range</tt> function, a port of the\n
        <a href="http://docs.python.org/library/functions.html#range">Python\n
        function of the same name</a>, for generating flexibly-numbered lists\n
        of integers. Original patch contributed by\n
        <a href="http://github.com/kylichuku">Kirill Ishanov</a>.\n
      </p>\n
\n
      <p>\n
        <b class="header">0.4.5</b><br />\n
        Added <tt>rest</tt> for Arrays and arguments objects, and aliased\n
        <tt>first</tt> as <tt>head</tt>, and <tt>rest</tt> as <tt>tail</tt>,\n
        thanks to <a href="http://github.com/lukesutton/">Luke Sutton</a>\'s patches.\n
        Added tests ensuring that all Underscore Array functions also work on\n
        <i>arguments</i> objects.\n
      </p>\n
\n
      <p>\n
        <b class="header">0.4.4</b><br />\n
        Added <tt>isString</tt>, and <tt>isNumber</tt>, for consistency. Fixed\n
        <tt>_.isEqual(NaN, NaN)</tt> to return <i>true</i> (which is debatable).\n
      </p>\n
\n
      <p>\n
        <b class="header">0.4.3</b><br />\n
        Started using the native <tt>StopIteration</tt> object in browsers that support it.\n
        Fixed Underscore setup for CommonJS environments.\n
      </p>\n
\n
      <p>\n
        <b class="header">0.4.2</b><br />\n
        Renamed the unwrapping function to <tt>value</tt>, for clarity.\n
      </p>\n
\n
      <p>\n
        <b class="header">0.4.1</b><br />\n
        Chained Underscore objects now support the Array prototype methods, so\n
        that you can perform the full range of operations on a wrapped array\n
        without having to break your chain. Added a <tt>breakLoop</tt> method\n
        to <b>break</b> in the middle of any Underscore iteration. Added an\n
        <tt>isEmpty</tt> function that works on arrays and objects.\n
      </p>\n
\n
      <p>\n
        <b class="header">0.4.0</b><br />\n
        All Underscore functions can now be called in an object-oriented style,\n
        like so: <tt>_([1, 2, 3]).map(...);</tt>. Original patch provided by\n
        <a href="http://macournoyer.com/">Marc-André Cournoyer</a>.\n
        Wrapped objects can be chained through multiple\n
        method invocations. A <a href="#object-functions"><tt>functions</tt></a> method\n
        was added, providing a sorted list of all the functions in Underscore.\n
      </p>\n
\n
      <p>\n
        <b class="header">0.3.3</b><br />\n
        Added the JavaScript 1.8 function <tt>reduceRight</tt>. Aliased it\n
        as <tt>foldr</tt>, and aliased <tt>reduce</tt> as <tt>foldl</tt>.\n
      </p>\n
\n
      <p>\n
        <b class="header">0.3.2</b><br />\n
        Now runs on stock <a href="http://www.mozilla.org/rhino/">Rhino</a>\n
        interpreters with: <tt>load("underscore.js")</tt>.\n
        Added <a href="#identity"><tt>identity</tt></a> as a utility function.\n
      </p>\n
\n
      <p>\n
        <b class="header">0.3.1</b><br />\n
        All iterators are now passed in the original collection as their third\n
        argument, the same as JavaScript 1.6\'s <b>forEach</b>. Iterating over\n
        objects is now called with <tt>(value, key, collection)</tt>, for details\n
        see <a href="#each"><tt>_.each</tt></a>.\n
      </p>\n
\n
      <p>\n
        <b class="header">0.3.0</b><br />\n
        Added <a href="http://github.com/dmitryBaranovskiy">Dmitry Baranovskiy</a>\'s\n
        comprehensive optimizations, merged in\n
        <a href="http://github.com/kriskowal/">Kris Kowal</a>\'s patches to make Underscore\n
        <a href="http://wiki.commonjs.org/wiki/CommonJS">CommonJS</a> and\n
        <a href="http://narwhaljs.org/">Narwhal</a> compliant.\n
      </p>\n
\n
      <p>\n
        <b class="header">0.2.0</b><br />\n
        Added <tt>compose</tt> and <tt>lastIndexOf</tt>, renamed <tt>inject</tt> to\n
        <tt>reduce</tt>, added aliases for <tt>inject</tt>, <tt>filter</tt>,\n
        <tt>every</tt>, <tt>some</tt>, and <tt>forEach</tt>.\n
      </p>\n
\n
      <p>\n
        <b class="header">0.1.1</b><br />\n
        Added <tt>noConflict</tt>, so that the "Underscore" object can be assigned to\n
        other variables.\n
      </p>\n
\n
      <p>\n
        <b class="header">0.1.0</b><br />\n
        Initial release of Underscore.js.\n
      </p>\n
\n
      <p>\n
        <a href="http://documentcloud.org/" title="A DocumentCloud Project" style="background:none;">\n
          <img src="http://jashkenas.s3.amazonaws.com/images/a_documentcloud_project.png" alt="A DocumentCloud Project" />\n
        </a>\n
      </p>\n
\n
    </div>\n
\n
  </div>\n
\n
  <!-- Include Underscore, so you can play with it in the console. -->\n
  <script type="text/javascript" src="underscore.js"></script>\n
\n
</body>\n
</html>\n


]]></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
