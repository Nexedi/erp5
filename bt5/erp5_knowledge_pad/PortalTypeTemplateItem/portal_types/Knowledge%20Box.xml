<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="Base Type" module="erp5.portal_type"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_property_domain_dict</string> </key>
            <value>
              <dictionary>
                <item>
                    <key> <string>short_title</string> </key>
                    <value>
                      <persistent> <string encoding="base64">AAAAAAAAAAI=</string> </persistent>
                    </value>
                </item>
                <item>
                    <key> <string>title</string> </key>
                    <value>
                      <persistent> <string encoding="base64">AAAAAAAAAAM=</string> </persistent>
                    </value>
                </item>
              </dictionary>
            </value>
        </item>
        <item>
            <key> <string>acquire_local_roles</string> </key>
            <value> <int>1</int> </value>
        </item>
        <item>
            <key> <string>content_icon</string> </key>
            <value> <string>document_icon.gif</string> </value>
        </item>
        <item>
            <key> <string>content_meta_type</string> </key>
            <value> <string>ERP5 XML Object</string> </value>
        </item>
        <item>
            <key> <string>description</string> </key>
            <value> <string>      Document is an abstract class with all methods\n
      related to document management in ERP5. This includes\n
      searchable text, explicit relations, implicit relations,\n
      metadata, versions, languages, etc.\n
\n
      There are currently two types of Document subclasses:\n
\n
      * File for binary file based documents. File\n
        has subclasses such as Image, OOoDocument,\n
        PDFDocument, etc. to implement specific conversion\n
        methods.\n
\n
      * TextDocument for text based documents. TextDocument\n
        has subclasses such as Wiki to implement specific\n
        methods.\n
\n
      Document classes which implement conversion should use\n
      the ConversionCacheMixin class so that converted values are\n
      stored inside ZODB and do not need to be recalculated.\n
\n
      XXX IDEA - ISSUE: generic API for conversion.\n
        converted_document = document.convert(...)\n
\n
      Instances can be created directly, or via portal_contributions tool\n
      which manages document ingestion process whereby a file can be uploaded\n
      by http or sent in by email or dropped in by webdav or in some other\n
      way as yet unknown. The ingestion process has the following steps:\n
\n
      (1) portal type detection\n
      (2) object creation and upload of data\n
      (3) metadata discovery (optionally with conversion of data to another format)\n
      (4) other possible actions to finalise the ingestion (ex. by assigning\n
          a reference)\n
\n
      This class handles (3) and calls a ZMI script to do (4).\n
\n
      Metadata can be drawn from various sources:\n
\n
      input      -   data supplied with http request or set on the object during (2) (e.g.\n
                     discovered from email text)\n
      file_name  -    data which might be encoded in file name\n
      user_login -   information about user who is contributing the file\n
      content    -   data which might be derived from document content\n
\n
      If a certain property is defined in more than one source, it is set according to\n
      preference order returned by a script \n
         Document_getPreferredDocumentMetadataDiscoveryOrderList\n
         (or any type-based version since discovery is type dependent)\n
\n
      Methods for discovering metadata are:\n
\n
        getPropertyDictFromInput\n
        getPropertyDictFromFileName\n
        getPropertyDictFromUserLogin\n
        getPropertyDictFromContent\n
\n
      Methods for processing content are implemented either in \n
      Document class or in Base class:\n
\n
        getSearchableReferenceList (Base)\n
        getSearchableText (Base)\n
        index_html (Document)\n
\n
      Methods for handling relations are implemented either in \n
      Document class or in Base class:\n
\n
        getImplicitSuccessorValueList (Base)\n
        getImplicitPredecessorValueList (Base)\n
        getImplicitSimilarValueList (Base)\n
        getSimilarCloudValueList (Document)\n
\n
      Implicit relations consist in finding document references inside\n
      searchable text (ex. INV-23456) and deducting relations from that.\n
      Two customisable methods required. One to find a list of implicit references\n
      inside the content (getSearchableReferenceList) and one to convert a given\n
      document reference into a list of reference strings which could\n
      be present in other content (asSearchableReferenceList).\n
\n
      document.getSearchableReferenceList() returns\n
        [\n
         {\'reference\':\' INV-12367\'},\n
         {\'reference\': \'INV-1112\', \'version\':\'012}\', \n
         {\'reference\': \'AB-CC-DRK\', \'version\':\'011\', \'language\': \'en\'}\n
        ]\n
\n
      The Document class behaviour can be extended / customized through scripts\n
      (which are type-based so can be adjusted per portal type).\n
\n
      * Document_getPropertyDictFromUserLogin - finds a user (by user_login or from session)\n
        and returns properties which should be set on the document\n
\n
      * Document_getPropertyDictFromContent - analyzes document content and returns\n
        properties which should be set on the document\n
\n
      * Base_getImplicitSuccessorValueList - finds appropriate all documents\n
        referenced in the current content\n
\n
      * Base_getImplicitPredecessorValueList - finds document predecessors based on\n
        the document coordinates (can use only complete coordinates, or also partial)\n
\n
      * Document_getPreferredDocumentMetadataDiscoveryOrderList - returns an order\n
        in which metadata should be set/overwritten\n
\n
      * Document_finishIngestion - called by portal_activities after all the ingestion\n
        is completed (and after document has been converted, so text_content\n
        is available if the document has it)\n
\n
      * Document_getNewRevision - calculates revision number which should be set\n
        on this document. Implementation depends on revision numbering policy which\n
        can be very different. Interaction workflow should call setNewRevision method.\n
\n
      Subcontent: documents may include subcontent (files, images, etc.)\n
      so that publication of rich content can be path independent.\n
\n
    Consistency checking:\n
      Default implementation uses DocumentReferenceConstraint to check if the \n
      reference/language/version triplet is unique. Additional constraints\n
      can be added if necessary.\n
</string> </value>
        </item>
        <item>
            <key> <string>factory</string> </key>
            <value> <string>addXMLObject</string> </value>
        </item>
        <item>
            <key> <string>filter_content_types</string> </key>
            <value> <int>1</int> </value>
        </item>
        <item>
            <key> <string>group_list</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>Knowledge Box</string> </value>
        </item>
        <item>
            <key> <string>init_script</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>permission</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>type_class</string> </key>
            <value> <string>Predicate</string> </value>
        </item>
        <item>
            <key> <string>type_interface</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
  <record id="2" aka="AAAAAAAAAAI=">
    <pickle>
      <tuple>
        <tuple>
          <string>Products.ERP5Type.TranslationProviderBase</string>
          <string>TranslationInformation</string>
        </tuple>
        <none/>
      </tuple>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>domain_name</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>property_name</string> </key>
            <value> <string>short_title</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
  <record id="3" aka="AAAAAAAAAAM=">
    <pickle>
      <tuple>
        <tuple>
          <string>Products.ERP5Type.TranslationProviderBase</string>
          <string>TranslationInformation</string>
        </tuple>
        <none/>
      </tuple>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>domain_name</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>property_name</string> </key>
            <value> <string>title</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
