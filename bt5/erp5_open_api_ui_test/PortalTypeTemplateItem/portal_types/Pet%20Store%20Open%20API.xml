<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="Open API Type" module="erp5.portal_type"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>content_icon</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/json</string> </value>
        </item>
        <item>
            <key> <string>description</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>Pet Store Open API</string> </value>
        </item>
        <item>
            <key> <string>init_script</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>permission</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>short_title</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>text_content</string> </key>
            <value> <string encoding="cdata"><![CDATA[

{\n
  "openapi": "3.0.2",\n
  "info": {\n
    "title": "Swagger Petstore - OpenAPI 3.0",\n
    "description": "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\\nSwagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we\'ve switched to the design first approach!\\nYou can now help us improve the API whether it\'s by making changes to the definition itself or to the code.\\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\\n\\nSome useful links:\\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)",\n
    "termsOfService": "http://swagger.io/terms/",\n
    "contact": {\n
      "email": "apiteam@swagger.io"\n
    },\n
    "license": {\n
      "name": "Apache 2.0",\n
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"\n
    },\n
    "version": "1.0.17"\n
  },\n
  "externalDocs": {\n
    "description": "Find out more about Swagger",\n
    "url": "http://swagger.io"\n
  },\n
  "servers": [\n
    {\n
      "url": "/api/v3"\n
    }\n
  ],\n
  "tags": [\n
    {\n
      "name": "pet",\n
      "description": "Everything about your Pets",\n
      "externalDocs": {\n
        "description": "Find out more",\n
        "url": "http://swagger.io"\n
      }\n
    },\n
    {\n
      "name": "store",\n
      "description": "Access to Petstore orders",\n
      "externalDocs": {\n
        "description": "Find out more about our store",\n
        "url": "http://swagger.io"\n
      }\n
    },\n
    {\n
      "name": "user",\n
      "description": "Operations about user"\n
    }\n
  ],\n
  "paths": {\n
    "/pet": {\n
      "put": {\n
        "tags": [\n
          "pet"\n
        ],\n
        "summary": "Update an existing pet",\n
        "description": "Update an existing pet by Id",\n
        "operationId": "updatePet",\n
        "requestBody": {\n
          "description": "Update an existent pet in the store",\n
          "content": {\n
            "application/json": {\n
              "schema": {\n
                "$ref": "#/components/schemas/Pet"\n
              }\n
            },\n
            "application/xml": {\n
              "schema": {\n
                "$ref": "#/components/schemas/Pet"\n
              }\n
            },\n
            "application/x-www-form-urlencoded": {\n
              "schema": {\n
                "$ref": "#/components/schemas/Pet"\n
              }\n
            }\n
          },\n
          "required": true\n
        },\n
        "responses": {\n
          "200": {\n
            "description": "Successful operation",\n
            "content": {\n
              "application/xml": {\n
                "schema": {\n
                  "$ref": "#/components/schemas/Pet"\n
                }\n
              },\n
              "application/json": {\n
                "schema": {\n
                  "$ref": "#/components/schemas/Pet"\n
                }\n
              }\n
            }\n
          },\n
          "400": {\n
            "description": "Invalid ID supplied"\n
          },\n
          "404": {\n
            "description": "Pet not found"\n
          },\n
          "405": {\n
            "description": "Validation exception"\n
          }\n
        },\n
        "security": [\n
          {\n
            "petstore_auth": [\n
              "write:pets",\n
              "read:pets"\n
            ]\n
          }\n
        ]\n
      },\n
      "post": {\n
        "tags": [\n
          "pet"\n
        ],\n
        "summary": "Add a new pet to the store",\n
        "description": "Add a new pet to the store",\n
        "operationId": "addPet",\n
        "requestBody": {\n
          "description": "Create a new pet in the store",\n
          "content": {\n
            "application/json": {\n
              "schema": {\n
                "$ref": "#/components/schemas/Pet"\n
              }\n
            },\n
            "application/xml": {\n
              "schema": {\n
                "$ref": "#/components/schemas/Pet"\n
              }\n
            },\n
            "application/x-www-form-urlencoded": {\n
              "schema": {\n
                "$ref": "#/components/schemas/Pet"\n
              }\n
            }\n
          },\n
          "required": true\n
        },\n
        "responses": {\n
          "200": {\n
            "description": "Successful operation",\n
            "content": {\n
              "application/xml": {\n
                "schema": {\n
                  "$ref": "#/components/schemas/Pet"\n
                }\n
              },\n
              "application/json": {\n
                "schema": {\n
                  "$ref": "#/components/schemas/Pet"\n
                }\n
              }\n
            }\n
          },\n
          "405": {\n
            "description": "Invalid input"\n
          }\n
        },\n
        "security": [\n
          {\n
            "petstore_auth": [\n
              "write:pets",\n
              "read:pets"\n
            ]\n
          }\n
        ]\n
      }\n
    },\n
    "/pet/findByStatus": {\n
      "get": {\n
        "tags": [\n
          "pet"\n
        ],\n
        "summary": "Finds Pets by status",\n
        "description": "Multiple status values can be provided with comma separated strings",\n
        "operationId": "findPetsByStatus",\n
        "parameters": [\n
          {\n
            "name": "status",\n
            "in": "query",\n
            "description": "Status values that need to be considered for filter",\n
            "required": false,\n
            "explode": true,\n
            "schema": {\n
              "type": "string",\n
              "default": "available",\n
              "enum": [\n
                "available",\n
                "pending",\n
                "sold"\n
              ]\n
            }\n
          }\n
        ],\n
        "responses": {\n
          "200": {\n
            "description": "successful operation",\n
            "content": {\n
              "application/xml": {\n
                "schema": {\n
                  "type": "array",\n
                  "items": {\n
                    "$ref": "#/components/schemas/Pet"\n
                  }\n
                }\n
              },\n
              "application/json": {\n
                "schema": {\n
                  "type": "array",\n
                  "items": {\n
                    "$ref": "#/components/schemas/Pet"\n
                  }\n
                }\n
              }\n
            }\n
          },\n
          "400": {\n
            "description": "Invalid status value"\n
          }\n
        },\n
        "security": [\n
          {\n
            "petstore_auth": [\n
              "write:pets",\n
              "read:pets"\n
            ]\n
          }\n
        ]\n
      }\n
    },\n
    "/pet/findByTags": {\n
      "get": {\n
        "tags": [\n
          "pet"\n
        ],\n
        "summary": "Finds Pets by tags",\n
        "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",\n
        "operationId": "findPetsByTags",\n
        "parameters": [\n
          {\n
            "name": "tags",\n
            "in": "query",\n
            "description": "Tags to filter by",\n
            "required": false,\n
            "explode": true,\n
            "schema": {\n
              "type": "array",\n
              "items": {\n
                "type": "string"\n
              }\n
            }\n
          }\n
        ],\n
        "responses": {\n
          "200": {\n
            "description": "successful operation",\n
            "content": {\n
              "application/xml": {\n
                "schema": {\n
                  "type": "array",\n
                  "items": {\n
                    "$ref": "#/components/schemas/Pet"\n
                  }\n
                }\n
              },\n
              "application/json": {\n
                "schema": {\n
                  "type": "array",\n
                  "items": {\n
                    "$ref": "#/components/schemas/Pet"\n
                  }\n
                }\n
              }\n
            }\n
          },\n
          "400": {\n
            "description": "Invalid tag value"\n
          }\n
        },\n
        "security": [\n
          {\n
            "petstore_auth": [\n
              "write:pets",\n
              "read:pets"\n
            ]\n
          }\n
        ]\n
      }\n
    },\n
    "/pet/{petId}": {\n
      "get": {\n
        "tags": [\n
          "pet"\n
        ],\n
        "summary": "Find pet by ID",\n
        "description": "Returns a single pet",\n
        "operationId": "getPetById",\n
        "parameters": [\n
          {\n
            "name": "petId",\n
            "in": "path",\n
            "description": "ID of pet to return",\n
            "required": true,\n
            "schema": {\n
              "type": "integer",\n
              "format": "int64"\n
            }\n
          }\n
        ],\n
        "responses": {\n
          "200": {\n
            "description": "successful operation",\n
            "content": {\n
              "application/xml": {\n
                "schema": {\n
                  "$ref": "#/components/schemas/Pet"\n
                }\n
              },\n
              "application/json": {\n
                "schema": {\n
                  "$ref": "#/components/schemas/Pet"\n
                }\n
              }\n
            }\n
          },\n
          "400": {\n
            "description": "Invalid ID supplied"\n
          },\n
          "404": {\n
            "description": "Pet not found"\n
          }\n
        },\n
        "security": [\n
          {\n
            "api_key": []\n
          },\n
          {\n
            "petstore_auth": [\n
              "write:pets",\n
              "read:pets"\n
            ]\n
          }\n
        ]\n
      },\n
      "post": {\n
        "tags": [\n
          "pet"\n
        ],\n
        "summary": "Updates a pet in the store with form data",\n
        "description": "",\n
        "operationId": "updatePetWithForm",\n
        "parameters": [\n
          {\n
            "name": "petId",\n
            "in": "path",\n
            "description": "ID of pet that needs to be updated",\n
            "required": true,\n
            "schema": {\n
              "type": "integer",\n
              "format": "int64"\n
            }\n
          },\n
          {\n
            "name": "name",\n
            "in": "query",\n
            "description": "Name of pet that needs to be updated",\n
            "schema": {\n
              "type": "string"\n
            }\n
          },\n
          {\n
            "name": "status",\n
            "in": "query",\n
            "description": "Status of pet that needs to be updated",\n
            "schema": {\n
              "type": "string"\n
            }\n
          }\n
        ],\n
        "responses": {\n
          "405": {\n
            "description": "Invalid input"\n
          }\n
        },\n
        "security": [\n
          {\n
            "petstore_auth": [\n
              "write:pets",\n
              "read:pets"\n
            ]\n
          }\n
        ]\n
      },\n
      "delete": {\n
        "tags": [\n
          "pet"\n
        ],\n
        "summary": "Deletes a pet",\n
        "description": "",\n
        "operationId": "deletePet",\n
        "parameters": [\n
          {\n
            "name": "api_key",\n
            "in": "header",\n
            "description": "",\n
            "required": false,\n
            "schema": {\n
              "type": "string"\n
            }\n
          },\n
          {\n
            "name": "petId",\n
            "in": "path",\n
            "description": "Pet id to delete",\n
            "required": true,\n
            "schema": {\n
              "type": "integer",\n
              "format": "int64"\n
            }\n
          }\n
        ],\n
        "responses": {\n
          "400": {\n
            "description": "Invalid pet value"\n
          }\n
        },\n
        "security": [\n
          {\n
            "petstore_auth": [\n
              "write:pets",\n
              "read:pets"\n
            ]\n
          }\n
        ]\n
      }\n
    },\n
    "/pet/{petId}/uploadImage": {\n
      "post": {\n
        "tags": [\n
          "pet"\n
        ],\n
        "summary": "uploads an image",\n
        "description": "",\n
        "operationId": "uploadFile",\n
        "parameters": [\n
          {\n
            "name": "petId",\n
            "in": "path",\n
            "description": "ID of pet to update",\n
            "required": true,\n
            "schema": {\n
              "type": "integer",\n
              "format": "int64"\n
            }\n
          },\n
          {\n
            "name": "additionalMetadata",\n
            "in": "query",\n
            "description": "Additional Metadata",\n
            "required": false,\n
            "schema": {\n
              "type": "string"\n
            }\n
          }\n
        ],\n
        "requestBody": {\n
          "content": {\n
            "application/octet-stream": {\n
              "schema": {\n
                "type": "string",\n
                "format": "binary"\n
              }\n
            }\n
          }\n
        },\n
        "responses": {\n
          "200": {\n
            "description": "successful operation",\n
            "content": {\n
              "application/json": {\n
                "schema": {\n
                  "$ref": "#/components/schemas/ApiResponse"\n
                }\n
              }\n
            }\n
          }\n
        },\n
        "security": [\n
          {\n
            "petstore_auth": [\n
              "write:pets",\n
              "read:pets"\n
            ]\n
          }\n
        ]\n
      }\n
    },\n
    "/store/inventory": {\n
      "get": {\n
        "tags": [\n
          "store"\n
        ],\n
        "summary": "Returns pet inventories by status",\n
        "description": "Returns a map of status codes to quantities",\n
        "operationId": "getInventory",\n
        "responses": {\n
          "200": {\n
            "description": "successful operation",\n
            "content": {\n
              "application/json": {\n
                "schema": {\n
                  "type": "object",\n
                  "additionalProperties": {\n
                    "type": "integer",\n
                    "format": "int32"\n
                  }\n
                }\n
              }\n
            }\n
          }\n
        },\n
        "security": [\n
          {\n
            "api_key": []\n
          }\n
        ]\n
      }\n
    },\n
    "/store/order": {\n
      "post": {\n
        "tags": [\n
          "store"\n
        ],\n
        "summary": "Place an order for a pet",\n
        "description": "Place a new order in the store",\n
        "operationId": "placeOrder",\n
        "requestBody": {\n
          "content": {\n
            "application/json": {\n
              "schema": {\n
                "$ref": "#/components/schemas/Order"\n
              }\n
            },\n
            "application/xml": {\n
              "schema": {\n
                "$ref": "#/components/schemas/Order"\n
              }\n
            },\n
            "application/x-www-form-urlencoded": {\n
              "schema": {\n
                "$ref": "#/components/schemas/Order"\n
              }\n
            }\n
          }\n
        },\n
        "responses": {\n
          "200": {\n
            "description": "successful operation",\n
            "content": {\n
              "application/json": {\n
                "schema": {\n
                  "$ref": "#/components/schemas/Order"\n
                }\n
              }\n
            }\n
          },\n
          "405": {\n
            "description": "Invalid input"\n
          }\n
        }\n
      }\n
    },\n
    "/store/order/{orderId}": {\n
      "get": {\n
        "tags": [\n
          "store"\n
        ],\n
        "summary": "Find purchase order by ID",\n
        "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.",\n
        "operationId": "getOrderById",\n
        "parameters": [\n
          {\n
            "name": "orderId",\n
            "in": "path",\n
            "description": "ID of order that needs to be fetched",\n
            "required": true,\n
            "schema": {\n
              "type": "integer",\n
              "format": "int64"\n
            }\n
          }\n
        ],\n
        "responses": {\n
          "200": {\n
            "description": "successful operation",\n
            "content": {\n
              "application/xml": {\n
                "schema": {\n
                  "$ref": "#/components/schemas/Order"\n
                }\n
              },\n
              "application/json": {\n
                "schema": {\n
                  "$ref": "#/components/schemas/Order"\n
                }\n
              }\n
            }\n
          },\n
          "400": {\n
            "description": "Invalid ID supplied"\n
          },\n
          "404": {\n
            "description": "Order not found"\n
          }\n
        }\n
      },\n
      "delete": {\n
        "tags": [\n
          "store"\n
        ],\n
        "summary": "Delete purchase order by ID",\n
        "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",\n
        "operationId": "deleteOrder",\n
        "parameters": [\n
          {\n
            "name": "orderId",\n
            "in": "path",\n
            "description": "ID of the order that needs to be deleted",\n
            "required": true,\n
            "schema": {\n
              "type": "integer",\n
              "format": "int64"\n
            }\n
          }\n
        ],\n
        "responses": {\n
          "400": {\n
            "description": "Invalid ID supplied"\n
          },\n
          "404": {\n
            "description": "Order not found"\n
          }\n
        }\n
      }\n
    },\n
    "/user": {\n
      "post": {\n
        "tags": [\n
          "user"\n
        ],\n
        "summary": "Create user",\n
        "description": "This can only be done by the logged in user.",\n
        "operationId": "createUser",\n
        "requestBody": {\n
          "description": "Created user object",\n
          "content": {\n
            "application/json": {\n
              "schema": {\n
                "$ref": "#/components/schemas/User"\n
              }\n
            },\n
            "application/xml": {\n
              "schema": {\n
                "$ref": "#/components/schemas/User"\n
              }\n
            },\n
            "application/x-www-form-urlencoded": {\n
              "schema": {\n
                "$ref": "#/components/schemas/User"\n
              }\n
            }\n
          }\n
        },\n
        "responses": {\n
          "default": {\n
            "description": "successful operation",\n
            "content": {\n
              "application/json": {\n
                "schema": {\n
                  "$ref": "#/components/schemas/User"\n
                }\n
              },\n
              "application/xml": {\n
                "schema": {\n
                  "$ref": "#/components/schemas/User"\n
                }\n
              }\n
            }\n
          }\n
        }\n
      }\n
    },\n
    "/user/createWithList": {\n
      "post": {\n
        "tags": [\n
          "user"\n
        ],\n
        "summary": "Creates list of users with given input array",\n
        "description": "Creates list of users with given input array",\n
        "operationId": "createUsersWithListInput",\n
        "requestBody": {\n
          "content": {\n
            "application/json": {\n
              "schema": {\n
                "type": "array",\n
                "items": {\n
                  "$ref": "#/components/schemas/User"\n
                }\n
              }\n
            }\n
          }\n
        },\n
        "responses": {\n
          "200": {\n
            "description": "Successful operation",\n
            "content": {\n
              "application/xml": {\n
                "schema": {\n
                  "$ref": "#/components/schemas/User"\n
                }\n
              },\n
              "application/json": {\n
                "schema": {\n
                  "$ref": "#/components/schemas/User"\n
                }\n
              }\n
            }\n
          },\n
          "default": {\n
            "description": "successful operation"\n
          }\n
        }\n
      }\n
    },\n
    "/user/login": {\n
      "get": {\n
        "tags": [\n
          "user"\n
        ],\n
        "summary": "Logs user into the system",\n
        "description": "",\n
        "operationId": "loginUser",\n
        "parameters": [\n
          {\n
            "name": "username",\n
            "in": "query",\n
            "description": "The user name for login",\n
            "required": false,\n
            "schema": {\n
              "type": "string"\n
            }\n
          },\n
          {\n
            "name": "password",\n
            "in": "query",\n
            "description": "The password for login in clear text",\n
            "required": false,\n
            "schema": {\n
              "type": "string"\n
            }\n
          }\n
        ],\n
        "responses": {\n
          "200": {\n
            "description": "successful operation",\n
            "headers": {\n
              "X-Rate-Limit": {\n
                "description": "calls per hour allowed by the user",\n
                "schema": {\n
                  "type": "integer",\n
                  "format": "int32"\n
                }\n
              },\n
              "X-Expires-After": {\n
                "description": "date in UTC when token expires",\n
                "schema": {\n
                  "type": "string",\n
                  "format": "date-time"\n
                }\n
              }\n
            },\n
            "content": {\n
              "application/xml": {\n
                "schema": {\n
                  "type": "string"\n
                }\n
              },\n
              "application/json": {\n
                "schema": {\n
                  "type": "string"\n
                }\n
              }\n
            }\n
          },\n
          "400": {\n
            "description": "Invalid username/password supplied"\n
          }\n
        }\n
      }\n
    },\n
    "/user/logout": {\n
      "get": {\n
        "tags": [\n
          "user"\n
        ],\n
        "summary": "Logs out current logged in user session",\n
        "description": "",\n
        "operationId": "logoutUser",\n
        "parameters": [],\n
        "responses": {\n
          "default": {\n
            "description": "successful operation"\n
          }\n
        }\n
      }\n
    },\n
    "/user/{username}": {\n
      "get": {\n
        "tags": [\n
          "user"\n
        ],\n
        "summary": "Get user by user name",\n
        "description": "",\n
        "operationId": "getUserByName",\n
        "parameters": [\n
          {\n
            "name": "username",\n
            "in": "path",\n
            "description": "The name that needs to be fetched. Use user1 for testing. ",\n
            "required": true,\n
            "schema": {\n
              "type": "string"\n
            }\n
          }\n
        ],\n
        "responses": {\n
          "200": {\n
            "description": "successful operation",\n
            "content": {\n
              "application/xml": {\n
                "schema": {\n
                  "$ref": "#/components/schemas/User"\n
                }\n
              },\n
              "application/json": {\n
                "schema": {\n
                  "$ref": "#/components/schemas/User"\n
                }\n
              }\n
            }\n
          },\n
          "400": {\n
            "description": "Invalid username supplied"\n
          },\n
          "404": {\n
            "description": "User not found"\n
          }\n
        }\n
      },\n
      "put": {\n
        "tags": [\n
          "user"\n
        ],\n
        "summary": "Update user",\n
        "description": "This can only be done by the logged in user.",\n
        "operationId": "updateUser",\n
        "parameters": [\n
          {\n
            "name": "username",\n
            "in": "path",\n
            "description": "name that need to be deleted",\n
            "required": true,\n
            "schema": {\n
              "type": "string"\n
            }\n
          }\n
        ],\n
        "requestBody": {\n
          "description": "Update an existent user in the store",\n
          "content": {\n
            "application/json": {\n
              "schema": {\n
                "$ref": "#/components/schemas/User"\n
              }\n
            },\n
            "application/xml": {\n
              "schema": {\n
                "$ref": "#/components/schemas/User"\n
              }\n
            },\n
            "application/x-www-form-urlencoded": {\n
              "schema": {\n
                "$ref": "#/components/schemas/User"\n
              }\n
            }\n
          }\n
        },\n
        "responses": {\n
          "default": {\n
            "description": "successful operation"\n
          }\n
        }\n
      },\n
      "delete": {\n
        "tags": [\n
          "user"\n
        ],\n
        "summary": "Delete user",\n
        "description": "This can only be done by the logged in user.",\n
        "operationId": "deleteUser",\n
        "parameters": [\n
          {\n
            "name": "username",\n
            "in": "path",\n
            "description": "The name that needs to be deleted",\n
            "required": true,\n
            "schema": {\n
              "type": "string"\n
            }\n
          }\n
        ],\n
        "responses": {\n
          "400": {\n
            "description": "Invalid username supplied"\n
          },\n
          "404": {\n
            "description": "User not found"\n
          }\n
        }\n
      }\n
    }\n
  },\n
  "components": {\n
    "schemas": {\n
      "Order": {\n
        "type": "object",\n
        "properties": {\n
          "id": {\n
            "type": "integer",\n
            "format": "int64",\n
            "example": 10\n
          },\n
          "petId": {\n
            "type": "integer",\n
            "format": "int64",\n
            "example": 198772\n
          },\n
          "quantity": {\n
            "type": "integer",\n
            "format": "int32",\n
            "example": 7\n
          },\n
          "shipDate": {\n
            "type": "string",\n
            "format": "date-time"\n
          },\n
          "status": {\n
            "type": "string",\n
            "description": "Order Status",\n
            "example": "approved",\n
            "enum": [\n
              "placed",\n
              "approved",\n
              "delivered"\n
            ]\n
          },\n
          "complete": {\n
            "type": "boolean"\n
          }\n
        },\n
        "xml": {\n
          "name": "order"\n
        }\n
      },\n
      "Customer": {\n
        "type": "object",\n
        "properties": {\n
          "id": {\n
            "type": "integer",\n
            "format": "int64",\n
            "example": 100000\n
          },\n
          "username": {\n
            "type": "string",\n
            "example": "fehguy"\n
          },\n
          "address": {\n
            "type": "array",\n
            "xml": {\n
              "name": "addresses",\n
              "wrapped": true\n
            },\n
            "items": {\n
              "$ref": "#/components/schemas/Address"\n
            }\n
          }\n
        },\n
        "xml": {\n
          "name": "customer"\n
        }\n
      },\n
      "Address": {\n
        "type": "object",\n
        "properties": {\n
          "street": {\n
            "type": "string",\n
            "example": "437 Lytton"\n
          },\n
          "city": {\n
            "type": "string",\n
            "example": "Palo Alto"\n
          },\n
          "state": {\n
            "type": "string",\n
            "example": "CA"\n
          },\n
          "zip": {\n
            "type": "string",\n
            "example": "94301"\n
          }\n
        },\n
        "xml": {\n
          "name": "address"\n
        }\n
      },\n
      "Category": {\n
        "type": "object",\n
        "properties": {\n
          "id": {\n
            "type": "integer",\n
            "format": "int64",\n
            "example": 1\n
          },\n
          "name": {\n
            "type": "string",\n
            "example": "Dogs"\n
          }\n
        },\n
        "xml": {\n
          "name": "category"\n
        }\n
      },\n
      "User": {\n
        "type": "object",\n
        "properties": {\n
          "id": {\n
            "type": "integer",\n
            "format": "int64",\n
            "example": 10\n
          },\n
          "username": {\n
            "type": "string",\n
            "example": "theUser"\n
          },\n
          "firstName": {\n
            "type": "string",\n
            "example": "John"\n
          },\n
          "lastName": {\n
            "type": "string",\n
            "example": "James"\n
          },\n
          "email": {\n
            "type": "string",\n
            "example": "john@email.com"\n
          },\n
          "password": {\n
            "type": "string",\n
            "example": "12345"\n
          },\n
          "phone": {\n
            "type": "string",\n
            "example": "12345"\n
          },\n
          "userStatus": {\n
            "type": "integer",\n
            "description": "User Status",\n
            "format": "int32",\n
            "example": 1\n
          }\n
        },\n
        "xml": {\n
          "name": "user"\n
        }\n
      },\n
      "Tag": {\n
        "type": "object",\n
        "properties": {\n
          "id": {\n
            "type": "integer",\n
            "format": "int64"\n
          },\n
          "name": {\n
            "type": "string"\n
          }\n
        },\n
        "xml": {\n
          "name": "tag"\n
        }\n
      },\n
      "Pet": {\n
        "required": [\n
          "name",\n
          "photoUrls"\n
        ],\n
        "type": "object",\n
        "properties": {\n
          "id": {\n
            "type": "integer",\n
            "format": "int64",\n
            "example": 10\n
          },\n
          "name": {\n
            "type": "string",\n
            "example": "doggie"\n
          },\n
          "category": {\n
            "$ref": "#/components/schemas/Category"\n
          },\n
          "photoUrls": {\n
            "type": "array",\n
            "xml": {\n
              "wrapped": true\n
            },\n
            "items": {\n
              "type": "string",\n
              "xml": {\n
                "name": "photoUrl"\n
              }\n
            }\n
          },\n
          "tags": {\n
            "type": "array",\n
            "xml": {\n
              "wrapped": true\n
            },\n
            "items": {\n
              "$ref": "#/components/schemas/Tag"\n
            }\n
          },\n
          "status": {\n
            "type": "string",\n
            "description": "pet status in the store",\n
            "enum": [\n
              "available",\n
              "pending",\n
              "sold"\n
            ]\n
          }\n
        },\n
        "xml": {\n
          "name": "pet"\n
        }\n
      },\n
      "ApiResponse": {\n
        "type": "object",\n
        "properties": {\n
          "code": {\n
            "type": "integer",\n
            "format": "int32"\n
          },\n
          "type": {\n
            "type": "string"\n
          },\n
          "message": {\n
            "type": "string"\n
          }\n
        },\n
        "xml": {\n
          "name": "##default"\n
        }\n
      }\n
    },\n
    "requestBodies": {\n
      "Pet": {\n
        "description": "Pet object that needs to be added to the store",\n
        "content": {\n
          "application/json": {\n
            "schema": {\n
              "$ref": "#/components/schemas/Pet"\n
            }\n
          },\n
          "application/xml": {\n
            "schema": {\n
              "$ref": "#/components/schemas/Pet"\n
            }\n
          }\n
        }\n
      },\n
      "UserArray": {\n
        "description": "List of user object",\n
        "content": {\n
          "application/json": {\n
            "schema": {\n
              "type": "array",\n
              "items": {\n
                "$ref": "#/components/schemas/User"\n
              }\n
            }\n
          }\n
        }\n
      }\n
    },\n
    "securitySchemes": {\n
      "petstore_auth": {\n
        "type": "oauth2",\n
        "flows": {\n
          "implicit": {\n
            "authorizationUrl": "https://petstore3.swagger.io/oauth/authorize",\n
            "scopes": {\n
              "write:pets": "modify pets in your account",\n
              "read:pets": "read your pets"\n
            }\n
          }\n
        }\n
      },\n
      "api_key": {\n
        "type": "apiKey",\n
        "name": "api_key",\n
        "in": "header"\n
      }\n
    }\n
  }\n
}

]]></string> </value>
        </item>
        <item>
            <key> <string>type_class</string> </key>
            <value> <string>OpenAPIService</string> </value>
        </item>
        <item>
            <key> <string>type_interface</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
