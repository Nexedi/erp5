<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="PythonScript" module="Products.PythonScripts.PythonScript"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>_Access_contents_information_Permission</string> </key>
            <value>
              <tuple>
                <string>Authenticated</string>
                <string>Author</string>
                <string>Manager</string>
                <string>Owner</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string>"""\n
Python script to create Data Notebook or update existing Data Notebooks\n
identifying notebook by reference from user.\n
\n
Expected behaviour from this script:-\n
1. Return unauthorized message for non-developer user.\n
2. Create new \'Data Notebook\' for new reference.\n
3. Add new \'Data Notebook Line\'to the existing Data Notebook on basis of reference.\n
4. Return python dictionary containing list of all notebooks for \'request_reference=True\'\n
"""\n
\n
portal = context.getPortalObject()\n
# Check permissions for current user and display message to non-authorized user \n
if not portal.Base_checkPermission(\'portal_components\', \'Manage Portal\'):\n
  return "You are not authorized to access the script"\n
\n
import json\n
\n
# Convert the request_reference argument string to their respeced boolean values\n
request_reference = {\'True\': True, \'False\': False}.get(request_reference, False)\n
\n
# Return python dictionary with title and reference of all notebooks\n
# for request_reference=True\n
if request_reference:\n
  data_notebook_list = portal.portal_catalog(portal_type=\'Data Notebook\')\n
  notebook_detail_list = [{\'reference\': obj.getReference(), \'title\': obj.getTitle()} for obj in data_notebook_list]\n
  return notebook_detail_list\n
\n
if not reference:\n
  message = "Please set or use reference for the notebook you want to use"\n
  return message\n
\n
# Take python_expression as \'\' for empty code from jupyter frontend\n
if not python_expression:\n
  python_expression = \'\'\n
\n
# Get Data Notebook with the specific reference\n
data_notebook = portal.portal_catalog.getResultValue(portal_type=\'Data Notebook\',\n
                      reference=reference)\n
\n
# Create new Data Notebook if reference doesn\'t match with any from existing ones\n
if not data_notebook:\n
  notebook_module = portal.getDefaultModule(portal_type=\'Data Notebook\')\n
  data_notebook = notebook_module.DataNotebookModule_addDataNotebook(\n
    title=title,\n
    reference=reference,\n
    batch_mode=True\n
  )\n
\n
# Add new Data Notebook Line to the Data Notebook\n
data_notebook_line = data_notebook.DataNotebook_addDataNotebookLine(\n
  notebook_code=python_expression,\n
  batch_mode=True\n
)\n
\n
# Get active_process associated with data_notebook object\n
process_id = data_notebook.getProcess()\n
active_process = portal.portal_activities[process_id]\n
# Add a result object to Active Process object\n
result_list = active_process.getResultList()\n
\n
# Get local variables saves in Active Result, local varibales are saved as\n
# persistent mapping object\n
old_local_variable_dict = result_list[0].summary\n
if not old_local_variable_dict:\n
  old_local_variable_dict = context.Base_addLocalVariableDict()\n
\n
# Pass all to code Base_runJupyter external function which would execute the code\n
# and returns a dict of result\n
final_result = context.Base_runJupyter(python_expression, old_local_variable_dict)\n
code_result = final_result[\'result_string\']\n
new_local_variable_dict = final_result[\'local_variable_dict\']\n
ename = final_result[\'ename\']\n
evalue = final_result[\'evalue\']\n
traceback = final_result[\'traceback\']\n
status = final_result[\'status\']\n
mime_type = final_result[\'mime_type\']\n
\n
# Call to function to update persistent mapping object with new local variables\n
# and save the variables in the Active Result pertaining to the current Data Notebook\n
new_dict = context.Base_updateLocalVariableDict(new_local_variable_dict)\n
result_list[0].edit(summary=new_dict)\n
\n
result = {\n
  u\'code_result\': code_result,\n
  u\'ename\': ename,\n
  u\'evalue\': evalue,\n
  u\'traceback\': traceback,\n
  u\'status\': status,\n
  u\'mime_type\': mime_type\n
}\n
\n
# Catch exception while seriaizing the result to be passed to jupyter frontend\n
# and in case of error put code_result as None and status as \'error\' which would\n
# be shown by Jupyter frontend\n
try:\n
  serialized_result = json.dumps(result)\n
except UnicodeDecodeError:\n
  result = {\n
    u\'code_result\': None,\n
    u\'ename\': u\'UnicodeDecodeError\',\n
    u\'evalue\': None,\n
    u\'traceback\': None,\n
    u\'status\': u\'error\'\n
  }\n
  serialized_result = json.dumps(result)\n
\n
data_notebook_line.edit(notebook_code_result=code_result)\n
\n
return serialized_result\n
</string> </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string>python_expression=None, reference=None, title=None, request_reference=False, **kw</string> </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>Base_executeJupyter</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
