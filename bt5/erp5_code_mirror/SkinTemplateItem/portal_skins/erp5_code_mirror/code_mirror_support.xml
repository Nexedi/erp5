<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="DTMLDocument" module="OFS.DTMLDocument"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>code_mirror_support</string> </value>
        </item>
        <item>
            <key> <string>_vars</string> </key>
            <value>
              <dictionary/>
            </value>
        </item>
        <item>
            <key> <string>globals</string> </key>
            <value>
              <dictionary/>
            </value>
        </item>
        <item>
            <key> <string>raw</string> </key>
            <value> <string encoding="cdata"><![CDATA[

<script type="text/javascript" src="&dtml-portal_url;/codemirror/lib/codemirror.js"></script>\n
<link rel="stylesheet" href="&dtml-portal_url;/codemirror/lib/codemirror.css">\n
<script type="text/javascript" src="&dtml-portal_url;/codemirror/mode/&dtml-mode;/&dtml-mode;.js"></script>\n
<script type="text/javascript" src="&dtml-portal_url;/codemirror/addon/cm_edit/matchbrackets.js"></script>\n
\n
<!-- Trailing spaces -->\n
<script type="text/javascript" src="&dtml-portal_url;/codemirror/addon/cm_edit/trailingspace.js"></script>\n
<style type="text/css">\n
  .cm-trailingspace {\n
    background-color: gray;\n
  }\n
</style>\n
\n
<!-- Search addons -->\n
<link rel="stylesheet" href="&dtml-portal_url;/codemirror/addon/dialog/dialog.css">\n
<script type="text/javascript" src="&dtml-portal_url;/codemirror/addon/dialog/dialog.js"></script>\n
<script type="text/javascript" src="&dtml-portal_url;/codemirror/addon/search/searchcursor.js"></script>\n
<script type="text/javascript" src="&dtml-portal_url;/codemirror/addon/search/search.js"></script>\n
\n
<!-- Python autocomplete (Ctrl-Space, see below)\n
     TODO-arnau: Add ERP5 autocompletion?\n
 -->\n
<link rel="stylesheet" href="&dtml-portal_url;/codemirror/addon/hint/show-hint.css">\n
<script src="&dtml-portal_url;/codemirror/addon/hint/show-hint.js"></script>\n
<script src="&dtml-portal_url;/codemirror/addon/hint/anyword-hint.js"></script>\n
\n
<!-- Code folding -->\n
<link rel="stylesheet" href="&dtml-portal_url;/codemirror/addon/fold/foldgutter.css">\n
<script src="&dtml-portal_url;/codemirror/addon/fold/foldcode.js"></script>\n
<script src="&dtml-portal_url;/codemirror/addon/fold/foldgutter.js"></script>\n
<script src="&dtml-portal_url;/codemirror/addon/fold/indent-fold.js"></script>\n
<script src="&dtml-portal_url;/codemirror/addon/fold/comment-fold.js"></script>\n
\n
<!-- Merge -->\n
<link rel="stylesheet" href="&dtml-portal_url;/codemirror/addon/merge/merge.css">\n
<script type="text/javascript" src="&dtml-portal_url;/diff_match_patch/javascript/diff_match_patch_uncompressed.js"></script>\n
<script type="text/javascript" src="&dtml-portal_url;/codemirror/addon/merge/merge.js"></script>\n
\n
<!-- Linter -->\n
<link rel="stylesheet" href="&dtml-portal_url;/codemirror/addon/lint/lint.css">\n
<script type="text/javascript" src="&dtml-portal_url;/codemirror/addon/lint/lint.js"></script>\n
\n
<dtml-if expr="mode == \'javascript\'">\n
<script type="text/javascript" src="&dtml-portal_url;/jshint.js"></script>\n
<script type="text/javascript" src="&dtml-portal_url;/codemirror/addon/lint/javascript-lint.js"></script>\n
<dtml-elif expr="mode == \'css\'">\n
<script type="text/javascript" src="&dtml-portal_url;/csslint.js"></script>\n
<script type="text/javascript" src="&dtml-portal_url;/codemirror/addon/lint/css-lint.js"></script>\n
<dtml-elif expr="mode == \'htmlmixed\'">\n
<script type="text/javascript" src="&dtml-portal_url;/codemirror/mode/xml/xml.js"></script>\n
<script type="text/javascript" src="&dtml-portal_url;/codemirror/mode/javascript/javascript.js"></script>\n
<script type="text/javascript" src="&dtml-portal_url;/codemirror/mode/css/css.js"></script>\n
</dtml-if>\n
\n
<style type="text/css">\n
 .maximize_fullscreen_message {\n
   display: table;\n
   position: absolute;\n
   bottom: 0;\n
   right: 20px;\n
   max-width: 40%;\n
   z-index: 424242;\n
   padding: 10px;\n
   background-color: #DAE6F6;\n
   border: 1px solid #97B0D1;\n
   opacity: 0.3;\n
   cursor: pointer;\n
   font-weight: bold;\n
 }\n
\n
 .maximize_fullscreen_error_message {\n
   background-color: red;\n
 }\n
\n
 .maximize_fullscreen_message > div {\n
   font-size: 14px;\n
   display: table-cell;\n
   vertical-align: middle;\n
 }\n
\n
 #maximize_message {\n
   display: block !important;\n
   position: absolute !important;\n
   bottom: 0 !important;\n
   right: 0px !important;\n
   z-index: 4243 !important;\n
   padding: 10px;\n
   font-size: 16px;\n
   font-weight: bold;\n
   background-color: black;\n
   color: white;\n
 }\n
\n
 .maximize {\n
   position: fixed;\n
   right: 0;\n
   bottom: 0;\n
   top: 0 !important;\n
   left: 0 !important;\n
   z-index: 2 !important;\n
   overflow: hidden !important;\n
 }\n
\n
 .CodeMirror pre, .CodeMirror span {\n
   font-family: monospace !important;\n
 }\n
\n
 /* Workaround for lint icons "multiple" icons hiding "warning/errors" icons\n
    because of "background-color: inherit" defined by erp5, and also to fix\n
    background color of the gutter (cosmetic) */\n
 .CodeMirror-lint-marker-multiple,\n
 .CodeMirror-lint-marker-error,\n
 .CodeMirror-lint-marker-warning,\n
 .CodeMirror-gutters,\n
 .CodeMirror-gutter-elt,\n
 .CodeMirror-sizer {\n
   background-color: transparent !important;\n
 }\n
</style>\n
\n
<!-- TODO: Only supported for ZODB Components -->\n
<dtml-unless bound_names>\n
<input type="button" value="Maximize" onclick="maximize()"\n
       class="editor_action_button" />\n
<input type="button" value="Fullscreen" onclick="switchToFullScreen(cm)"\n
       class="editor_action_button" />\n
\n
<div id="merge" style="height: 100%; width: 100%">\n
  <div id="view" style="display: none;"></div>\n
\n
<dtml-if field_id>\n
<textarea id="&dtml-field_id;" name="&dtml-field_id;" style="display: none;"><dtml-var content html_quote></textarea>\n
</dtml-if>\n
\n
</div>\n
</dtml-unless>\n
\n
<script type="text/javascript">\n
 error_element = $(\'div.input > .error\');\n
 error_arr = [];\n
 warning_element = $(\'div.input > .warning\');\n
 warning_arr = [];\n
 merge_mode_elem = null;\n
\n
 maximize_mode_message = $(\'<span id="maximize_message">Press ESC to leave maximize mode</span>\');\n
\n
 function getTextareaField() {\n
   // When the textarea does not exist yet (eg ERP5Form EditorField)\n
<dtml-if field_id>\n
   textarea = $(\'#&dtml-field_id;\');\n
<dtml-elif textarea_selector>\n
   textarea = $(\'<dtml-var name="textarea_selector">\');\n
<dtml-else>\n
   <dtml-raise NameError>\n
     Either \'textarea_selector\' or \'field_id\' (ID of the textarea field to be\n
     created) must be passed.\n
   </dtml-raise>\n
</dtml-if>\n
  return textarea;\n
 }\n
\n
 function maximizeFullscreenRemoveSaveMessage() {\n
   $(\'.maximize_fullscreen_message\').remove();\n
 }\n
\n
 function updateErrorWarningMessageDivWithJump() {\n
   if(!error_element.length && !warning_element.length)\n
     return;\n
\n
   function getErrorWarningMessageDictHandler(data) {\n
     error_warning_dict = $.parseJSON(data);\n
\n
     function fillMessageElementAndArray(list, elem, arr) {\n
       $.each(list, function(i, dict) {\n
         line = dict[\'line\'];\n
         column = dict[\'column\'];\n
         if(line != null && column != null)\n
         arr.push(\'<a href="#" \' +\n
                  \'   onclick="cm.setCursor(\' + (line - 1) + \', \' + column + \');\' +\n
                                                 \'cm.focus(); event.stopPropagation(); event.preventDefault();">\' +\n
                                                 dict[\'message\'] +\n
                                                 \'</a>\');\n
         else\n
         arr.push(dict[\'message\']);\n
       });\n
\n
       elem.html(arr.join(\'<br />\'));\n
     }\n
\n
     if(error_element.length) {\n
       error_arr.length = 0;\n
       fillMessageElementAndArray(error_warning_dict[\'error_list\'],\n
                                  error_element, error_arr);\n
     }\n
\n
     if(warning_element.length) {\n
       warning_arr.length = 0;\n
       fillMessageElementAndArray(error_warning_dict[\'warning_list\'],\n
                                  warning_element, warning_arr);\n
     }\n
   }\n
\n
   $.ajax({type: \'GET\',\n
           async: false,\n
           url: \'Component_getErrorWarningMessageDictAsJson\',\n
           success: getErrorWarningMessageDictHandler});\n
 }\n
\n
  // Save source code only through an AJAX request\n
 function saveComponentDocument(cm, event) {\n
   event.stopPropagation();\n
   event.preventDefault();\n
   var document_title = document.title;\n
   document.title = "ðŸ’¾ðŸ’¤ " + document_title\n
\n
   clickSaveButton(\'Base_edit\');\n
\n
   /* If the save is successful, then update validation state field (requires\n
    *  validation_state CSS class to be set on the field) and error\n
    * message (requires error CSS class to be set on the field) on the main\n
    * page. If inside maximize/fullscreen mode, display an box with the\n
    * result as well\n
    */\n
   function successHandler(data) {\n
     generateHistorySelectElement();\n
\n
     transition_message = $(\'#transition_message\');\n
     transition_message.css(\'opacity\', 0.0);\n
     transition_message.html(data);\n
     transition_message.animate({opacity: 1.0},\n
                                {duration: 3000, queue: false});\n
\n
     var maximize_fullscreen_message = data;\n
\n
     var validation_state_span = $(\'div.input > .editor_validation_state\');\n
     if(validation_state_span.length) {\n
       // Animate field to emphasize the change\n
       function getTranslatedValidationStateTitleHandler(data) {\n
         validation_state_span.css(\'opacity\', 0.0);\n
         validation_state_span.html(data);\n
         validation_state_span.animate({opacity: 1.0},\n
                                       {duration: 3000, queue: false});\n
       }\n
\n
       $.ajax({type: \'GET\',\n
               url: \'getTranslatedValidationStateTitle\',\n
               success: getTranslatedValidationStateTitleHandler});\n
     }\n
\n
     document.title = "ðŸ’¾âœ” " + document_title\n
     setTimeout(function() {\n
       document.title =  document_title\n
     }, 500);\n
\n
     updateErrorWarningMessageDivWithJump();\n
\n
     // Animate fields to emphasize the change\n
     if(error_element.length) {\n
       error_element.css(\'opacity\', 0.0);\n
       error_element.animate({opacity: 1.0}, {duration: 3000, queue: false});\n
     }\n
\n
     if(warning_element.length) {\n
       warning_element.css(\'opacity\', 0.0);\n
       warning_element.animate({opacity: 1.0}, {duration: 3000, queue: false});\n
     }\n
\n
     if(is_maximized ||\n
        cm.getOption("fullScreen") ||\n
        (document.fullScreenElement && document.fullScreenElement !== null) ||\n
        document.mozFullScreen || document.webkitIsFullScreen) {\n
       var msg_elem_classes = \'maximize_fullscreen_message\';\n
       if(error_arr.length || warning_arr.length) {\n
         maximize_fullscreen_message = (error_arr.join(\'<br />\') + \'<br />\' +\n
                                                       warning_arr.join(\'<br />\'));\n
\n
         msg_elem_classes += \' maximize_fullscreen_error_message\';\n
       }\n
\n
       // Clear previous saving message if any\n
       maximizeFullscreenRemoveSaveMessage();\n
\n
       msg_elem = $(\'<div class="\' + msg_elem_classes + \'"\' +\n
                    \'<div>\' + maximize_fullscreen_message + \'</div></div>\');\n
\n
       $(\'body\').prepend(msg_elem);\n
\n
       function animateMessageComplete() {\n
         if(!error_arr.length && !warning_arr.length)\n
           $(this).remove();\n
         else\n
           $(this).bind(\'click\', function() { $(this).remove() });\n
       }\n
       msg_elem.animate({opacity: 1.0}, 3000, animateMessageComplete);\n
     }\n
   }\n
\n
   function errorHandler(data, textStatus) {\n
     alert(\'Saving failed: \' + textStatus);\n
   }\n
\n
   if(merge_mode_elem)\n
     // TODO: Hack, \'cm\' should work!\n
     getTextareaField().val(merge_mode_elem.edit.getValue());\n
   else\n
     cm.save();\n
\n
   var edit_data = $(\'form#main_form\').serialize();\n
   edit_data += \'&message_only:int=1\';\n
   $.ajax({type: \'POST\',\n
            url: \'Base_edit\',\n
            data: edit_data,\n
            success: successHandler,\n
            error: errorHandler});\n
\n
   return false;\n
 }\n
\n
 function saveZMIDocument(cm, event) {\n
   $(\'input[value="Save Changes"]\').click();\n
   return false;\n
 }\n
\n
 if($(\'input[value="Save Changes"]\').length)\n
   saveDocument = saveZMIDocument;\n
 else\n
   saveDocument = saveComponentDocument;\n
\n
 function switchToFullScreen(cm) {\n
   element = $(\'#merge\')[0];\n
   $(cm.getWrapperElement()).css(\'height\', \'100%\');\n
   if((document.fullScreenElement &&\n
       document.fullScreenElement !== null) ||\n
      (!document.mozFullScreen && !document.webkitIsFullScreen)) {\n
     if (element.requestFullScreen) {\n
       element.requestFullScreen();\n
     }\n
     else if(element.mozRequestFullScreen) {\n
       element.mozRequestFullScreen();\n
     }\n
     else if(element.webkitRequestFullScreen) {\n
       element.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);\n
     }\n
\n
     cm.refresh();\n
    }\n
  }\n
\n
 is_maximized = false;\n
 function maximize() {\n
   document.documentElement.style.overflow = "hidden";\n
   $("#merge").addClass(\'maximize\');\n
\n
   if(merge_mode_elem) {\n
     $("#view").height("100%");\n
\n
     cm_merge_height = $(\'.CodeMirror-merge\').height();\n
     $(\'.CodeMirror-merge\').height("100%");\n
\n
     cm_merge_pane_height = $(\'.CodeMirror-merge-pane\').height();\n
     $(\'.CodeMirror-merge-pane\').height("100%");\n
\n
     cm_height = merge_mode_elem.edit.getWrapperElement().style.height;\n
     merge_mode_elem.edit.getWrapperElement().style.height = "100%";\n
     merge_mode_elem.right.orig.getWrapperElement().style.height = "100%";\n
\n
//     $("#view").height("100%")\n
\n
     merge_mode_elem.edit.refresh();\n
     merge_mode_elem.right.orig.refresh();\n
     merge_mode_elem.edit.focus();\n
   }\n
   else {\n
     wrap = cm.getWrapperElement();\n
     cm_height = wrap.style.height;\n
     wrap.style.height = "100%";\n
     cm.refresh();\n
     cm.focus();\n
   }\n
\n
   $("body").keyup(\n
     function(event) {\n
       if(is_maximized && event.keyCode == 27) {\n
         event.stopPropagation();\n
         event.preventDefault();\n
\n
         document.documentElement.style.overflow = "";\n
         $("#merge").removeClass(\'maximize\');\n
\n
         if(merge_mode_elem) {\n
           $(\'.CodeMirror-merge\').height(cm_merge_height);\n
           $(\'.CodeMirror-merge-pane\').height(cm_merge_pane_height);\n
           $("#view").height("auto");\n
\n
           merge_mode_elem.edit.getWrapperElement().style.height = cm_height;\n
           merge_mode_elem.right.orig.getWrapperElement().style.height = cm_height;\n
\n
           merge_mode_elem.edit.refresh();\n
           merge_mode_elem.right.orig.refresh();\n
\n
           merge_mode_elem.edit.focus();\n
         }\n
         else {\n
           cm.getWrapperElement().style.height = cm_height;\n
           cm.refresh();\n
           cm.focus();\n
         }\n
\n
         is_maximized = false;\n
         maximizeFullscreenRemoveSaveMessage();\n
         return false;\n
       }\n
     });\n
\n
   $(\'body\').prepend(maximize_mode_message);\n
   maximize_mode_message.css(\'opacity\', 1.0);\n
   maximize_mode_message.animate({opacity: 0.25}, 1500,\n
                                 function() { $(this).remove(); });\n
\n
   is_maximized = true;\n
 }\n
\n
 var update_check_text = undefined,\n
     update_check_running = false;\n
 function checkPythonSourceCode(text, updateLinting, options, cm) {\n
   update_check_text = text;\n
   checker_parameters = {code: text};\n
<dtml-if bound_names>\n
   checker_parameters[\'bound_names\'] = <dtml-var name="bound_names">;\n
   checker_parameters[\'params\'] = $(\'input[name="params"]\').val();\n
</dtml-if>\n
   if (update_check_running === false) {\n
     update_check_running = true;\n
     $.post(\n
       \'&dtml-portal_url;/ERP5Site_checkPythonSourceCodeAsJSON\',\n
       {\'data\': JSON.stringify(checker_parameters)},\n
        function(data){\n
          var messages = data.annotations;\n
          var found = [];\n
          update_check_running = false;\n
          for(var i = 0; i < messages.length; i++) {\n
            message = messages[i];\n
            found.push({\n
              from: CodeMirror.Pos(message.row, message.column - 1),\n
              to: CodeMirror.Pos(message.row, message.column),\n
              message: message.text,\n
              severity: message.type\n
            });\n
          }\n
\n
          updateLinting(cm, found);\n
          if (update_check_text !== text) {\n
            checkPythonSourceCode(update_check_text, updateLinting, options, cm);\n
          }\n
     });\n
   }\n
 }\n
\n
 var mode = "&dtml-mode;";\n
 if ( mode === "sql" ) {\n
   mode = "text/x-mariadb";\n
 }\n
\n
<dtml-if expr="mode == \'python\'">\n
 lint_option = {"getAnnotations": checkPythonSourceCode,\n
                "async": true};\n
<dtml-elif expr="mode in (\'css\', \'javascript\')">\n
 lint_option = true;\n
<dtml-else>\n
 lint_option = false;\n
</dtml-if>\n
\n
 // CodeMirror expects a DOM element, not a JQuery Object\n
 var cm = CodeMirror.fromTextArea(\n
   getTextareaField()[0],\n
   {mode: mode,\n
    lineNumbers: true,\n
    showTrailingSpace: true,\n
    tabSize: 2,\n
    indentWithTabs: false,\n
    matchBrackets: true,\n
    extraKeys: {"Ctrl-Space": "autocomplete",\n
                "Ctrl-Q": function(cm){cm.foldCode(cm.getCursor());},\n
                "Tab": function(cm) {\n
                  // We want to insert spaces, not tab, and we also want to keep the behaviour of indenting selection.\n
                  if (cm.getSelection()) {\n
                    return cm.execCommand("defaultTab");\n
                  }\n
                  var spaces = Array(cm.getOption("indentUnit") + 1).join(" ");\n
                  cm.replaceSelection(spaces);\n
                },\n
                "Ctrl-S": function(cm){saveDocument(cm, $.Event(\'click\'))}},\n
    foldGutter: true,\n
    lineWrapping: true,\n
    gutters: ["CodeMirror-lint-markers",\n
              "CodeMirror-linenumbers",\n
              "CodeMirror-foldgutter"],\n
    lint: lint_option\n
    });\n
 //cm.foldCode(CodeMirror.Pos(8, 0));\n
 var parent_height = getTextareaField()[0].parentNode.clientHeight\n
 if(parent_height !== undefined && parent_height > (300 * 0.8)) {\n
   cm.setSize(undefined, parent_height);\n
 }\n
\n
 updateErrorWarningMessageDivWithJump();\n
\n
 // When hovering editor element with the mouse, seeing the title of the field is annoying...\n
 $(cm.getWrapperElement()).parents(\'.field\').removeAttr(\'title\');\n
\n
 if(typeof document.cancelFullScreen != \'undefined\' ||\n
    (typeof document.mozFullScreenEnabled != \'undefined\' &&\n
     document.mozFullScreenEnabled) ||\n
    typeof document.webkitCancelFullScreen != \'undefined\') {\n
   $(document).bind(\'webkitfullscreenchange mozfullscreenchange fullscreenchange\',\n
                    maximizeFullscreenRemoveSaveMessage);\n
 }\n
\n
 function displayLoadSourceCodeMessage() {\n
   // TODO: Improve message\n
   message = $(\'<span id="maximize_message">Loaded source code</span>\');\n
   $(\'body\').prepend(message);\n
   message.css(\'opacity\', 1.0);\n
   message.animate({opacity: 0.25}, 1500,\n
                   function() { $(this).remove(); });\n
 }\n
\n
 function enterMerge(data) {\n
   $("#view").show();\n
   target = $("#view")[0];\n
   target.innerHTML = "";\n
   merge_mode_elem = CodeMirror.MergeView(\n
     target,\n
     {value: cm.getValue(),\n
      orig: data,\n
      highlightDifferences: true,\n
      mode: mode,\n
      lineNumbers: true,\n
      showTrailingSpace: true,\n
      matchBrackets: true,\n
      extraKeys: {"Ctrl-Space": "autocomplete",\n
                  "Ctrl-Q": function(cm){cm.foldCode(cm.getCursor());},\n
                  "Ctrl-S": function(cm){saveDocument(merge_mode_elem.edit, $.Event(\'click\'))}},\n
      foldGutter: true,\n
      lineWrapping: true,\n
      gutters: ["CodeMirror-lint-markers",\n
                "CodeMirror-linenumbers",\n
                "CodeMirror-foldgutter"],\n
      lint: lint_option});\n
\n
   $("#merge").keyup(\n
     function(event) {\n
       if(!is_maximized && event.keyCode == 27) {\n
         event.stopPropagation();\n
         event.preventDefault();\n
\n
         $(\'#history_select_right\').find(\'option[value=""]\').attr("selected", true);\n
         leaveMerge();\n
       }\n
     });\n
\n
   $(cm.getWrapperElement()).hide();\n
   if(is_maximized)\n
     maximize();\n
 }\n
\n
 function leaveMerge() {\n
   $("#view").hide();\n
   $(cm.getWrapperElement()).show();\n
   cm.refresh();\n
   cm.setValue(merge_mode_elem.edit.getValue());\n
   cm.save();\n
   cm.focus();\n
\n
   target = $("#view")[0];\n
   target.innerHTML = "";\n
\n
   merge_mode_elem = null;\n
\n
   if(is_maximized)\n
     maximize();\n
 }\n
\n
 function generateHistorySelectElement() {\n
   function successHandler(data) {\n
     container_elem = $(\'#history_select_container\');\n
     if(container_elem.length == 0)\n
       {\n
         right_selected_value = null;\n
         container_elem = $(\'<p style="margin: 0; padding: 0;" id="history_select_container"></p>\');\n
       }\n
     else\n
       {\n
         right_selected_value = $(\'#history_select_right\').val();\n
         container_elem.empty();\n
       }\n
\n
     for(var i = 0; i < 2; i++)\n
     {\n
       var is_right = (i == 1);\n
       if(is_right)\n
         attrs = \'id="history_select_right" style="float: right"\'\n
       else\n
         attrs = \'id="history_select_left" style="float: left"\'\n
\n
       select_revision_element = $(\n
         "<select class=\'editor_action_button\' " + attrs + "></select>");\n
\n
       if(is_right)\n
         select_revision_element.append($("<option value=\'\'></option>"));\n
\n
       $.each(\n
         data,\n
         function(j, d) {\n
           select_revision_element.append(\n
             $("<option value=\'" + d[\'key\'] + "\' " +\n
               (is_right && d[\'key\'] == right_selected_value ? "selected=\'selected\'" : "")\n
               + ">" + j + ": " +\n
               new Date(d[\'time\'] * 1000).toString() + " (" + d[\'user_name\'] + ")" +\n
               "</option>"));\n
         });\n
\n
       function selectHistoryTextContent(event) {\n
         function loadTextContent(data) {\n
           cm.setValue(data);\n
           cm.save();\n
\n
           if(merge_mode_elem) {\n
             merge_mode_elem.edit.setValue(data);\n
             merge_mode_elem.edit.refresh();\n
             merge_mode_elem.right.orig.refresh();\n
           }\n
\n
           displayLoadSourceCodeMessage();\n
         }\n
\n
         // TODO: failure\n
         $.ajax({type: \'GET\',\n
                 async: true,\n
                 dataType: \'text\',\n
                 data: {key: this.value},\n
                 url: \'getTextContentHistory\',\n
                 success: loadTextContent});\n
       }\n
\n
       function selectHistoryTextContentMerge(event) {\n
         function loadTextContent(data) {\n
           if(merge_mode_elem) {\n
             merge_mode_elem.right.orig.setValue(data);\n
             merge_mode_elem.edit.refresh();\n
             merge_mode_elem.right.orig.refresh();\n
           }\n
           else\n
             enterMerge(data);\n
\n
           displayLoadSourceCodeMessage();\n
         }\n
\n
         if(!this.value)\n
           leaveMerge();\n
         else\n
           // TODO: failure\n
           $.ajax({type: \'GET\',\n
                   async: true,\n
                   dataType: \'text\',\n
                   data: {key: this.value},\n
                   url: \'getTextContentHistory\',\n
                   success: loadTextContent});\n
       }\n
\n
       if(!is_right)\n
         select_revision_element.bind(\'change\', selectHistoryTextContent);\n
       else\n
         select_revision_element.bind(\'change\', selectHistoryTextContentMerge);\n
\n
       select_revision_element.appendTo(container_elem);\n
     }\n
\n
     container_elem.append($(\'<div style="clear: both;"></div>\'));\n
     container_elem.prependTo($(\'#merge\'));\n
   }\n
\n
  $.ajax({type: \'GET\',\n
         async: true,\n
         dataType: \'json\',\n
         url: \'Component_getTextContentHistoryRevisionDictListAsJSON\',\n
         success: successHandler});\n
 }\n
\n
<dtml-unless bound_names>\n
 <!-- TODO: Not supported for Python Scripts yet -->\n
 generateHistorySelectElement();\n
</dtml-unless>\n
</script>\n


]]></string> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
