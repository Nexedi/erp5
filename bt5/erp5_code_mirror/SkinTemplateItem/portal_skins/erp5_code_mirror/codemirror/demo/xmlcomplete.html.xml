<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="ZopePageTemplate" module="Products.PageTemplates.ZopePageTemplate"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_text</string> </key>
            <value> <unicode encoding="cdata"><![CDATA[

ï»¿<!doctype html>\n
\n
<title>CodeMirror: XML Autocomplete Demo</title>\n
<meta charset="utf-8"/>\n
<link rel=stylesheet href="../doc/docs.css">\n
\n
<link rel="stylesheet" href="../lib/codemirror.css">\n
<link rel="stylesheet" href="../addon/hint/show-hint.css">\n
<script src="../lib/codemirror.js"></script>\n
<script src="../addon/hint/show-hint.js"></script>\n
<script src="../addon/hint/xml-hint.js"></script>\n
<script src="../mode/xml/xml.js"></script>\n
<style type="text/css">\n
      .CodeMirror { border: 1px solid #eee; }\n
    </style>\n
<div id=nav>\n
  <a href="http://codemirror.net"><h1>CodeMirror</h1><img id=logo src="../doc/logo.png"></a>\n
\n
  <ul>\n
    <li><a href="../index.html">Home</a>\n
    <li><a href="../doc/manual.html">Manual</a>\n
    <li><a href="https://github.com/codemirror/codemirror">Code</a>\n
  </ul>\n
  <ul>\n
    <li><a class=active href="#">XML Autocomplete</a>\n
  </ul>\n
</div>\n
\n
<article>\n
<h2>XML Autocomplete Demo</h2>\n
<form><textarea id="code" name="code"><!-- write some xml below -->\n
</textarea></form>\n
\n
    <p>Press <strong>ctrl-space</strong>, or type a \'&lt;\' character to\n
    activate autocompletion. This demo defines a simple schema that\n
    guides completion. The schema can be customizedâsee\n
    the <a href="../doc/manual.html#addon_xml-hint">manual</a>.</p>\n
\n
    <p>Development of the <code>xml-hint</code> addon was kindly\n
    sponsored\n
    by <a href="http://www.xperiment.mobi">www.xperiment.mobi</a>.</p>\n
\n
    <script>\n
      var dummy = {\n
        attrs: {\n
          color: ["red", "green", "blue", "purple", "white", "black", "yellow"],\n
          size: ["large", "medium", "small"],\n
          description: null\n
        },\n
        children: []\n
      };\n
\n
      var tags = {\n
        "!top": ["top"],\n
        "!attrs": {\n
          id: null,\n
          class: ["A", "B", "C"]\n
        },\n
        top: {\n
          attrs: {\n
            lang: ["en", "de", "fr", "nl"],\n
            freeform: null\n
          },\n
          children: ["animal", "plant"]\n
        },\n
        animal: {\n
          attrs: {\n
            name: null,\n
            isduck: ["yes", "no"]\n
          },\n
          children: ["wings", "feet", "body", "head", "tail"]\n
        },\n
        plant: {\n
          attrs: {name: null},\n
          children: ["leaves", "stem", "flowers"]\n
        },\n
        wings: dummy, feet: dummy, body: dummy, head: dummy, tail: dummy,\n
        leaves: dummy, stem: dummy, flowers: dummy\n
      };\n
\n
      function completeAfter(cm, pred) {\n
        var cur = cm.getCursor();\n
        if (!pred || pred()) setTimeout(function() {\n
          if (!cm.state.completionActive)\n
            cm.showHint({completeSingle: false});\n
        }, 100);\n
        return CodeMirror.Pass;\n
      }\n
\n
      function completeIfAfterLt(cm) {\n
        return completeAfter(cm, function() {\n
          var cur = cm.getCursor();\n
          return cm.getRange(CodeMirror.Pos(cur.line, cur.ch - 1), cur) == "<";\n
        });\n
      }\n
\n
      function completeIfInTag(cm) {\n
        return completeAfter(cm, function() {\n
          var tok = cm.getTokenAt(cm.getCursor());\n
          if (tok.type == "string" && (!/[\'"]/.test(tok.string.charAt(tok.string.length - 1)) || tok.string.length == 1)) return false;\n
          var inner = CodeMirror.innerMode(cm.getMode(), tok.state).state;\n
          return inner.tagName;\n
        });\n
      }\n
\n
      var editor = CodeMirror.fromTextArea(document.getElementById("code"), {\n
        mode: "xml",\n
        lineNumbers: true,\n
        extraKeys: {\n
          "\'<\'": completeAfter,\n
          "\'/\'": completeIfAfterLt,\n
          "\' \'": completeIfInTag,\n
          "\'=\'": completeIfInTag,\n
          "Ctrl-Space": "autocomplete"\n
        },\n
        hintOptions: {schemaInfo: tags}\n
      });\n
    </script>\n
  </article>

]]></unicode> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>text/html</string> </value>
        </item>
        <item>
            <key> <string>expand</string> </key>
            <value> <int>0</int> </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>xmlcomplete.html</string> </value>
        </item>
        <item>
            <key> <string>output_encoding</string> </key>
            <value> <string>iso-8859-15</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
