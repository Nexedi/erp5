<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="ZopePageTemplate" module="Products.PageTemplates.ZopePageTemplate"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_text</string> </key>
            <value> <unicode encoding="cdata"><![CDATA[

<!doctype html>\n
\n
<title>CodeMirror: Mode Runner Demo</title>\n
<meta charset="utf-8"/>\n
<link rel=stylesheet href="../doc/docs.css">\n
\n
<link rel="stylesheet" href="../lib/codemirror.css">\n
<script src="../lib/codemirror.js"></script>\n
<script src="../addon/runmode/runmode.js"></script>\n
<script src="../mode/xml/xml.js"></script>\n
<div id=nav>\n
  <a href="http://codemirror.net"><h1>CodeMirror</h1><img id=logo src="../doc/logo.png"></a>\n
\n
  <ul>\n
    <li><a href="../index.html">Home</a>\n
    <li><a href="../doc/manual.html">Manual</a>\n
    <li><a href="https://github.com/codemirror/codemirror">Code</a>\n
  </ul>\n
  <ul>\n
    <li><a class=active href="#">Mode Runner</a>\n
  </ul>\n
</div>\n
\n
<article>\n
<h2>Mode Runner Demo</h2>\n
\n
\n
    <textarea id="code" style="width: 90%; height: 7em; border: 1px solid black; padding: .2em .4em;">\n
<foobar>\n
  <blah>Enter your xml here and press the button below to display\n
    it as highlighted by the CodeMirror XML mode</blah>\n
  <tag2 foo="2" bar="&amp;quot;bar&amp;quot;"/>\n
</foobar></textarea><br>\n
    <button onclick="doHighlight();">Highlight!</button>\n
    <pre id="output" class="cm-s-default"></pre>\n
\n
    <script>\n
function doHighlight() {\n
  CodeMirror.runMode(document.getElementById("code").value, "application/xml",\n
                     document.getElementById("output"));\n
}\n
</script>\n
\n
    <p>Running a CodeMirror mode outside of the editor.\n
    The <code>CodeMirror.runMode</code> function, defined\n
    in <code><a href="../addon/runmode/runmode.js">addon/runmode/runmode.js</a></code> takes the following arguments:</p>\n
\n
    <dl>\n
      <dt><code>text (string)</code></dt>\n
      <dd>The document to run through the highlighter.</dd>\n
      <dt><code>mode (<a href="../doc/manual.html#option_mode">mode spec</a>)</code></dt>\n
      <dd>The mode to use (must be loaded as normal).</dd>\n
      <dt><code>output (function or DOM node)</code></dt>\n
      <dd>If this is a function, it will be called for each token with\n
      two arguments, the token\'s text and the token\'s style class (may\n
      be <code>null</code> for unstyled tokens). If it is a DOM node,\n
      the tokens will be converted to <code>span</code> elements as in\n
      an editor, and inserted into the node\n
      (through <code>innerHTML</code>).</dd>\n
    </dl>\n
\n
  </article>

]]></unicode> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>text/html</string> </value>
        </item>
        <item>
            <key> <string>expand</string> </key>
            <value> <int>0</int> </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>runmode.html</string> </value>
        </item>
        <item>
            <key> <string>output_encoding</string> </key>
            <value> <string>iso-8859-15</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
