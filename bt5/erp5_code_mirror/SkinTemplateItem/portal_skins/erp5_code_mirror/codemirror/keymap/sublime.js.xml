<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604368.35</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>sublime.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
// A rough approximation of Sublime Text\'s keybindings\n
// Depends on addon/search/searchcursor.js and optionally addon/dialog/dialogs.js\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../lib/codemirror"), require("../addon/search/searchcursor"), require("../addon/cm_edit/matchbrackets"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../lib/codemirror", "../addon/search/searchcursor", "../addon/cm_edit/matchbrackets"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
  "use strict";\n
\n
  var map = CodeMirror.keyMap.sublime = {fallthrough: "default"};\n
  var cmds = CodeMirror.commands;\n
  var Pos = CodeMirror.Pos;\n
  var mac = CodeMirror.keyMap["default"] == CodeMirror.keyMap.macDefault;\n
  var ctrl = mac ? "Cmd-" : "Ctrl-";\n
\n
  // This is not exactly Sublime\'s algorithm. I couldn\'t make heads or tails of that.\n
  function findPosSubword(doc, start, dir) {\n
    if (dir < 0 && start.ch == 0) return doc.clipPos(Pos(start.line - 1));\n
    var line = doc.getLine(start.line);\n
    if (dir > 0 && start.ch >= line.length) return doc.clipPos(Pos(start.line + 1, 0));\n
    var state = "start", type;\n
    for (var pos = start.ch, e = dir < 0 ? 0 : line.length, i = 0; pos != e; pos += dir, i++) {\n
      var next = line.charAt(dir < 0 ? pos - 1 : pos);\n
      var cat = next != "_" && CodeMirror.isWordChar(next) ? "w" : "o";\n
      if (cat == "w" && next.toUpperCase() == next) cat = "W";\n
      if (state == "start") {\n
        if (cat != "o") { state = "in"; type = cat; }\n
      } else if (state == "in") {\n
        if (type != cat) {\n
          if (type == "w" && cat == "W" && dir < 0) pos--;\n
          if (type == "W" && cat == "w" && dir > 0) { type = "w"; continue; }\n
          break;\n
        }\n
      }\n
    }\n
    return Pos(start.line, pos);\n
  }\n
\n
  function moveSubword(cm, dir) {\n
    cm.extendSelectionsBy(function(range) {\n
      if (cm.display.shift || cm.doc.extend || range.empty())\n
        return findPosSubword(cm.doc, range.head, dir);\n
      else\n
        return dir < 0 ? range.from() : range.to();\n
    });\n
  }\n
\n
  cmds[map["Alt-Left"] = "goSubwordLeft"] = function(cm) { moveSubword(cm, -1); };\n
  cmds[map["Alt-Right"] = "goSubwordRight"] = function(cm) { moveSubword(cm, 1); };\n
\n
  var scrollLineCombo = mac ? "Ctrl-Alt-" : "Ctrl-";\n
\n
  cmds[map[scrollLineCombo + "Up"] = "scrollLineUp"] = function(cm) {\n
    var info = cm.getScrollInfo();\n
    if (!cm.somethingSelected()) {\n
      var visibleBottomLine = cm.lineAtHeight(info.top + info.clientHeight, "local");\n
      if (cm.getCursor().line >= visibleBottomLine)\n
        cm.execCommand("goLineUp");\n
    }\n
    cm.scrollTo(null, info.top - cm.defaultTextHeight());\n
  };\n
  cmds[map[scrollLineCombo + "Down"] = "scrollLineDown"] = function(cm) {\n
    var info = cm.getScrollInfo();\n
    if (!cm.somethingSelected()) {\n
      var visibleTopLine = cm.lineAtHeight(info.top, "local")+1;\n
      if (cm.getCursor().line <= visibleTopLine)\n
        cm.execCommand("goLineDown");\n
    }\n
    cm.scrollTo(null, info.top + cm.defaultTextHeight());\n
  };\n
\n
  cmds[map["Shift-" + ctrl + "L"] = "splitSelectionByLine"] = function(cm) {\n
    var ranges = cm.listSelections(), lineRanges = [];\n
    for (var i = 0; i < ranges.length; i++) {\n
      var from = ranges[i].from(), to = ranges[i].to();\n
      for (var line = from.line; line <= to.line; ++line)\n
        if (!(to.line > from.line && line == to.line && to.ch == 0))\n
          lineRanges.push({anchor: line == from.line ? from : Pos(line, 0),\n
                           head: line == to.line ? to : Pos(line)});\n
    }\n
    cm.setSelections(lineRanges, 0);\n
  };\n
\n
  map["Shift-Tab"] = "indentLess";\n
\n
  cmds[map["Esc"] = "singleSelectionTop"] = function(cm) {\n
    var range = cm.listSelections()[0];\n
    cm.setSelection(range.anchor, range.head, {scroll: false});\n
  };\n
\n
  cmds[map[ctrl + "L"] = "selectLine"] = function(cm) {\n
    var ranges = cm.listSelections(), extended = [];\n
    for (var i = 0; i < ranges.length; i++) {\n
      var range = ranges[i];\n
      extended.push({anchor: Pos(range.from().line, 0),\n
                     head: Pos(range.to().line + 1, 0)});\n
    }\n
    cm.setSelections(extended);\n
  };\n
\n
  map["Shift-Ctrl-K"] = "deleteLine";\n
\n
  function insertLine(cm, above) {\n
    if (cm.isReadOnly()) return CodeMirror.Pass\n
    cm.operation(function() {\n
      var len = cm.listSelections().length, newSelection = [], last = -1;\n
      for (var i = 0; i < len; i++) {\n
        var head = cm.listSelections()[i].head;\n
        if (head.line <= last) continue;\n
        var at = Pos(head.line + (above ? 0 : 1), 0);\n
        cm.replaceRange("\\n", at, null, "+insertLine");\n
        cm.indentLine(at.line, null, true);\n
        newSelection.push({head: at, anchor: at});\n
        last = head.line + 1;\n
      }\n
      cm.setSelections(newSelection);\n
    });\n
  }\n
\n
  cmds[map[ctrl + "Enter"] = "insertLineAfter"] = function(cm) { return insertLine(cm, false); };\n
\n
  cmds[map["Shift-" + ctrl + "Enter"] = "insertLineBefore"] = function(cm) { return insertLine(cm, true); };\n
\n
  function wordAt(cm, pos) {\n
    var start = pos.ch, end = start, line = cm.getLine(pos.line);\n
    while (start && CodeMirror.isWordChar(line.charAt(start - 1))) --start;\n
    while (end < line.length && CodeMirror.isWordChar(line.charAt(end))) ++end;\n
    return {from: Pos(pos.line, start), to: Pos(pos.line, end), word: line.slice(start, end)};\n
  }\n
\n
  cmds[map[ctrl + "D"] = "selectNextOccurrence"] = function(cm) {\n
    var from = cm.getCursor("from"), to = cm.getCursor("to");\n
    var fullWord = cm.state.sublimeFindFullWord == cm.doc.sel;\n
    if (CodeMirror.cmpPos(from, to) == 0) {\n
      var word = wordAt(cm, from);\n
      if (!word.word) return;\n
      cm.setSelection(word.from, word.to);\n
      fullWord = true;\n
    } else {\n
      var text = cm.getRange(from, to);\n
      var query = fullWord ? new RegExp("\\\\b" + text + "\\\\b") : text;\n
      var cur = cm.getSearchCursor(query, to);\n
      if (cur.findNext()) {\n
        cm.addSelection(cur.from(), cur.to());\n
      } else {\n
        cur = cm.getSearchCursor(query, Pos(cm.firstLine(), 0));\n
        if (cur.findNext())\n
          cm.addSelection(cur.from(), cur.to());\n
      }\n
    }\n
    if (fullWord)\n
      cm.state.sublimeFindFullWord = cm.doc.sel;\n
  };\n
\n
  var mirror = "(){}[]";\n
  function selectBetweenBrackets(cm) {\n
    var pos = cm.getCursor(), opening = cm.scanForBracket(pos, -1);\n
    if (!opening) return;\n
    for (;;) {\n
      var closing = cm.scanForBracket(pos, 1);\n
      if (!closing) return;\n
      if (closing.ch == mirror.charAt(mirror.indexOf(opening.ch) + 1)) {\n
        cm.setSelection(Pos(opening.pos.line, opening.pos.ch + 1), closing.pos, false);\n
        return true;\n
      }\n
      pos = Pos(closing.pos.line, closing.pos.ch + 1);\n
    }\n
  }\n
\n
  cmds[map["Shift-" + ctrl + "Space"] = "selectScope"] = function(cm) {\n
    selectBetweenBrackets(cm) || cm.execCommand("selectAll");\n
  };\n
  cmds[map["Shift-" + ctrl + "M"] = "selectBetweenBrackets"] = function(cm) {\n
    if (!selectBetweenBrackets(cm)) return CodeMirror.Pass;\n
  };\n
\n
  cmds[map[ctrl + "M"] = "goToBracket"] = function(cm) {\n
    cm.extendSelectionsBy(function(range) {\n
      var next = cm.scanForBracket(range.head, 1);\n
      if (next && CodeMirror.cmpPos(next.pos, range.head) != 0) return next.pos;\n
      var prev = cm.scanForBracket(range.head, -1);\n
      return prev && Pos(prev.pos.line, prev.pos.ch + 1) || range.head;\n
    });\n
  };\n
\n
  var swapLineCombo = mac ? "Cmd-Ctrl-" : "Shift-Ctrl-";\n
\n
  cmds[map[swapLineCombo + "Up"] = "swapLineUp"] = function(cm) {\n
    if (cm.isReadOnly()) return CodeMirror.Pass\n
    var ranges = cm.listSelections(), linesToMove = [], at = cm.firstLine() - 1, newSels = [];\n
    for (var i = 0; i < ranges.length; i++) {\n
      var range = ranges[i], from = range.from().line - 1, to = range.to().line;\n
      newSels.push({anchor: Pos(range.anchor.line - 1, range.anchor.ch),\n
                    head: Pos(range.head.line - 1, range.head.ch)});\n
      if (range.to().ch == 0 && !range.empty()) --to;\n
      if (from > at) linesToMove.push(from, to);\n
      else if (linesToMove.length) linesToMove[linesToMove.length - 1] = to;\n
      at = to;\n
    }\n
    cm.operation(function() {\n
      for (var i = 0; i < linesToMove.length; i += 2) {\n
        var from = linesToMove[i], to = linesToMove[i + 1];\n
        var line = cm.getLine(from);\n
        cm.replaceRange("", Pos(from, 0), Pos(from + 1, 0), "+swapLine");\n
        if (to > cm.lastLine())\n
          cm.replaceRange("\\n" + line, Pos(cm.lastLine()), null, "+swapLine");\n
        else\n
          cm.replaceRange(line + "\\n", Pos(to, 0), null, "+swapLine");\n
      }\n
      cm.setSelections(newSels);\n
      cm.scrollIntoView();\n
    });\n
  };\n
\n
  cmds[map[swapLineCombo + "Down"] = "swapLineDown"] = function(cm) {\n
    if (cm.isReadOnly()) return CodeMirror.Pass\n
    var ranges = cm.listSelections(), linesToMove = [], at = cm.lastLine() + 1;\n
    for (var i = ranges.length - 1; i >= 0; i--) {\n
      var range = ranges[i], from = range.to().line + 1, to = range.from().line;\n
      if (range.to().ch == 0 && !range.empty()) from--;\n
      if (from < at) linesToMove.push(from, to);\n
      else if (linesToMove.length) linesToMove[linesToMove.length - 1] = to;\n
      at = to;\n
    }\n
    cm.operation(function() {\n
      for (var i = linesToMove.length - 2; i >= 0; i -= 2) {\n
        var from = linesToMove[i], to = linesToMove[i + 1];\n
        var line = cm.getLine(from);\n
        if (from == cm.lastLine())\n
          cm.replaceRange("", Pos(from - 1), Pos(from), "+swapLine");\n
        else\n
          cm.replaceRange("", Pos(from, 0), Pos(from + 1, 0), "+swapLine");\n
        cm.replaceRange(line + "\\n", Pos(to, 0), null, "+swapLine");\n
      }\n
      cm.scrollIntoView();\n
    });\n
  };\n
\n
  cmds[map[ctrl + "/"] = "toggleCommentIndented"] = function(cm) {\n
    cm.toggleComment({ indent: true });\n
  }\n
\n
  cmds[map[ctrl + "J"] = "joinLines"] = function(cm) {\n
    var ranges = cm.listSelections(), joined = [];\n
    for (var i = 0; i < ranges.length; i++) {\n
      var range = ranges[i], from = range.from();\n
      var start = from.line, end = range.to().line;\n
      while (i < ranges.length - 1 && ranges[i + 1].from().line == end)\n
        end = ranges[++i].to().line;\n
      joined.push({start: start, end: end, anchor: !range.empty() && from});\n
    }\n
    cm.operation(function() {\n
      var offset = 0, ranges = [];\n
      for (var i = 0; i < joined.length; i++) {\n
        var obj = joined[i];\n
        var anchor = obj.anchor && Pos(obj.anchor.line - offset, obj.anchor.ch), head;\n
        for (var line = obj.start; line <= obj.end; line++) {\n
          var actual = line - offset;\n
          if (line == obj.end) head = Pos(actual, cm.getLine(actual).length + 1);\n
          if (actual < cm.lastLine()) {\n
            cm.replaceRange(" ", Pos(actual), Pos(actual + 1, /^\\s*/.exec(cm.getLine(actual + 1))[0].length));\n
            ++offset;\n
          }\n
        }\n
        ranges.push({anchor: anchor || head, head: head});\n
      }\n
      cm.setSelections(ranges, 0);\n
    });\n
  };\n
\n
  cmds[map["Shift-" + ctrl + "D"] = "duplicateLine"] = function(cm) {\n
    cm.operation(function() {\n
      var rangeCount = cm.listSelections().length;\n
      for (var i = 0; i < rangeCount; i++) {\n
        var range = cm.listSelections()[i];\n
        if (range.empty())\n
          cm.replaceRange(cm.getLine(range.head.line) + "\\n", Pos(range.head.line, 0));\n
        else\n
          cm.replaceRange(cm.getRange(range.from(), range.to()), range.from());\n
      }\n
      cm.scrollIntoView();\n
    });\n
  };\n
\n
  map[ctrl + "T"] = "transposeChars";\n
\n
  function sortLines(cm, caseSensitive) {\n
    if (cm.isReadOnly()) return CodeMirror.Pass\n
    var ranges = cm.listSelections(), toSort = [], selected;\n
    for (var i = 0; i < ranges.length; i++) {\n
      var range = ranges[i];\n
      if (range.empty()) continue;\n
      var from = range.from().line, to = range.to().line;\n
      while (i < ranges.length - 1 && ranges[i + 1].from().line == to)\n
        to = range[++i].to().line;\n
      toSort.push(from, to);\n
    }\n
    if (toSort.length) selected = true;\n
    else toSort.push(cm.firstLine(), cm.lastLine());\n
\n
    cm.operation(function() {\n
      var ranges = [];\n
      for (var i = 0; i < toSort.length; i += 2) {\n
        var from = toSort[i], to = toSort[i + 1];\n
        var start = Pos(from, 0), end = Pos(to);\n
        var lines = cm.getRange(start, end, false);\n
        if (caseSensitive)\n
          lines.sort();\n
        else\n
          lines.sort(function(a, b) {\n
            var au = a.toUpperCase(), bu = b.toUpperCase();\n
            if (au != bu) { a = au; b = bu; }\n
            return a < b ? -1 : a == b ? 0 : 1;\n
          });\n
        cm.replaceRange(lines, start, end);\n
        if (selected) ranges.push({anchor: start, head: end});\n
      }\n
      if (selected) cm.setSelections(ranges, 0);\n
    });\n
  }\n
\n
  cmds[map["F9"] = "sortLines"] = function(cm) { sortLines(cm, true); };\n
  cmds[map[ctrl + "F9"] = "sortLinesInsensitive"] = function(cm) { sortLines(cm, false); };\n
\n
  cmds[map["F2"] = "nextBookmark"] = function(cm) {\n
    var marks = cm.state.sublimeBookmarks;\n
    if (marks) while (marks.length) {\n
      var current = marks.shift();\n
      var found = current.find();\n
      if (found) {\n
        marks.push(current);\n
        return cm.setSelection(found.from, found.to);\n
      }\n
    }\n
  };\n
\n
  cmds[map["Shift-F2"] = "prevBookmark"] = function(cm) {\n
    var marks = cm.state.sublimeBookmarks;\n
    if (marks) while (marks.length) {\n
      marks.unshift(marks.pop());\n
      var found = marks[marks.length - 1].find();\n
      if (!found)\n
        marks.pop();\n
      else\n
        return cm.setSelection(found.from, found.to);\n
    }\n
  };\n
\n
  cmds[map[ctrl + "F2"] = "toggleBookmark"] = function(cm) {\n
    var ranges = cm.listSelections();\n
    var marks = cm.state.sublimeBookmarks || (cm.state.sublimeBookmarks = []);\n
    for (var i = 0; i < ranges.length; i++) {\n
      var from = ranges[i].from(), to = ranges[i].to();\n
      var found = cm.findMarks(from, to);\n
      for (var j = 0; j < found.length; j++) {\n
        if (found[j].sublimeBookmark) {\n
          found[j].clear();\n
          for (var k = 0; k < marks.length; k++)\n
            if (marks[k] == found[j])\n
              marks.splice(k--, 1);\n
          break;\n
        }\n
      }\n
      if (j == found.length)\n
        marks.push(cm.markText(from, to, {sublimeBookmark: true, clearWhenEmpty: false}));\n
    }\n
  };\n
\n
  cmds[map["Shift-" + ctrl + "F2"] = "clearBookmarks"] = function(cm) {\n
    var marks = cm.state.sublimeBookmarks;\n
    if (marks) for (var i = 0; i < marks.length; i++) marks[i].clear();\n
    marks.length = 0;\n
  };\n
\n
  cmds[map["Alt-F2"] = "selectBookmarks"] = function(cm) {\n
    var marks = cm.state.sublimeBookmarks, ranges = [];\n
    if (marks) for (var i = 0; i < marks.length; i++) {\n
      var found = marks[i].find();\n
      if (!found)\n
        marks.splice(i--, 0);\n
      else\n
        ranges.push({anchor: found.from, head: found.to});\n
    }\n
    if (ranges.length)\n
      cm.setSelections(ranges, 0);\n
  };\n
\n
  map["Alt-Q"] = "wrapLines";\n
\n
  var cK = ctrl + "K ";\n
\n
  function modifyWordOrSelection(cm, mod) {\n
    cm.operation(function() {\n
      var ranges = cm.listSelections(), indices = [], replacements = [];\n
      for (var i = 0; i < ranges.length; i++) {\n
        var range = ranges[i];\n
        if (range.empty()) { indices.push(i); replacements.push(""); }\n
        else replacements.push(mod(cm.getRange(range.from(), range.to())));\n
      }\n
      cm.replaceSelections(replacements, "around", "case");\n
      for (var i = indices.length - 1, at; i >= 0; i--) {\n
        var range = ranges[indices[i]];\n
        if (at && CodeMirror.cmpPos(range.head, at) > 0) continue;\n
        var word = wordAt(cm, range.head);\n
        at = word.from;\n
        cm.replaceRange(mod(word.word), word.from, word.to);\n
      }\n
    });\n
  }\n
\n
  map[cK + ctrl + "Backspace"] = "delLineLeft";\n
\n
  cmds[map["Backspace"] = "smartBackspace"] = function(cm) {\n
    if (cm.somethingSelected()) return CodeMirror.Pass;\n
\n
    var cursor = cm.getCursor();\n
    var toStartOfLine = cm.getRange({line: cursor.line, ch: 0}, cursor);\n
    var column = CodeMirror.countColumn(toStartOfLine, null, cm.getOption("tabSize"));\n
    var indentUnit = cm.getOption("indentUnit");\n
\n
    if (toStartOfLine && !/\\S/.test(toStartOfLine) && column % indentUnit == 0) {\n
      var prevIndent = new Pos(cursor.line,\n
        CodeMirror.findColumn(toStartOfLine, column - indentUnit, indentUnit));\n
\n
      // If no smart delete is happening (due to tab sizing) just do a regular delete\n
      if (prevIndent.ch == cursor.ch) return CodeMirror.Pass;\n
\n
      return cm.replaceRange("", prevIndent, cursor, "+delete");\n
    } else {\n
      return CodeMirror.Pass;\n
    }\n
  };\n
\n
  cmds[map[cK + ctrl + "K"] = "delLineRight"] = function(cm) {\n
    cm.operation(function() {\n
      var ranges = cm.listSelections();\n
      for (var i = ranges.length - 1; i >= 0; i--)\n
        cm.replaceRange("", ranges[i].anchor, Pos(ranges[i].to().line), "+delete");\n
      cm.scrollIntoView();\n
    });\n
  };\n
\n
  cmds[map[cK + ctrl + "U"] = "upcaseAtCursor"] = function(cm) {\n
    modifyWordOrSelection(cm, function(str) { return str.toUpperCase(); });\n
  };\n
  cmds[map[cK + ctrl + "L"] = "downcaseAtCursor"] = function(cm) {\n
    modifyWordOrSelection(cm, function(str) { return str.toLowerCase(); });\n
  };\n
\n
  cmds[map[cK + ctrl + "Space"] = "setSublimeMark"] = function(cm) {\n
    if (cm.state.sublimeMark) cm.state.sublimeMark.clear();\n
    cm.state.sublimeMark = cm.setBookmark(cm.getCursor());\n
  };\n
  cmds[map[cK + ctrl + "A"] = "selectToSublimeMark"] = function(cm) {\n
    var found = cm.state.sublimeMark && cm.state.sublimeMark.find();\n
    if (found) cm.setSelection(cm.getCursor(), found);\n
  };\n
  cmds[map[cK + ctrl + "W"] = "deleteToSublimeMark"] = function(cm) {\n
    var found = cm.state.sublimeMark && cm.state.sublimeMark.find();\n
    if (found) {\n
      var from = cm.getCursor(), to = found;\n
      if (CodeMirror.cmpPos(from, to) > 0) { var tmp = to; to = from; from = tmp; }\n
      cm.state.sublimeKilled = cm.getRange(from, to);\n
      cm.replaceRange("", from, to);\n
    }\n
  };\n
  cmds[map[cK + ctrl + "X"] = "swapWithSublimeMark"] = function(cm) {\n
    var found = cm.state.sublimeMark && cm.state.sublimeMark.find();\n
    if (found) {\n
      cm.state.sublimeMark.clear();\n
      cm.state.sublimeMark = cm.setBookmark(cm.getCursor());\n
      cm.setCursor(found);\n
    }\n
  };\n
  cmds[map[cK + ctrl + "Y"] = "sublimeYank"] = function(cm) {\n
    if (cm.state.sublimeKilled != null)\n
      cm.replaceSelection(cm.state.sublimeKilled, null, "paste");\n
  };\n
\n
  map[cK + ctrl + "G"] = "clearBookmarks";\n
  cmds[map[cK + ctrl + "C"] = "showInCenter"] = function(cm) {\n
    var pos = cm.cursorCoords(null, "local");\n
    cm.scrollTo(null, (pos.top + pos.bottom) / 2 - cm.getScrollInfo().clientHeight / 2);\n
  };\n
\n
  cmds[map["Shift-Alt-Up"] = "selectLinesUpward"] = function(cm) {\n
    cm.operation(function() {\n
      var ranges = cm.listSelections();\n
      for (var i = 0; i < ranges.length; i++) {\n
        var range = ranges[i];\n
        if (range.head.line > cm.firstLine())\n
          cm.addSelection(Pos(range.head.line - 1, range.head.ch));\n
      }\n
    });\n
  };\n
  cmds[map["Shift-Alt-Down"] = "selectLinesDownward"] = function(cm) {\n
    cm.operation(function() {\n
      var ranges = cm.listSelections();\n
      for (var i = 0; i < ranges.length; i++) {\n
        var range = ranges[i];\n
        if (range.head.line < cm.lastLine())\n
          cm.addSelection(Pos(range.head.line + 1, range.head.ch));\n
      }\n
    });\n
  };\n
\n
  function getTarget(cm) {\n
    var from = cm.getCursor("from"), to = cm.getCursor("to");\n
    if (CodeMirror.cmpPos(from, to) == 0) {\n
      var word = wordAt(cm, from);\n
      if (!word.word) return;\n
      from = word.from;\n
      to = word.to;\n
    }\n
    return {from: from, to: to, query: cm.getRange(from, to), word: word};\n
  }\n
\n
  function findAndGoTo(cm, forward) {\n
    var target = getTarget(cm);\n
    if (!target) return;\n
    var query = target.query;\n
    var cur = cm.getSearchCursor(query, forward ? target.to : target.from);\n
\n
    if (forward ? cur.findNext() : cur.findPrevious()) {\n
      cm.setSelection(cur.from(), cur.to());\n
    } else {\n
      cur = cm.getSearchCursor(query, forward ? Pos(cm.firstLine(), 0)\n
                                              : cm.clipPos(Pos(cm.lastLine())));\n
      if (forward ? cur.findNext() : cur.findPrevious())\n
        cm.setSelection(cur.from(), cur.to());\n
      else if (target.word)\n
        cm.setSelection(target.from, target.to);\n
    }\n
  };\n
  cmds[map[ctrl + "F3"] = "findUnder"] = function(cm) { findAndGoTo(cm, true); };\n
  cmds[map["Shift-" + ctrl + "F3"] = "findUnderPrevious"] = function(cm) { findAndGoTo(cm,false); };\n
  cmds[map["Alt-F3"] = "findAllUnder"] = function(cm) {\n
    var target = getTarget(cm);\n
    if (!target) return;\n
    var cur = cm.getSearchCursor(target.query);\n
    var matches = [];\n
    var primaryIndex = -1;\n
    while (cur.findNext()) {\n
      matches.push({anchor: cur.from(), head: cur.to()});\n
      if (cur.from().line <= target.from.line && cur.from().ch <= target.from.ch)\n
        primaryIndex++;\n
    }\n
    cm.setSelections(matches, primaryIndex);\n
  };\n
\n
  map["Shift-" + ctrl + "["] = "fold";\n
  map["Shift-" + ctrl + "]"] = "unfold";\n
  map[cK + ctrl + "0"] = map[cK + ctrl + "j"] = "unfoldAll";\n
\n
  map[ctrl + "I"] = "findIncremental";\n
  map["Shift-" + ctrl + "I"] = "findIncrementalReverse";\n
  map[ctrl + "H"] = "replace";\n
  map["F3"] = "findNext";\n
  map["Shift-F3"] = "findPrev";\n
\n
  CodeMirror.normalizeKeyMap(map);\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>21595</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
