<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="ZopePageTemplate" module="Products.PageTemplates.ZopePageTemplate"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_text</string> </key>
            <value> <unicode encoding="cdata"><![CDATA[

<!doctype html>\n
\n
<meta charset="utf-8"/>\n
<title>CodeMirror: Test Suite</title>\n
<link rel=stylesheet href="../doc/docs.css">\n
\n
<link rel="stylesheet" href="../lib/codemirror.css">\n
<link rel="stylesheet" href="mode_test.css">\n
<script src="../doc/activebookmark.js"></script>\n
<script src="../lib/codemirror.js"></script>\n
<script src="../addon/mode/overlay.js"></script>\n
<script src="../addon/mode/multiplex.js"></script>\n
<script src="../addon/search/searchcursor.js"></script>\n
<script src="../addon/dialog/dialog.js"></script>\n
<script src="../addon/cm_edit/matchbrackets.js"></script>\n
<script src="../addon/hint/sql-hint.js"></script>\n
<script src="../addon/comment/comment.js"></script>\n
<script src="../addon/mode/simple.js"></script>\n
<script src="../mode/css/css.js"></script>\n
<script src="../mode/clike/clike.js"></script>\n
<!-- clike must be after css or vim and sublime tests will fail -->\n
<script src="../mode/gfm/gfm.js"></script>\n
<script src="../mode/haml/haml.js"></script>\n
<script src="../mode/htmlmixed/htmlmixed.js"></script>\n
<script src="../mode/javascript/javascript.js"></script>\n
<script src="../mode/jsx/jsx.js"></script>\n
<script src="../mode/markdown/markdown.js"></script>\n
<script src="../mode/php/php.js"></script>\n
<script src="../mode/ruby/ruby.js"></script>\n
<script src="../mode/shell/shell.js"></script>\n
<script src="../mode/slim/slim.js"></script>\n
<script src="../mode/sql/sql.js"></script>\n
<script src="../mode/stex/stex.js"></script>\n
<script src="../mode/textile/textile.js"></script>\n
<script src="../mode/verilog/verilog.js"></script>\n
<script src="../mode/xml/xml.js"></script>\n
<script src="../mode/xquery/xquery.js"></script>\n
<script src="../keymap/emacs.js"></script>\n
<script src="../keymap/sublime.js"></script>\n
<script src="../keymap/vim.js"></script>\n
<script src="../mode/rust/rust.js"></script>\n
<script src="../mode/mscgen/mscgen.js"></script>\n
<script src="../mode/dylan/dylan.js"></script>\n
\n
<style type="text/css">\n
  .ok {color: #090;}\n
  .fail {color: #e00;}\n
  .error {color: #c90;}\n
  .done {font-weight: bold;}\n
  #progress {\n
  background: #45d;\n
  color: white;\n
  text-shadow: 0 0 1px #45d, 0 0 2px #45d, 0 0 3px #45d;\n
  font-weight: bold;\n
  white-space: pre;\n
  }\n
  #testground {\n
  visibility: hidden;\n
  }\n
  #testground.offscreen {\n
  visibility: visible;\n
  position: absolute;\n
  left: -10000px;\n
  top: -10000px;\n
  }\n
  .CodeMirror { border: 1px solid black; }\n
</style>\n
\n
<div id=nav>\n
  <a href="http://codemirror.net"><h1>CodeMirror</h1><img id=logo src="../doc/logo.png"></a>\n
\n
  <ul>\n
    <li><a href="../index.html">Home</a>\n
    <li><a href="../doc/manual.html">Manual</a>\n
    <li><a href="https://github.com/codemirror/codemirror">Code</a>\n
  </ul>\n
  <ul>\n
    <li><a class=active href="#">Test suite</a>\n
  </ul>\n
</div>\n
\n
<article>\n
  <h2>Test Suite</h2>\n
\n
    <p>A limited set of programmatic sanity tests for CodeMirror.</p>\n
\n
    <div style="border: 1px solid black; padding: 1px; max-width: 700px;">\n
      <div style="width: 0px;" id=progress><div style="padding: 3px;">Ran <span id="progress_ran">0</span><span id="progress_total"> of 0</span> tests</div></div>\n
    </div>\n
    <p id=status>Please enable JavaScript...</p>\n
    <div id=output></div>\n
\n
    <div id=testground></div>\n
\n
    <script src="driver.js"></script>\n
    <script src="test.js"></script>\n
    <script src="doc_test.js"></script>\n
    <script src="multi_test.js"></script>\n
    <script src="scroll_test.js"></script>\n
    <script src="comment_test.js"></script>\n
    <script src="search_test.js"></script>\n
    <script src="mode_test.js"></script>\n
\n
    <script src="../mode/clike/test.js"></script>\n
    <script src="../mode/css/test.js"></script>\n
    <script src="../mode/css/gss_test.js"></script>\n
    <script src="../mode/css/scss_test.js"></script>\n
    <script src="../mode/css/less_test.js"></script>\n
    <script src="../mode/gfm/test.js"></script>\n
    <script src="../mode/haml/test.js"></script>\n
    <script src="../mode/javascript/test.js"></script>\n
    <script src="../mode/jsx/test.js"></script>\n
    <script src="../mode/markdown/test.js"></script>\n
    <script src="../mode/php/test.js"></script>\n
    <script src="../mode/ruby/test.js"></script>\n
    <script src="../mode/shell/test.js"></script>\n
    <script src="../mode/slim/test.js"></script>\n
    <script src="../mode/stex/test.js"></script>\n
    <script src="../mode/textile/test.js"></script>\n
    <script src="../mode/verilog/test.js"></script>\n
    <script src="../mode/xml/test.js"></script>\n
    <script src="../mode/xquery/test.js"></script>\n
    <script src="../mode/rust/test.js"></script>\n
    <script src="../mode/mscgen/mscgen_test.js"></script>\n
    <script src="../mode/mscgen/xu_test.js"></script>\n
    <script src="../mode/mscgen/msgenny_test.js"></script>\n
    <script src="../mode/dylan/test.js"></script>\n
    <script src="../addon/mode/multiplex_test.js"></script>\n
    <script src="emacs_test.js"></script>\n
    <script src="sql-hint-test.js"></script>\n
    <script src="sublime_test.js"></script>\n
    <script src="vim_test.js"></script>\n
    <script>\n
      window.onload = runHarness;\n
      CodeMirror.on(window, \'hashchange\', runHarness);\n
\n
      function esc(str) {\n
        return str.replace(/[<&]/, function(ch) { return ch == "<" ? "&lt;" : "&amp;"; });\n
      }\n
\n
      var output = document.getElementById("output"),\n
          progress = document.getElementById("progress"),\n
          progressRan = document.getElementById("progress_ran").childNodes[0],\n
          progressTotal = document.getElementById("progress_total").childNodes[0];\n
      var count = 0,\n
          failed = 0,\n
          skipped = 0,\n
          bad = "",\n
          running = false, // Flag that states tests are running\n
          quit = false, // Flag to quit tests ASAP\n
          verbose = false; // Adds message for *every* test to output\n
\n
      function runHarness(){\n
        if (running) {\n
          quit = true;\n
          setStatus("Restarting tests...", \'\', true);\n
          setTimeout(function(){runHarness();}, 500);\n
          return;\n
        }\n
        filters = [];\n
        verbose = false;\n
        if (window.location.hash.substr(1)){\n
          var strings = window.location.hash.substr(1).split(",");\n
          while (strings.length) {\n
            var s = strings.shift();\n
            if (s === "verbose")\n
              verbose = true;\n
            else\n
              filters.push(parseTestFilter(decodeURIComponent(s)));\n
          }\n
        }\n
        quit = false;\n
        running = true;\n
        setStatus("Loading tests...");\n
        count = 0;\n
        failed = 0;\n
        skipped = 0;\n
        bad = "";\n
        totalTests = countTests();\n
        progressTotal.nodeValue = " of " + totalTests;\n
        progressRan.nodeValue = count;\n
        output.innerHTML = \'\';\n
        document.getElementById("testground").innerHTML = "<form>" +\n
          "<textarea id=\\"code\\" name=\\"code\\"></textarea>" +\n
          "<input type=submit value=ok name=submit>" +\n
          "</form>";\n
        runTests(displayTest);\n
      }\n
\n
      function setStatus(message, className, force){\n
        if (quit && !force) return;\n
        if (!message) throw("must provide message");\n
        var status = document.getElementById("status").childNodes[0];\n
        status.nodeValue = message;\n
        status.parentNode.className = className;\n
      }\n
      function addOutput(name, className, code){\n
        var newOutput = document.createElement("dl");\n
        var newTitle = document.createElement("dt");\n
        newTitle.className = className;\n
        newTitle.appendChild(document.createTextNode(name));\n
        newOutput.appendChild(newTitle);\n
        var newMessage = document.createElement("dd");\n
        newMessage.innerHTML = code;\n
        newOutput.appendChild(newTitle);\n
        newOutput.appendChild(newMessage);\n
        output.appendChild(newOutput);\n
      }\n
      function displayTest(type, name, customMessage) {\n
        var message = "???";\n
        if (type != "done" && type != "skipped") ++count;\n
        progress.style.width = (count * (progress.parentNode.clientWidth - 2) / totalTests) + "px";\n
        progressRan.nodeValue = count;\n
        if (type == "ok") {\n
          message = "Test \'" + name + "\' passed";\n
          if (!verbose) customMessage = false;\n
        } else if (type == "skipped") {\n
          message = "Test \'" + name + "\' skipped";\n
          ++skipped;\n
          if (!verbose) customMessage = false;\n
        } else if (type == "expected") {\n
          message = "Test \'" + name + "\' failed as expected";\n
          if (!verbose) customMessage = false;\n
        } else if (type == "error" || type == "fail") {\n
          ++failed;\n
          message = "Test \'" + name + "\' failed";\n
        } else if (type == "done") {\n
          if (failed) {\n
            type += " fail";\n
            message = failed + " failure" + (failed > 1 ? "s" : "");\n
          } else if (count < totalTests) {\n
            failed = totalTests - count;\n
            type += " fail";\n
            message = failed + " failure" + (failed > 1 ? "s" : "");\n
          } else {\n
            type += " ok";\n
            message = "All passed";\n
            if (skipped) {\n
              message += " (" + skipped + " skipped)";\n
            }\n
          }\n
          progressTotal.nodeValue = \'\';\n
          customMessage = true; // Hack to avoid adding to output\n
        }\n
        if (verbose && !customMessage)  customMessage = message;\n
        setStatus(message, type);\n
        if (customMessage && customMessage.length > 0) {\n
          addOutput(name, type, customMessage);\n
        }\n
      }\n
    </script>\n
\n
</article>

]]></unicode> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>text/html</string> </value>
        </item>
        <item>
            <key> <string>expand</string> </key>
            <value> <int>0</int> </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>index.html</string> </value>
        </item>
        <item>
            <key> <string>output_encoding</string> </key>
            <value> <string>iso-8859-15</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
