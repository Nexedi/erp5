<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604369.35</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>scroll_test.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

(function() {\n
  "use strict";\n
\n
  namespace = "scroll_";\n
\n
  testCM("bars_hidden", function(cm) {\n
    for (var i = 0;; i++) {\n
      var wrapBox = cm.getWrapperElement().getBoundingClientRect();\n
      var scrollBox = cm.getScrollerElement().getBoundingClientRect();\n
      is(wrapBox.bottom < scrollBox.bottom - 10);\n
      is(wrapBox.right < scrollBox.right - 10);\n
      if (i == 1) break;\n
      cm.getWrapperElement().style.height = "auto";\n
      cm.refresh();\n
    }\n
  });\n
  \n
  function barH(cm) { return byClassName(cm.getWrapperElement(), "CodeMirror-hscrollbar")[0]; }\n
  function barV(cm) { return byClassName(cm.getWrapperElement(), "CodeMirror-vscrollbar")[0]; }\n
\n
  function displayBottom(cm, scrollbar) {\n
    if (scrollbar && cm.display.scroller.offsetHeight > cm.display.scroller.clientHeight)\n
      return barH(cm).getBoundingClientRect().top;\n
    else\n
      return cm.getWrapperElement().getBoundingClientRect().bottom - 1;\n
  }\n
\n
  function displayRight(cm, scrollbar) {\n
    if (scrollbar && cm.display.scroller.offsetWidth > cm.display.scroller.clientWidth)\n
      return barV(cm).getBoundingClientRect().left;\n
    else\n
      return cm.getWrapperElement().getBoundingClientRect().right - 1;\n
  }\n
\n
  function testMovedownFixed(cm, hScroll) {\n
    cm.setSize("100px", "100px");\n
    if (hScroll) cm.setValue(new Array(100).join("x"));\n
    var bottom = displayBottom(cm, hScroll);\n
    for (var i = 0; i < 30; i++) {\n
      cm.replaceSelection("x\\n");\n
      var cursorBottom = cm.cursorCoords(null, "window").bottom;\n
      is(cursorBottom <= bottom);\n
    }\n
    is(cursorBottom >= bottom - 5);\n
  }\n
\n
  testCM("movedown_fixed", function(cm) {testMovedownFixed(cm, false);});\n
  testCM("movedown_hscroll_fixed", function(cm) {testMovedownFixed(cm, true);});\n
\n
  function testMovedownResize(cm, hScroll) {\n
    cm.getWrapperElement().style.height = "auto";\n
    if (hScroll) cm.setValue(new Array(100).join("x"));\n
    cm.refresh();\n
    for (var i = 0; i < 30; i++) {\n
      cm.replaceSelection("x\\n");\n
      var bottom = displayBottom(cm, hScroll);\n
      var cursorBottom = cm.cursorCoords(null, "window").bottom;\n
      is(cursorBottom <= bottom);\n
      is(cursorBottom >= bottom - 5);\n
    }\n
  }\n
\n
  testCM("movedown_resize", function(cm) {testMovedownResize(cm, false);});\n
  testCM("movedown_hscroll_resize", function(cm) {testMovedownResize(cm, true);});\n
\n
  function testMoveright(cm, wrap, scroll) {\n
    cm.setSize("100px", "100px");\n
    if (wrap) cm.setOption("lineWrapping", true);\n
    if (scroll) {\n
      cm.setValue("\\n" + new Array(100).join("x\\n"));\n
      cm.setCursor(Pos(0, 0));\n
    }\n
    var right = displayRight(cm, scroll);\n
    for (var i = 0; i < 10; i++) {\n
      cm.replaceSelection("xxxxxxxxxx");\n
      var cursorRight = cm.cursorCoords(null, "window").right;\n
      is(cursorRight < right);\n
    }\n
    if (!wrap) is(cursorRight > right - 20);\n
  }\n
\n
  testCM("moveright", function(cm) {testMoveright(cm, false, false);});\n
  testCM("moveright_wrap", function(cm) {testMoveright(cm, true, false);});\n
  testCM("moveright_scroll", function(cm) {testMoveright(cm, false, true);});\n
  testCM("moveright_scroll_wrap", function(cm) {testMoveright(cm, true, true);});\n
\n
  testCM("suddenly_wide", function(cm) {\n
    addDoc(cm, 100, 100);\n
    cm.replaceSelection(new Array(600).join("l ") + "\\n");\n
    cm.execCommand("goLineUp");\n
    cm.execCommand("goLineEnd");\n
    is(barH(cm).scrollLeft > cm.getScrollerElement().scrollLeft - 1);\n
  });\n
\n
  testCM("wrap_changes_height", function(cm) {\n
    var line = new Array(20).join("a ") + "\\n";\n
    cm.setValue(new Array(20).join(line));\n
    var box = cm.getWrapperElement().getBoundingClientRect();\n
    cm.setSize(cm.cursorCoords(Pos(0), "window").right - box.left + 2,\n
               cm.cursorCoords(Pos(19, 0), "window").bottom - box.top + 2);\n
    cm.setCursor(Pos(19, 0));\n
    cm.replaceSelection("\\n");\n
    is(cm.cursorCoords(null, "window").bottom < displayBottom(cm, false));\n
  }, {lineWrapping: true});\n
\n
  testCM("height_auto_with_gutter_expect_no_scroll_after_line_delete", function(cm) {\n
    cm.setSize(null, "auto");\n
    cm.setValue("x\\n");\n
    cm.execCommand("goDocEnd");\n
    cm.execCommand("delCharBefore");\n
    eq(cm.getScrollInfo().top, 0);\n
    cm.scrollTo(null, 10);\n
    is(cm.getScrollInfo().top < 5);\n
  }, {lineNumbers: true});\n
})();\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>4279</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
