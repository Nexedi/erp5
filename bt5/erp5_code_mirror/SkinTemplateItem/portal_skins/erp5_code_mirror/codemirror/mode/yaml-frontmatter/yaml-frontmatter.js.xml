<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604388.8</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>yaml-frontmatter.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
(function (mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"), require("../yaml/yaml"))\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror", "../yaml/yaml"], mod)\n
  else // Plain browser env\n
    mod(CodeMirror)\n
})(function (CodeMirror) {\n
\n
  var START = 0, FRONTMATTER = 1, BODY = 2\n
\n
  // a mixed mode for Markdown text with an optional YAML front matter\n
  CodeMirror.defineMode("yaml-frontmatter", function (config, parserConfig) {\n
    var yamlMode = CodeMirror.getMode(config, "yaml")\n
    var innerMode = CodeMirror.getMode(config, parserConfig && parserConfig.base || "gfm")\n
\n
    function curMode(state) {\n
      return state.state == BODY ? innerMode : yamlMode\n
    }\n
\n
    return {\n
      startState: function () {\n
        return {\n
          state: START,\n
          inner: CodeMirror.startState(yamlMode)\n
        }\n
      },\n
      copyState: function (state) {\n
        return {\n
          state: state.state,\n
          inner: CodeMirror.copyState(curMode(state), state.inner)\n
        }\n
      },\n
      token: function (stream, state) {\n
        if (state.state == START) {\n
          if (stream.match(/---/, false)) {\n
            state.state = FRONTMATTER\n
            return yamlMode.token(stream, state.inner)\n
          } else {\n
            state.state = BODY\n
            state.inner = CodeMirror.startState(innerMode)\n
            return innerMode.token(stream, state.inner)\n
          }\n
        } else if (state.state == FRONTMATTER) {\n
          var end = stream.sol() && stream.match(/---/, false)\n
          var style = yamlMode.token(stream, state.inner)\n
          if (end) {\n
            state.state = BODY\n
            state.inner = CodeMirror.startState(innerMode)\n
          }\n
          return style\n
        } else {\n
          return innerMode.token(stream, state.inner)\n
        }\n
      },\n
      innerMode: function (state) {\n
        return {mode: curMode(state), state: state.inner}\n
      },\n
      blankLine: function (state) {\n
        var mode = curMode(state)\n
        if (mode.blankLine) return mode.blankLine(state.inner)\n
      }\n
    }\n
  })\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>2292</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
