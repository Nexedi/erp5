<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604388.57</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>xml.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string>// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
(function(mod) {\n
  if (typeof exports == "object" \046\046 typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"));\n
  else if (typeof define == "function" \046\046 define.amd) // AMD\n
    define(["../../lib/codemirror"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
"use strict";\n
\n
var htmlConfig = {\n
  autoSelfClosers: {\'area\': true, \'base\': true, \'br\': true, \'col\': true, \'command\': true,\n
                    \'embed\': true, \'frame\': true, \'hr\': true, \'img\': true, \'input\': true,\n
                    \'keygen\': true, \'link\': true, \'meta\': true, \'param\': true, \'source\': true,\n
                    \'track\': true, \'wbr\': true, \'menuitem\': true},\n
  implicitlyClosed: {\'dd\': true, \'li\': true, \'optgroup\': true, \'option\': true, \'p\': true,\n
                     \'rp\': true, \'rt\': true, \'tbody\': true, \'td\': true, \'tfoot\': true,\n
                     \'th\': true, \'tr\': true},\n
  contextGrabbers: {\n
    \'dd\': {\'dd\': true, \'dt\': true},\n
    \'dt\': {\'dd\': true, \'dt\': true},\n
    \'li\': {\'li\': true},\n
    \'option\': {\'option\': true, \'optgroup\': true},\n
    \'optgroup\': {\'optgroup\': true},\n
    \'p\': {\'address\': true, \'article\': true, \'aside\': true, \'blockquote\': true, \'dir\': true,\n
          \'div\': true, \'dl\': true, \'fieldset\': true, \'footer\': true, \'form\': true,\n
          \'h1\': true, \'h2\': true, \'h3\': true, \'h4\': true, \'h5\': true, \'h6\': true,\n
          \'header\': true, \'hgroup\': true, \'hr\': true, \'menu\': true, \'nav\': true, \'ol\': true,\n
          \'p\': true, \'pre\': true, \'section\': true, \'table\': true, \'ul\': true},\n
    \'rp\': {\'rp\': true, \'rt\': true},\n
    \'rt\': {\'rp\': true, \'rt\': true},\n
    \'tbody\': {\'tbody\': true, \'tfoot\': true},\n
    \'td\': {\'td\': true, \'th\': true},\n
    \'tfoot\': {\'tbody\': true},\n
    \'th\': {\'td\': true, \'th\': true},\n
    \'thead\': {\'tbody\': true, \'tfoot\': true},\n
    \'tr\': {\'tr\': true}\n
  },\n
  doNotIndent: {"pre": true},\n
  allowUnquoted: true,\n
  allowMissing: true,\n
  caseFold: true\n
}\n
\n
var xmlConfig = {\n
  autoSelfClosers: {},\n
  implicitlyClosed: {},\n
  contextGrabbers: {},\n
  doNotIndent: {},\n
  allowUnquoted: false,\n
  allowMissing: false,\n
  caseFold: false\n
}\n
\n
CodeMirror.defineMode("xml", function(editorConf, config_) {\n
  var indentUnit = editorConf.indentUnit\n
  var config = {}\n
  var defaults = config_.htmlMode ? htmlConfig : xmlConfig\n
  for (var prop in defaults) config[prop] = defaults[prop]\n
  for (var prop in config_) config[prop] = config_[prop]\n
\n
  // Return variables for tokenizers\n
  var type, setStyle;\n
\n
  function inText(stream, state) {\n
    function chain(parser) {\n
      state.tokenize = parser;\n
      return parser(stream, state);\n
    }\n
\n
    var ch = stream.next();\n
    if (ch == "\074") {\n
      if (stream.eat("!")) {\n
        if (stream.eat("[")) {\n
          if (stream.match("CDATA[")) return chain(inBlock("atom", "]]\076"));\n
          else return null;\n
        } else if (stream.match("--")) {\n
          return chain(inBlock("comment", "--\076"));\n
        } else if (stream.match("DOCTYPE", true, true)) {\n
          stream.eatWhile(/[\\w\\._\\-]/);\n
          return chain(doctype(1));\n
        } else {\n
          return null;\n
        }\n
      } else if (stream.eat("?")) {\n
        stream.eatWhile(/[\\w\\._\\-]/);\n
        state.tokenize = inBlock("meta", "?\076");\n
        return "meta";\n
      } else {\n
        type = stream.eat("/") ? "closeTag" : "openTag";\n
        state.tokenize = inTag;\n
        return "tag bracket";\n
      }\n
    } else if (ch == "\046") {\n
      var ok;\n
      if (stream.eat("#")) {\n
        if (stream.eat("x")) {\n
          ok = stream.eatWhile(/[a-fA-F\\d]/) \046\046 stream.eat(";");\n
        } else {\n
          ok = stream.eatWhile(/[\\d]/) \046\046 stream.eat(";");\n
        }\n
      } else {\n
        ok = stream.eatWhile(/[\\w\\.\\-:]/) \046\046 stream.eat(";");\n
      }\n
      return ok ? "atom" : "error";\n
    } else {\n
      stream.eatWhile(/[^\046\074]/);\n
      return null;\n
    }\n
  }\n
  inText.isInText = true;\n
\n
  function inTag(stream, state) {\n
    var ch = stream.next();\n
    if (ch == "\076" || (ch == "/" \046\046 stream.eat("\076"))) {\n
      state.tokenize = inText;\n
      type = ch == "\076" ? "endTag" : "selfcloseTag";\n
      return "tag bracket";\n
    } else if (ch == "=") {\n
      type = "equals";\n
      return null;\n
    } else if (ch == "\074") {\n
      state.tokenize = inText;\n
      state.state = baseState;\n
      state.tagName = state.tagStart = null;\n
      var next = state.tokenize(stream, state);\n
      return next ? next + " tag error" : "tag error";\n
    } else if (/[\\\'\\"]/.test(ch)) {\n
      state.tokenize = inAttribute(ch);\n
      state.stringStartCol = stream.column();\n
      return state.tokenize(stream, state);\n
    } else {\n
      stream.match(/^[^\\s\\u00a0=\074\076\\"\\\']*[^\\s\\u00a0=\074\076\\"\\\'\\/]/);\n
      return "word";\n
    }\n
  }\n
\n
  function inAttribute(quote) {\n
    var closure = function(stream, state) {\n
      while (!stream.eol()) {\n
        if (stream.next() == quote) {\n
          state.tokenize = inTag;\n
          break;\n
        }\n
      }\n
      return "string";\n
    };\n
    closure.isInAttribute = true;\n
    return closure;\n
  }\n
\n
  function inBlock(style, terminator) {\n
    return function(stream, state) {\n
      while (!stream.eol()) {\n
        if (stream.match(terminator)) {\n
          state.tokenize = inText;\n
          break;\n
        }\n
        stream.next();\n
      }\n
      return style;\n
    };\n
  }\n
  function doctype(depth) {\n
    return function(stream, state) {\n
      var ch;\n
      while ((ch = stream.next()) != null) {\n
        if (ch == "\074") {\n
          state.tokenize = doctype(depth + 1);\n
          return state.tokenize(stream, state);\n
        } else if (ch == "\076") {\n
          if (depth == 1) {\n
            state.tokenize = inText;\n
            break;\n
          } else {\n
            state.tokenize = doctype(depth - 1);\n
            return state.tokenize(stream, state);\n
          }\n
        }\n
      }\n
      return "meta";\n
    };\n
  }\n
\n
  function Context(state, tagName, startOfLine) {\n
    this.prev = state.context;\n
    this.tagName = tagName;\n
    this.indent = state.indented;\n
    this.startOfLine = startOfLine;\n
    if (config.doNotIndent.hasOwnProperty(tagName) || (state.context \046\046 state.context.noIndent))\n
      this.noIndent = true;\n
  }\n
  function popContext(state) {\n
    if (state.context) state.context = state.context.prev;\n
  }\n
  function maybePopContext(state, nextTagName) {\n
    var parentTagName;\n
    while (true) {\n
      if (!state.context) {\n
        return;\n
      }\n
      parentTagName = state.context.tagName;\n
      if (!config.contextGrabbers.hasOwnProperty(parentTagName) ||\n
          !config.contextGrabbers[parentTagName].hasOwnProperty(nextTagName)) {\n
        return;\n
      }\n
      popContext(state);\n
    }\n
  }\n
\n
  function baseState(type, stream, state) {\n
    if (type == "openTag") {\n
      state.tagStart = stream.column();\n
      return tagNameState;\n
    } else if (type == "closeTag") {\n
      return closeTagNameState;\n
    } else {\n
      return baseState;\n
    }\n
  }\n
  function tagNameState(type, stream, state) {\n
    if (type == "word") {\n
      state.tagName = stream.current();\n
      setStyle = "tag";\n
      return attrState;\n
    } else {\n
      setStyle = "error";\n
      return tagNameState;\n
    }\n
  }\n
  function closeTagNameState(type, stream, state) {\n
    if (type == "word") {\n
      var tagName = stream.current();\n
      if (state.context \046\046 state.context.tagName != tagName \046\046\n
          config.implicitlyClosed.hasOwnProperty(state.context.tagName))\n
        popContext(state);\n
      if ((state.context \046\046 state.context.tagName == tagName) || config.matchClosing === false) {\n
        setStyle = "tag";\n
        return closeState;\n
      } else {\n
        setStyle = "tag error";\n
        return closeStateErr;\n
      }\n
    } else {\n
      setStyle = "error";\n
      return closeStateErr;\n
    }\n
  }\n
\n
  function closeState(type, _stream, state) {\n
    if (type != "endTag") {\n
      setStyle = "error";\n
      return closeState;\n
    }\n
    popContext(state);\n
    return baseState;\n
  }\n
  function closeStateErr(type, stream, state) {\n
    setStyle = "error";\n
    return closeState(type, stream, state);\n
  }\n
\n
  function attrState(type, _stream, state) {\n
    if (type == "word") {\n
      setStyle = "attribute";\n
      return attrEqState;\n
    } else if (type == "endTag" || type == "selfcloseTag") {\n
      var tagName = state.tagName, tagStart = state.tagStart;\n
      state.tagName = state.tagStart = null;\n
      if (type == "selfcloseTag" ||\n
          config.autoSelfClosers.hasOwnProperty(tagName)) {\n
        maybePopContext(state, tagName);\n
      } else {\n
        maybePopContext(state, tagName);\n
        state.context = new Context(state, tagName, tagStart == state.indented);\n
      }\n
      return baseState;\n
    }\n
    setStyle = "error";\n
    return attrState;\n
  }\n
  function attrEqState(type, stream, state) {\n
    if (type == "equals") return attrValueState;\n
    if (!config.allowMissing) setStyle = "error";\n
    return attrState(type, stream, state);\n
  }\n
  function attrValueState(type, stream, state) {\n
    if (type == "string") return attrContinuedState;\n
    if (type == "word" \046\046 config.allowUnquoted) {setStyle = "string"; return attrState;}\n
    setStyle = "error";\n
    return attrState(type, stream, state);\n
  }\n
  function attrContinuedState(type, stream, state) {\n
    if (type == "string") return attrContinuedState;\n
    return attrState(type, stream, state);\n
  }\n
\n
  return {\n
    startState: function(baseIndent) {\n
      var state = {tokenize: inText,\n
                   state: baseState,\n
                   indented: baseIndent || 0,\n
                   tagName: null, tagStart: null,\n
                   context: null}\n
      if (baseIndent != null) state.baseIndent = baseIndent\n
      return state\n
    },\n
\n
    token: function(stream, state) {\n
      if (!state.tagName \046\046 stream.sol())\n
        state.indented = stream.indentation();\n
\n
      if (stream.eatSpace()) return null;\n
      type = null;\n
      var style = state.tokenize(stream, state);\n
      if ((style || type) \046\046 style != "comment") {\n
        setStyle = null;\n
        state.state = state.state(type || style, stream, state);\n
        if (setStyle)\n
          style = setStyle == "error" ? style + " error" : setStyle;\n
      }\n
      return style;\n
    },\n
\n
    indent: function(state, textAfter, fullLine) {\n
      var context = state.context;\n
      // Indent multi-line strings (e.g. css).\n
      if (state.tokenize.isInAttribute) {\n
        if (state.tagStart == state.indented)\n
          return state.stringStartCol + 1;\n
        else\n
          return state.indented + indentUnit;\n
      }\n
      if (context \046\046 context.noIndent) return CodeMirror.Pass;\n
      if (state.tokenize != inTag \046\046 state.tokenize != inText)\n
        return fullLine ? fullLine.match(/^(\\s*)/)[0].length : 0;\n
      // Indent the starts of attribute names.\n
      if (state.tagName) {\n
        if (config.multilineTagIndentPastTag !== false)\n
          return state.tagStart + state.tagName.length + 2;\n
        else\n
          return state.tagStart + indentUnit * (config.multilineTagIndentFactor || 1);\n
      }\n
      if (config.alignCDATA \046\046 /\074!\\[CDATA\\[/.test(textAfter)) return 0;\n
      var tagAfter = textAfter \046\046 /^\074(\\/)?([\\w_:\\.-]*)/.exec(textAfter);\n
      if (tagAfter \046\046 tagAfter[1]) { // Closing tag spotted\n
        while (context) {\n
          if (context.tagName == tagAfter[2]) {\n
            context = context.prev;\n
            break;\n
          } else if (config.implicitlyClosed.hasOwnProperty(context.tagName)) {\n
            context = context.prev;\n
          } else {\n
            break;\n
          }\n
        }\n
      } else if (tagAfter) { // Opening tag spotted\n
        while (context) {\n
          var grabbers = config.contextGrabbers[context.tagName];\n
          if (grabbers \046\046 grabbers.hasOwnProperty(tagAfter[2]))\n
            context = context.prev;\n
          else\n
            break;\n
        }\n
      }\n
      while (context \046\046 context.prev \046\046 !context.startOfLine)\n
        context = context.prev;\n
      if (context) return context.indent + indentUnit;\n
      else return state.baseIndent || 0;\n
    },\n
\n
    electricInput: /\074\\/[\\s\\w:]+\076$/,\n
    blockCommentStart: "\074!--",\n
    blockCommentEnd: "--\076",\n
\n
    configuration: config.htmlMode ? "html" : "xml",\n
    helperType: config.htmlMode ? "html" : "xml",\n
\n
    skipAttribute: function(state) {\n
      if (state.state == attrValueState)\n
        state.state = attrState\n
    }\n
  };\n
});\n
\n
CodeMirror.defineMIME("text/xml", "xml");\n
CodeMirror.defineMIME("application/xml", "xml");\n
if (!CodeMirror.mimeModes.hasOwnProperty("text/html"))\n
  CodeMirror.defineMIME("text/html", {name: "xml", htmlMode: true});\n
\n
});\n
</string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>12570</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
