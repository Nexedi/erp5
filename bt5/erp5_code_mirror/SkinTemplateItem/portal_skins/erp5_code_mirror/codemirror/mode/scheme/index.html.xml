<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="ZopePageTemplate" module="Products.PageTemplates.ZopePageTemplate"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_text</string> </key>
            <value> <unicode encoding="cdata"><![CDATA[

<!doctype html>\n
\n
<title>CodeMirror: Scheme mode</title>\n
<meta charset="utf-8"/>\n
<link rel=stylesheet href="../../doc/docs.css">\n
\n
<link rel="stylesheet" href="../../lib/codemirror.css">\n
<script src="../../lib/codemirror.js"></script>\n
<script src="scheme.js"></script>\n
<style>.CodeMirror {background: #f8f8f8;}</style>\n
<div id=nav>\n
  <a href="http://codemirror.net"><h1>CodeMirror</h1><img id=logo src="../../doc/logo.png"></a>\n
\n
  <ul>\n
    <li><a href="../../index.html">Home</a>\n
    <li><a href="../../doc/manual.html">Manual</a>\n
    <li><a href="https://github.com/codemirror/codemirror">Code</a>\n
  </ul>\n
  <ul>\n
    <li><a href="../index.html">Language modes</a>\n
    <li><a class=active href="#">Scheme</a>\n
  </ul>\n
</div>\n
\n
<article>\n
<h2>Scheme mode</h2>\n
<form><textarea id="code" name="code">\n
; See if the input starts with a given symbol.\n
(define (match-symbol input pattern)\n
  (cond ((null? (remain input)) #f)\n
\t((eqv? (car (remain input)) pattern) (r-cdr input))\n
\t(else #f)))\n
\n
; Allow the input to start with one of a list of patterns.\n
(define (match-or input pattern)\n
  (cond ((null? pattern) #f)\n
\t((match-pattern input (car pattern)))\n
\t(else (match-or input (cdr pattern)))))\n
\n
; Allow a sequence of patterns.\n
(define (match-seq input pattern)\n
  (if (null? pattern)\n
      input\n
      (let ((match (match-pattern input (car pattern))))\n
\t(if match (match-seq match (cdr pattern)) #f))))\n
\n
; Match with the pattern but no problem if it does not match.\n
(define (match-opt input pattern)\n
  (let ((match (match-pattern input (car pattern))))\n
    (if match match input)))\n
\n
; Match anything (other than \'()), until pattern is found. The rather\n
; clumsy form of requiring an ending pattern is needed to decide where\n
; the end of the match is. If none is given, this will match the rest\n
; of the sentence.\n
(define (match-any input pattern)\n
  (cond ((null? (remain input)) #f)\n
\t((null? pattern) (f-cons (remain input) (clear-remain input)))\n
\t(else\n
\t (let ((accum-any (collector)))\n
\t   (define (match-pattern-any input pattern)\n
\t     (cond ((null? (remain input)) #f)\n
\t\t   (else (accum-any (car (remain input)))\n
\t\t\t (cond ((match-pattern (r-cdr input) pattern))\n
\t\t\t       (else (match-pattern-any (r-cdr input) pattern))))))\n
\t   (let ((retval (match-pattern-any input (car pattern))))\n
\t     (if retval\n
\t\t (f-cons (accum-any) retval)\n
\t\t #f))))))\n
</textarea></form>\n
    <script>\n
      var editor = CodeMirror.fromTextArea(document.getElementById("code"), {});\n
    </script>\n
\n
    <p><strong>MIME types defined:</strong> <code>text/x-scheme</code>.</p>\n
\n
  </article>

]]></unicode> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>text/html</string> </value>
        </item>
        <item>
            <key> <string>expand</string> </key>
            <value> <int>0</int> </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>index.html</string> </value>
        </item>
        <item>
            <key> <string>output_encoding</string> </key>
            <value> <string>iso-8859-15</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
