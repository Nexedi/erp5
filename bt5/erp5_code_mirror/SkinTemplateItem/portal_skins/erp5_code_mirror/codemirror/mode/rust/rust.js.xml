<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604384.52</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>rust.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"), require("../../addon/mode/simple"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror", "../../addon/mode/simple"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
"use strict";\n
\n
CodeMirror.defineSimpleMode("rust",{\n
  start: [\n
    // string and byte string\n
    {regex: /b?"/, token: "string", next: "string"},\n
    // raw string and raw byte string\n
    {regex: /b?r"/, token: "string", next: "string_raw"},\n
    {regex: /b?r#+"/, token: "string", next: "string_raw_hash"},\n
    // character\n
    {regex: /\'(?:[^\'\\\\]|\\\\(?:[nrt0\'"]|x[\\da-fA-F]{2}|u\\{[\\da-fA-F]{6}\\}))\'/, token: "string-2"},\n
    // byte\n
    {regex: /b\'(?:[^\']|\\\\(?:[\'\\\\nrt0]|x[\\da-fA-F]{2}))\'/, token: "string-2"},\n
\n
    {regex: /(?:(?:[0-9][0-9_]*)(?:(?:[Ee][+-]?[0-9_]+)|\\.[0-9_]+(?:[Ee][+-]?[0-9_]+)?)(?:f32|f64)?)|(?:0(?:b[01_]+|(?:o[0-7_]+)|(?:x[0-9a-fA-F_]+))|(?:[0-9][0-9_]*))(?:u8|u16|u32|u64|i8|i16|i32|i64|isize|usize)?/,\n
     token: "number"},\n
    {regex: /(let(?:\\s+mut)?|fn|enum|mod|struct|type)(\\s+)([a-zA-Z_][a-zA-Z0-9_]*)/, token: ["keyword", null, "def"]},\n
    {regex: /(?:abstract|alignof|as|box|break|continue|const|crate|do|else|enum|extern|fn|for|final|if|impl|in|loop|macro|match|mod|move|offsetof|override|priv|proc|pub|pure|ref|return|self|sizeof|static|struct|super|trait|type|typeof|unsafe|unsized|use|virtual|where|while|yield)\\b/, token: "keyword"},\n
    {regex: /\\b(?:Self|isize|usize|char|bool|u8|u16|u32|u64|f16|f32|f64|i8|i16|i32|i64|str|Option)\\b/, token: "atom"},\n
    {regex: /\\b(?:true|false|Some|None|Ok|Err)\\b/, token: "builtin"},\n
    {regex: /\\b(fn)(\\s+)([a-zA-Z_][a-zA-Z0-9_]*)/,\n
     token: ["keyword", null ,"def"]},\n
    {regex: /#!?\\[.*\\]/, token: "meta"},\n
    {regex: /\\/\\/.*/, token: "comment"},\n
    {regex: /\\/\\*/, token: "comment", next: "comment"},\n
    {regex: /[-+\\/*=<>!]+/, token: "operator"},\n
    {regex: /[a-zA-Z_]\\w*!/,token: "variable-3"},\n
    {regex: /[a-zA-Z_]\\w*/, token: "variable"},\n
    {regex: /[\\{\\[\\(]/, indent: true},\n
    {regex: /[\\}\\]\\)]/, dedent: true}\n
  ],\n
  string: [\n
    {regex: /"/, token: "string", next: "start"},\n
    {regex: /(?:[^\\\\"]|\\\\(?:.|$))*/, token: "string"}\n
  ],\n
  string_raw: [\n
    {regex: /"/, token: "string", next: "start"},\n
    {regex: /[^"]*/, token: "string"}\n
  ],\n
  string_raw_hash: [\n
    {regex: /"#+/, token: "string", next: "start"},\n
    {regex: /(?:[^"]|"(?!#))*/, token: "string"}\n
  ],\n
  comment: [\n
    {regex: /.*?\\*\\//, token: "comment", next: "start"},\n
    {regex: /.*/, token: "comment"}\n
  ],\n
  meta: {\n
    dontIndentStates: ["comment"],\n
    electricInput: /^\\s*\\}$/,\n
    blockCommentStart: "/*",\n
    blockCommentEnd: "*/",\n
    lineComment: "//",\n
    fold: "brace"\n
  }\n
});\n
\n
\n
CodeMirror.defineMIME("text/x-rustsrc", "rust");\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>3025</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
