<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604386.78</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>tiddlywiki.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
/***\n
    |\'\'Name\'\'|tiddlywiki.js|\n
    |\'\'Description\'\'|Enables TiddlyWikiy syntax highlighting using CodeMirror|\n
    |\'\'Author\'\'|PMario|\n
    |\'\'Version\'\'|0.1.7|\n
    |\'\'Status\'\'|\'\'stable\'\'|\n
    |\'\'Source\'\'|[[GitHub|https://github.com/pmario/CodeMirror2/blob/tw-syntax/mode/tiddlywiki]]|\n
    |\'\'Documentation\'\'|http://codemirror.tiddlyspace.com/|\n
    |\'\'License\'\'|[[MIT License|http://www.opensource.org/licenses/mit-license.php]]|\n
    |\'\'CoreVersion\'\'|2.5.0|\n
    |\'\'Requires\'\'|codemirror.js|\n
    |\'\'Keywords\'\'|syntax highlighting color code mirror codemirror|\n
    ! Info\n
    CoreVersion parameter is needed for TiddlyWiki only!\n
***/\n
//{{{\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
"use strict";\n
\n
CodeMirror.defineMode("tiddlywiki", function () {\n
  // Tokenizer\n
  var textwords = {};\n
\n
  var keywords = function () {\n
    function kw(type) {\n
      return { type: type, style: "macro"};\n
    }\n
    return {\n
      "allTags": kw(\'allTags\'), "closeAll": kw(\'closeAll\'), "list": kw(\'list\'),\n
      "newJournal": kw(\'newJournal\'), "newTiddler": kw(\'newTiddler\'),\n
      "permaview": kw(\'permaview\'), "saveChanges": kw(\'saveChanges\'),\n
      "search": kw(\'search\'), "slider": kw(\'slider\'),   "tabs": kw(\'tabs\'),\n
      "tag": kw(\'tag\'), "tagging": kw(\'tagging\'),       "tags": kw(\'tags\'),\n
      "tiddler": kw(\'tiddler\'), "timeline": kw(\'timeline\'),\n
      "today": kw(\'today\'), "version": kw(\'version\'),   "option": kw(\'option\'),\n
\n
      "with": kw(\'with\'),\n
      "filter": kw(\'filter\')\n
    };\n
  }();\n
\n
  var isSpaceName = /[\\w_\\-]/i,\n
  reHR = /^\\-\\-\\-\\-+$/,                                 // <hr>\n
  reWikiCommentStart = /^\\/\\*\\*\\*$/,            // /***\n
  reWikiCommentStop = /^\\*\\*\\*\\/$/,             // ***/\n
  reBlockQuote = /^<<<$/,\n
\n
  reJsCodeStart = /^\\/\\/\\{\\{\\{$/,                       // //{{{ js block start\n
  reJsCodeStop = /^\\/\\/\\}\\}\\}$/,                        // //}}} js stop\n
  reXmlCodeStart = /^<!--\\{\\{\\{-->$/,           // xml block start\n
  reXmlCodeStop = /^<!--\\}\\}\\}-->$/,            // xml stop\n
\n
  reCodeBlockStart = /^\\{\\{\\{$/,                        // {{{ TW text div block start\n
  reCodeBlockStop = /^\\}\\}\\}$/,                 // }}} TW text stop\n
\n
  reUntilCodeStop = /.*?\\}\\}\\}/;\n
\n
  function chain(stream, state, f) {\n
    state.tokenize = f;\n
    return f(stream, state);\n
  }\n
\n
  function jsTokenBase(stream, state) {\n
    var sol = stream.sol(), ch;\n
\n
    state.block = false;        // indicates the start of a code block.\n
\n
    ch = stream.peek();         // don\'t eat, to make matching simpler\n
\n
    // check start of  blocks\n
    if (sol && /[<\\/\\*{}\\-]/.test(ch)) {\n
      if (stream.match(reCodeBlockStart)) {\n
        state.block = true;\n
        return chain(stream, state, twTokenCode);\n
      }\n
      if (stream.match(reBlockQuote)) {\n
        return \'quote\';\n
      }\n
      if (stream.match(reWikiCommentStart) || stream.match(reWikiCommentStop)) {\n
        return \'comment\';\n
      }\n
      if (stream.match(reJsCodeStart) || stream.match(reJsCodeStop) || stream.match(reXmlCodeStart) || stream.match(reXmlCodeStop)) {\n
        return \'comment\';\n
      }\n
      if (stream.match(reHR)) {\n
        return \'hr\';\n
      }\n
    } // sol\n
    ch = stream.next();\n
\n
    if (sol && /[\\/\\*!#;:>|]/.test(ch)) {\n
      if (ch == "!") { // tw header\n
        stream.skipToEnd();\n
        return "header";\n
      }\n
      if (ch == "*") { // tw list\n
        stream.eatWhile(\'*\');\n
        return "comment";\n
      }\n
      if (ch == "#") { // tw numbered list\n
        stream.eatWhile(\'#\');\n
        return "comment";\n
      }\n
      if (ch == ";") { // definition list, term\n
        stream.eatWhile(\';\');\n
        return "comment";\n
      }\n
      if (ch == ":") { // definition list, description\n
        stream.eatWhile(\':\');\n
        return "comment";\n
      }\n
      if (ch == ">") { // single line quote\n
        stream.eatWhile(">");\n
        return "quote";\n
      }\n
      if (ch == \'|\') {\n
        return \'header\';\n
      }\n
    }\n
\n
    if (ch == \'{\' && stream.match(/\\{\\{/)) {\n
      return chain(stream, state, twTokenCode);\n
    }\n
\n
    // rudimentary html:// file:// link matching. TW knows much more ...\n
    if (/[hf]/i.test(ch)) {\n
      if (/[ti]/i.test(stream.peek()) && stream.match(/\\b(ttps?|tp|ile):\\/\\/[\\-A-Z0-9+&@#\\/%?=~_|$!:,.;]*[A-Z0-9+&@#\\/%=~_|$]/i)) {\n
        return "link";\n
      }\n
    }\n
    // just a little string indicator, don\'t want to have the whole string covered\n
    if (ch == \'"\') {\n
      return \'string\';\n
    }\n
    if (ch == \'~\') {    // _no_ CamelCase indicator should be bold\n
      return \'brace\';\n
    }\n
    if (/[\\[\\]]/.test(ch)) { // check for [[..]]\n
      if (stream.peek() == ch) {\n
        stream.next();\n
        return \'brace\';\n
      }\n
    }\n
    if (ch == "@") {    // check for space link. TODO fix @@...@@ highlighting\n
      stream.eatWhile(isSpaceName);\n
      return "link";\n
    }\n
    if (/\\d/.test(ch)) {        // numbers\n
      stream.eatWhile(/\\d/);\n
      return "number";\n
    }\n
    if (ch == "/") { // tw invisible comment\n
      if (stream.eat("%")) {\n
        return chain(stream, state, twTokenComment);\n
      }\n
      else if (stream.eat("/")) { //\n
        return chain(stream, state, twTokenEm);\n
      }\n
    }\n
    if (ch == "_") { // tw underline\n
      if (stream.eat("_")) {\n
        return chain(stream, state, twTokenUnderline);\n
      }\n
    }\n
    // strikethrough and mdash handling\n
    if (ch == "-") {\n
      if (stream.eat("-")) {\n
        // if strikethrough looks ugly, change CSS.\n
        if (stream.peek() != \' \')\n
          return chain(stream, state, twTokenStrike);\n
        // mdash\n
        if (stream.peek() == \' \')\n
          return \'brace\';\n
      }\n
    }\n
    if (ch == "\'") { // tw bold\n
      if (stream.eat("\'")) {\n
        return chain(stream, state, twTokenStrong);\n
      }\n
    }\n
    if (ch == "<") { // tw macro\n
      if (stream.eat("<")) {\n
        return chain(stream, state, twTokenMacro);\n
      }\n
    }\n
    else {\n
      return null;\n
    }\n
\n
    // core macro handling\n
    stream.eatWhile(/[\\w\\$_]/);\n
    var word = stream.current(),\n
    known = textwords.propertyIsEnumerable(word) && textwords[word];\n
\n
    return known ? known.style : null;\n
  } // jsTokenBase()\n
\n
  // tw invisible comment\n
  function twTokenComment(stream, state) {\n
    var maybeEnd = false,\n
    ch;\n
    while (ch = stream.next()) {\n
      if (ch == "/" && maybeEnd) {\n
        state.tokenize = jsTokenBase;\n
        break;\n
      }\n
      maybeEnd = (ch == "%");\n
    }\n
    return "comment";\n
  }\n
\n
  // tw strong / bold\n
  function twTokenStrong(stream, state) {\n
    var maybeEnd = false,\n
    ch;\n
    while (ch = stream.next()) {\n
      if (ch == "\'" && maybeEnd) {\n
        state.tokenize = jsTokenBase;\n
        break;\n
      }\n
      maybeEnd = (ch == "\'");\n
    }\n
    return "strong";\n
  }\n
\n
  // tw code\n
  function twTokenCode(stream, state) {\n
    var sb = state.block;\n
\n
    if (sb && stream.current()) {\n
      return "comment";\n
    }\n
\n
    if (!sb && stream.match(reUntilCodeStop)) {\n
      state.tokenize = jsTokenBase;\n
      return "comment";\n
    }\n
\n
    if (sb && stream.sol() && stream.match(reCodeBlockStop)) {\n
      state.tokenize = jsTokenBase;\n
      return "comment";\n
    }\n
\n
    stream.next();\n
    return "comment";\n
  }\n
\n
  // tw em / italic\n
  function twTokenEm(stream, state) {\n
    var maybeEnd = false,\n
    ch;\n
    while (ch = stream.next()) {\n
      if (ch == "/" && maybeEnd) {\n
        state.tokenize = jsTokenBase;\n
        break;\n
      }\n
      maybeEnd = (ch == "/");\n
    }\n
    return "em";\n
  }\n
\n
  // tw underlined text\n
  function twTokenUnderline(stream, state) {\n
    var maybeEnd = false,\n
    ch;\n
    while (ch = stream.next()) {\n
      if (ch == "_" && maybeEnd) {\n
        state.tokenize = jsTokenBase;\n
        break;\n
      }\n
      maybeEnd = (ch == "_");\n
    }\n
    return "underlined";\n
  }\n
\n
  // tw strike through text looks ugly\n
  // change CSS if needed\n
  function twTokenStrike(stream, state) {\n
    var maybeEnd = false, ch;\n
\n
    while (ch = stream.next()) {\n
      if (ch == "-" && maybeEnd) {\n
        state.tokenize = jsTokenBase;\n
        break;\n
      }\n
      maybeEnd = (ch == "-");\n
    }\n
    return "strikethrough";\n
  }\n
\n
  // macro\n
  function twTokenMacro(stream, state) {\n
    var ch, word, known;\n
\n
    if (stream.current() == \'<<\') {\n
      return \'macro\';\n
    }\n
\n
    ch = stream.next();\n
    if (!ch) {\n
      state.tokenize = jsTokenBase;\n
      return null;\n
    }\n
    if (ch == ">") {\n
      if (stream.peek() == \'>\') {\n
        stream.next();\n
        state.tokenize = jsTokenBase;\n
        return "macro";\n
      }\n
    }\n
\n
    stream.eatWhile(/[\\w\\$_]/);\n
    word = stream.current();\n
    known = keywords.propertyIsEnumerable(word) && keywords[word];\n
\n
    if (known) {\n
      return known.style, word;\n
    }\n
    else {\n
      return null, word;\n
    }\n
  }\n
\n
  // Interface\n
  return {\n
    startState: function () {\n
      return {\n
        tokenize: jsTokenBase,\n
        indented: 0,\n
        level: 0\n
      };\n
    },\n
\n
    token: function (stream, state) {\n
      if (stream.eatSpace()) return null;\n
      var style = state.tokenize(stream, state);\n
      return style;\n
    },\n
\n
    electricChars: ""\n
  };\n
});\n
\n
CodeMirror.defineMIME("text/x-tiddlywiki", "tiddlywiki");\n
});\n
\n
//}}}\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>9467</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
