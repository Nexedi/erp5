<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604380.09</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>haskell-literate.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
(function (mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"), require("../haskell/haskell"))\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror", "../haskell/haskell"], mod)\n
  else // Plain browser env\n
    mod(CodeMirror)\n
})(function (CodeMirror) {\n
  "use strict"\n
\n
  CodeMirror.defineMode("haskell-literate", function (config, parserConfig) {\n
    var baseMode = CodeMirror.getMode(config, (parserConfig && parserConfig.base) || "haskell")\n
\n
    return {\n
      startState: function () {\n
        return {\n
          inCode: false,\n
          baseState: CodeMirror.startState(baseMode)\n
        }\n
      },\n
      token: function (stream, state) {\n
        if (stream.sol()) {\n
          if (state.inCode = stream.eat(">"))\n
            return "meta"\n
        }\n
        if (state.inCode) {\n
          return baseMode.token(stream, state.baseState)\n
        } else {\n
          stream.skipToEnd()\n
          return "comment"\n
        }\n
      },\n
      innerMode: function (state) {\n
        return state.inCode ? {state: state.baseState, mode: baseMode} : null\n
      }\n
    }\n
  }, "haskell")\n
\n
  CodeMirror.defineMIME("text/x-literate-haskell", "haskell-literate")\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>1390</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
