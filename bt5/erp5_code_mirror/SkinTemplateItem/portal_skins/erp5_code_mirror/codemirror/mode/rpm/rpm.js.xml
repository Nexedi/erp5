<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604384.1</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>rpm.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
"use strict";\n
\n
CodeMirror.defineMode("rpm-changes", function() {\n
  var headerSeperator = /^-+$/;\n
  var headerLine = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)  ?\\d{1,2} \\d{2}:\\d{2}(:\\d{2})? [A-Z]{3,4} \\d{4} - /;\n
  var simpleEmail = /^[\\w+.-]+@[\\w.-]+/;\n
\n
  return {\n
    token: function(stream) {\n
      if (stream.sol()) {\n
        if (stream.match(headerSeperator)) { return \'tag\'; }\n
        if (stream.match(headerLine)) { return \'tag\'; }\n
      }\n
      if (stream.match(simpleEmail)) { return \'string\'; }\n
      stream.next();\n
      return null;\n
    }\n
  };\n
});\n
\n
CodeMirror.defineMIME("text/x-rpm-changes", "rpm-changes");\n
\n
// Quick and dirty spec file highlighting\n
\n
CodeMirror.defineMode("rpm-spec", function() {\n
  var arch = /^(i386|i586|i686|x86_64|ppc64le|ppc64|ppc|ia64|s390x|s390|sparc64|sparcv9|sparc|noarch|alphaev6|alpha|hppa|mipsel)/;\n
\n
  var preamble = /^[a-zA-Z0-9()]+:/;\n
  var section = /^%(debug_package|package|description|prep|build|install|files|clean|changelog|preinstall|preun|postinstall|postun|pretrans|posttrans|pre|post|triggerin|triggerun|verifyscript|check|triggerpostun|triggerprein|trigger)/;\n
  var control_flow_complex = /^%(ifnarch|ifarch|if)/; // rpm control flow macros\n
  var control_flow_simple = /^%(else|endif)/; // rpm control flow macros\n
  var operators = /^(\\!|\\?|\\<\\=|\\<|\\>\\=|\\>|\\=\\=|\\&\\&|\\|\\|)/; // operators in control flow macros\n
\n
  return {\n
    startState: function () {\n
        return {\n
          controlFlow: false,\n
          macroParameters: false,\n
          section: false\n
        };\n
    },\n
    token: function (stream, state) {\n
      var ch = stream.peek();\n
      if (ch == "#") { stream.skipToEnd(); return "comment"; }\n
\n
      if (stream.sol()) {\n
        if (stream.match(preamble)) { return "header"; }\n
        if (stream.match(section)) { return "atom"; }\n
      }\n
\n
      if (stream.match(/^\\$\\w+/)) { return "def"; } // Variables like \'$RPM_BUILD_ROOT\'\n
      if (stream.match(/^\\$\\{\\w+\\}/)) { return "def"; } // Variables like \'${RPM_BUILD_ROOT}\'\n
\n
      if (stream.match(control_flow_simple)) { return "keyword"; }\n
      if (stream.match(control_flow_complex)) {\n
        state.controlFlow = true;\n
        return "keyword";\n
      }\n
      if (state.controlFlow) {\n
        if (stream.match(operators)) { return "operator"; }\n
        if (stream.match(/^(\\d+)/)) { return "number"; }\n
        if (stream.eol()) { state.controlFlow = false; }\n
      }\n
\n
      if (stream.match(arch)) {\n
        if (stream.eol()) { state.controlFlow = false; }\n
        return "number";\n
      }\n
\n
      // Macros like \'%make_install\' or \'%attr(0775,root,root)\'\n
      if (stream.match(/^%[\\w]+/)) {\n
        if (stream.match(/^\\(/)) { state.macroParameters = true; }\n
        return "keyword";\n
      }\n
      if (state.macroParameters) {\n
        if (stream.match(/^\\d+/)) { return "number";}\n
        if (stream.match(/^\\)/)) {\n
          state.macroParameters = false;\n
          return "keyword";\n
        }\n
      }\n
\n
      // Macros like \'%{defined fedora}\'\n
      if (stream.match(/^%\\{\\??[\\w \\-\\:\\!]+\\}/)) {\n
        if (stream.eol()) { state.controlFlow = false; }\n
        return "def";\n
      }\n
\n
      //TODO: Include bash script sub-parser (CodeMirror supports that)\n
      stream.next();\n
      return null;\n
    }\n
  };\n
});\n
\n
CodeMirror.defineMIME("text/x-rpm-spec", "rpm-spec");\n
\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>3775</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
