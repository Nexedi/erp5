<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604377.37</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>cypher.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
// By the Neo4j Team and contributors.\n
// https://github.com/neo4j-contrib/CodeMirror\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
  "use strict";\n
  var wordRegexp = function(words) {\n
    return new RegExp("^(?:" + words.join("|") + ")$", "i");\n
  };\n
\n
  CodeMirror.defineMode("cypher", function(config) {\n
    var tokenBase = function(stream/*, state*/) {\n
      var ch = stream.next();\n
      if (ch === "\\"" || ch === "\'") {\n
        stream.match(/.+?["\']/);\n
        return "string";\n
      }\n
      if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n
        curPunc = ch;\n
        return "node";\n
      } else if (ch === "/" && stream.eat("/")) {\n
        stream.skipToEnd();\n
        return "comment";\n
      } else if (operatorChars.test(ch)) {\n
        stream.eatWhile(operatorChars);\n
        return null;\n
      } else {\n
        stream.eatWhile(/[_\\w\\d]/);\n
        if (stream.eat(":")) {\n
          stream.eatWhile(/[\\w\\d_\\-]/);\n
          return "atom";\n
        }\n
        var word = stream.current();\n
        if (funcs.test(word)) return "builtin";\n
        if (preds.test(word)) return "def";\n
        if (keywords.test(word)) return "keyword";\n
        return "variable";\n
      }\n
    };\n
    var pushContext = function(state, type, col) {\n
      return state.context = {\n
        prev: state.context,\n
        indent: state.indent,\n
        col: col,\n
        type: type\n
      };\n
    };\n
    var popContext = function(state) {\n
      state.indent = state.context.indent;\n
      return state.context = state.context.prev;\n
    };\n
    var indentUnit = config.indentUnit;\n
    var curPunc;\n
    var funcs = wordRegexp(["abs", "acos", "allShortestPaths", "asin", "atan", "atan2", "avg", "ceil", "coalesce", "collect", "cos", "cot", "count", "degrees", "e", "endnode", "exp", "extract", "filter", "floor", "haversin", "head", "id", "keys", "labels", "last", "left", "length", "log", "log10", "lower", "ltrim", "max", "min", "node", "nodes", "percentileCont", "percentileDisc", "pi", "radians", "rand", "range", "reduce", "rel", "relationship", "relationships", "replace", "reverse", "right", "round", "rtrim", "shortestPath", "sign", "sin", "size", "split", "sqrt", "startnode", "stdev", "stdevp", "str", "substring", "sum", "tail", "tan", "timestamp", "toFloat", "toInt", "toString", "trim", "type", "upper"]);\n
    var preds = wordRegexp(["all", "and", "any", "contains", "exists", "has", "in", "none", "not", "or", "single", "xor"]);\n
    var keywords = wordRegexp(["as", "asc", "ascending", "assert", "by", "case", "commit", "constraint", "create", "csv", "cypher", "delete", "desc", "descending", "detach", "distinct", "drop", "else", "end", "ends", "explain", "false", "fieldterminator", "foreach", "from", "headers", "in", "index", "is", "join", "limit", "load", "match", "merge", "null", "on", "optional", "order", "periodic", "profile", "remove", "return", "scan", "set", "skip", "start", "starts", "then", "true", "union", "unique", "unwind", "using", "when", "where", "with"]);\n
    var operatorChars = /[*+\\-<>=&|~%^]/;\n
\n
    return {\n
      startState: function(/*base*/) {\n
        return {\n
          tokenize: tokenBase,\n
          context: null,\n
          indent: 0,\n
          col: 0\n
        };\n
      },\n
      token: function(stream, state) {\n
        if (stream.sol()) {\n
          if (state.context && (state.context.align == null)) {\n
            state.context.align = false;\n
          }\n
          state.indent = stream.indentation();\n
        }\n
        if (stream.eatSpace()) {\n
          return null;\n
        }\n
        var style = state.tokenize(stream, state);\n
        if (style !== "comment" && state.context && (state.context.align == null) && state.context.type !== "pattern") {\n
          state.context.align = true;\n
        }\n
        if (curPunc === "(") {\n
          pushContext(state, ")", stream.column());\n
        } else if (curPunc === "[") {\n
          pushContext(state, "]", stream.column());\n
        } else if (curPunc === "{") {\n
          pushContext(state, "}", stream.column());\n
        } else if (/[\\]\\}\\)]/.test(curPunc)) {\n
          while (state.context && state.context.type === "pattern") {\n
            popContext(state);\n
          }\n
          if (state.context && curPunc === state.context.type) {\n
            popContext(state);\n
          }\n
        } else if (curPunc === "." && state.context && state.context.type === "pattern") {\n
          popContext(state);\n
        } else if (/atom|string|variable/.test(style) && state.context) {\n
          if (/[\\}\\]]/.test(state.context.type)) {\n
            pushContext(state, "pattern", stream.column());\n
          } else if (state.context.type === "pattern" && !state.context.align) {\n
            state.context.align = true;\n
            state.context.col = stream.column();\n
          }\n
        }\n
        return style;\n
      },\n
      indent: function(state, textAfter) {\n
        var firstChar = textAfter && textAfter.charAt(0);\n
        var context = state.context;\n
        if (/[\\]\\}]/.test(firstChar)) {\n
          while (context && context.type === "pattern") {\n
            context = context.prev;\n
          }\n
        }\n
        var closing = context && firstChar === context.type;\n
        if (!context) return 0;\n
        if (context.type === "keywords") return CodeMirror.commands.newlineAndIndent;\n
        if (context.align) return context.col + (closing ? 0 : 1);\n
        return context.indent + (closing ? 0 : indentUnit);\n
      }\n
    };\n
  });\n
\n
  CodeMirror.modeExtensions["cypher"] = {\n
    autoFormatLineBreaks: function(text) {\n
      var i, lines, reProcessedPortion;\n
      var lines = text.split("\\n");\n
      var reProcessedPortion = /\\s+\\b(return|where|order by|match|with|skip|limit|create|delete|set)\\b\\s/g;\n
      for (var i = 0; i < lines.length; i++)\n
        lines[i] = lines[i].replace(reProcessedPortion, " \\n$1 ").trim();\n
      return lines.join("\\n");\n
    }\n
  };\n
\n
  CodeMirror.defineMIME("application/x-cypher-query", "cypher");\n
\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>6277</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
