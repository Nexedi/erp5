<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604384.32</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>ruby.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
"use strict";\n
\n
CodeMirror.defineMode("ruby", function(config) {\n
  function wordObj(words) {\n
    var o = {};\n
    for (var i = 0, e = words.length; i < e; ++i) o[words[i]] = true;\n
    return o;\n
  }\n
  var keywords = wordObj([\n
    "alias", "and", "BEGIN", "begin", "break", "case", "class", "def", "defined?", "do", "else",\n
    "elsif", "END", "end", "ensure", "false", "for", "if", "in", "module", "next", "not", "or",\n
    "redo", "rescue", "retry", "return", "self", "super", "then", "true", "undef", "unless",\n
    "until", "when", "while", "yield", "nil", "raise", "throw", "catch", "fail", "loop", "callcc",\n
    "caller", "lambda", "proc", "public", "protected", "private", "require", "load",\n
    "require_relative", "extend", "autoload", "__END__", "__FILE__", "__LINE__", "__dir__"\n
  ]);\n
  var indentWords = wordObj(["def", "class", "case", "for", "while", "until", "module", "then",\n
                             "catch", "loop", "proc", "begin"]);\n
  var dedentWords = wordObj(["end", "until"]);\n
  var matching = {"[": "]", "{": "}", "(": ")"};\n
  var curPunc;\n
\n
  function chain(newtok, stream, state) {\n
    state.tokenize.push(newtok);\n
    return newtok(stream, state);\n
  }\n
\n
  function tokenBase(stream, state) {\n
    if (stream.sol() && stream.match("=begin") && stream.eol()) {\n
      state.tokenize.push(readBlockComment);\n
      return "comment";\n
    }\n
    if (stream.eatSpace()) return null;\n
    var ch = stream.next(), m;\n
    if (ch == "`" || ch == "\'" || ch == \'"\') {\n
      return chain(readQuoted(ch, "string", ch == \'"\' || ch == "`"), stream, state);\n
    } else if (ch == "/") {\n
      var currentIndex = stream.current().length;\n
      if (stream.skipTo("/")) {\n
        var search_till = stream.current().length;\n
        stream.backUp(stream.current().length - currentIndex);\n
        var balance = 0;  // balance brackets\n
        while (stream.current().length < search_till) {\n
          var chchr = stream.next();\n
          if (chchr == "(") balance += 1;\n
          else if (chchr == ")") balance -= 1;\n
          if (balance < 0) break;\n
        }\n
        stream.backUp(stream.current().length - currentIndex);\n
        if (balance == 0)\n
          return chain(readQuoted(ch, "string-2", true), stream, state);\n
      }\n
      return "operator";\n
    } else if (ch == "%") {\n
      var style = "string", embed = true;\n
      if (stream.eat("s")) style = "atom";\n
      else if (stream.eat(/[WQ]/)) style = "string";\n
      else if (stream.eat(/[r]/)) style = "string-2";\n
      else if (stream.eat(/[wxq]/)) { style = "string"; embed = false; }\n
      var delim = stream.eat(/[^\\w\\s=]/);\n
      if (!delim) return "operator";\n
      if (matching.propertyIsEnumerable(delim)) delim = matching[delim];\n
      return chain(readQuoted(delim, style, embed, true), stream, state);\n
    } else if (ch == "#") {\n
      stream.skipToEnd();\n
      return "comment";\n
    } else if (ch == "<" && (m = stream.match(/^<-?[\\`\\"\\\']?([a-zA-Z_?]\\w*)[\\`\\"\\\']?(?:;|$)/))) {\n
      return chain(readHereDoc(m[1]), stream, state);\n
    } else if (ch == "0") {\n
      if (stream.eat("x")) stream.eatWhile(/[\\da-fA-F]/);\n
      else if (stream.eat("b")) stream.eatWhile(/[01]/);\n
      else stream.eatWhile(/[0-7]/);\n
      return "number";\n
    } else if (/\\d/.test(ch)) {\n
      stream.match(/^[\\d_]*(?:\\.[\\d_]+)?(?:[eE][+\\-]?[\\d_]+)?/);\n
      return "number";\n
    } else if (ch == "?") {\n
      while (stream.match(/^\\\\[CM]-/)) {}\n
      if (stream.eat("\\\\")) stream.eatWhile(/\\w/);\n
      else stream.next();\n
      return "string";\n
    } else if (ch == ":") {\n
      if (stream.eat("\'")) return chain(readQuoted("\'", "atom", false), stream, state);\n
      if (stream.eat(\'"\')) return chain(readQuoted(\'"\', "atom", true), stream, state);\n
\n
      // :> :>> :< :<< are valid symbols\n
      if (stream.eat(/[\\<\\>]/)) {\n
        stream.eat(/[\\<\\>]/);\n
        return "atom";\n
      }\n
\n
      // :+ :- :/ :* :| :& :! are valid symbols\n
      if (stream.eat(/[\\+\\-\\*\\/\\&\\|\\:\\!]/)) {\n
        return "atom";\n
      }\n
\n
      // Symbols can\'t start by a digit\n
      if (stream.eat(/[a-zA-Z$@_\\xa1-\\uffff]/)) {\n
        stream.eatWhile(/[\\w$\\xa1-\\uffff]/);\n
        // Only one ? ! = is allowed and only as the last character\n
        stream.eat(/[\\?\\!\\=]/);\n
        return "atom";\n
      }\n
      return "operator";\n
    } else if (ch == "@" && stream.match(/^@?[a-zA-Z_\\xa1-\\uffff]/)) {\n
      stream.eat("@");\n
      stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n
      return "variable-2";\n
    } else if (ch == "$") {\n
      if (stream.eat(/[a-zA-Z_]/)) {\n
        stream.eatWhile(/[\\w]/);\n
      } else if (stream.eat(/\\d/)) {\n
        stream.eat(/\\d/);\n
      } else {\n
        stream.next(); // Must be a special global like $: or $!\n
      }\n
      return "variable-3";\n
    } else if (/[a-zA-Z_\\xa1-\\uffff]/.test(ch)) {\n
      stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n
      stream.eat(/[\\?\\!]/);\n
      if (stream.eat(":")) return "atom";\n
      return "ident";\n
    } else if (ch == "|" && (state.varList || state.lastTok == "{" || state.lastTok == "do")) {\n
      curPunc = "|";\n
      return null;\n
    } else if (/[\\(\\)\\[\\]{}\\\\;]/.test(ch)) {\n
      curPunc = ch;\n
      return null;\n
    } else if (ch == "-" && stream.eat(">")) {\n
      return "arrow";\n
    } else if (/[=+\\-\\/*:\\.^%<>~|]/.test(ch)) {\n
      var more = stream.eatWhile(/[=+\\-\\/*:\\.^%<>~|]/);\n
      if (ch == "." && !more) curPunc = ".";\n
      return "operator";\n
    } else {\n
      return null;\n
    }\n
  }\n
\n
  function tokenBaseUntilBrace(depth) {\n
    if (!depth) depth = 1;\n
    return function(stream, state) {\n
      if (stream.peek() == "}") {\n
        if (depth == 1) {\n
          state.tokenize.pop();\n
          return state.tokenize[state.tokenize.length-1](stream, state);\n
        } else {\n
          state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth - 1);\n
        }\n
      } else if (stream.peek() == "{") {\n
        state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth + 1);\n
      }\n
      return tokenBase(stream, state);\n
    };\n
  }\n
  function tokenBaseOnce() {\n
    var alreadyCalled = false;\n
    return function(stream, state) {\n
      if (alreadyCalled) {\n
        state.tokenize.pop();\n
        return state.tokenize[state.tokenize.length-1](stream, state);\n
      }\n
      alreadyCalled = true;\n
      return tokenBase(stream, state);\n
    };\n
  }\n
  function readQuoted(quote, style, embed, unescaped) {\n
    return function(stream, state) {\n
      var escaped = false, ch;\n
\n
      if (state.context.type === \'read-quoted-paused\') {\n
        state.context = state.context.prev;\n
        stream.eat("}");\n
      }\n
\n
      while ((ch = stream.next()) != null) {\n
        if (ch == quote && (unescaped || !escaped)) {\n
          state.tokenize.pop();\n
          break;\n
        }\n
        if (embed && ch == "#" && !escaped) {\n
          if (stream.eat("{")) {\n
            if (quote == "}") {\n
              state.context = {prev: state.context, type: \'read-quoted-paused\'};\n
            }\n
            state.tokenize.push(tokenBaseUntilBrace());\n
            break;\n
          } else if (/[@\\$]/.test(stream.peek())) {\n
            state.tokenize.push(tokenBaseOnce());\n
            break;\n
          }\n
        }\n
        escaped = !escaped && ch == "\\\\";\n
      }\n
      return style;\n
    };\n
  }\n
  function readHereDoc(phrase) {\n
    return function(stream, state) {\n
      if (stream.match(phrase)) state.tokenize.pop();\n
      else stream.skipToEnd();\n
      return "string";\n
    };\n
  }\n
  function readBlockComment(stream, state) {\n
    if (stream.sol() && stream.match("=end") && stream.eol())\n
      state.tokenize.pop();\n
    stream.skipToEnd();\n
    return "comment";\n
  }\n
\n
  return {\n
    startState: function() {\n
      return {tokenize: [tokenBase],\n
              indented: 0,\n
              context: {type: "top", indented: -config.indentUnit},\n
              continuedLine: false,\n
              lastTok: null,\n
              varList: false};\n
    },\n
\n
    token: function(stream, state) {\n
      curPunc = null;\n
      if (stream.sol()) state.indented = stream.indentation();\n
      var style = state.tokenize[state.tokenize.length-1](stream, state), kwtype;\n
      var thisTok = curPunc;\n
      if (style == "ident") {\n
        var word = stream.current();\n
        style = state.lastTok == "." ? "property"\n
          : keywords.propertyIsEnumerable(stream.current()) ? "keyword"\n
          : /^[A-Z]/.test(word) ? "tag"\n
          : (state.lastTok == "def" || state.lastTok == "class" || state.varList) ? "def"\n
          : "variable";\n
        if (style == "keyword") {\n
          thisTok = word;\n
          if (indentWords.propertyIsEnumerable(word)) kwtype = "indent";\n
          else if (dedentWords.propertyIsEnumerable(word)) kwtype = "dedent";\n
          else if ((word == "if" || word == "unless") && stream.column() == stream.indentation())\n
            kwtype = "indent";\n
          else if (word == "do" && state.context.indented < state.indented)\n
            kwtype = "indent";\n
        }\n
      }\n
      if (curPunc || (style && style != "comment")) state.lastTok = thisTok;\n
      if (curPunc == "|") state.varList = !state.varList;\n
\n
      if (kwtype == "indent" || /[\\(\\[\\{]/.test(curPunc))\n
        state.context = {prev: state.context, type: curPunc || style, indented: state.indented};\n
      else if ((kwtype == "dedent" || /[\\)\\]\\}]/.test(curPunc)) && state.context.prev)\n
        state.context = state.context.prev;\n
\n
      if (stream.eol())\n
        state.continuedLine = (curPunc == "\\\\" || style == "operator");\n
      return style;\n
    },\n
\n
    indent: function(state, textAfter) {\n
      if (state.tokenize[state.tokenize.length-1] != tokenBase) return 0;\n
      var firstChar = textAfter && textAfter.charAt(0);\n
      var ct = state.context;\n
      var closing = ct.type == matching[firstChar] ||\n
        ct.type == "keyword" && /^(?:end|until|else|elsif|when|rescue)\\b/.test(textAfter);\n
      return ct.indented + (closing ? 0 : config.indentUnit) +\n
        (state.continuedLine ? config.indentUnit : 0);\n
    },\n
\n
    electricInput: /^\\s*(?:end|rescue|\\})$/,\n
    lineComment: "#"\n
  };\n
});\n
\n
CodeMirror.defineMIME("text/x-ruby", "ruby");\n
\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>10457</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
