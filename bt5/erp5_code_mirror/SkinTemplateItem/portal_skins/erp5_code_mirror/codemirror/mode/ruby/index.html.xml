<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="ZopePageTemplate" module="Products.PageTemplates.ZopePageTemplate"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_text</string> </key>
            <value> <unicode encoding="cdata"><![CDATA[

<!doctype html>\n
\n
<title>CodeMirror: Ruby mode</title>\n
<meta charset="utf-8"/>\n
<link rel=stylesheet href="../../doc/docs.css">\n
\n
<link rel="stylesheet" href="../../lib/codemirror.css">\n
<script src="../../lib/codemirror.js"></script>\n
<script src="../../addon/cm_edit/matchbrackets.js"></script>\n
<script src="ruby.js"></script>\n
<style>\n
      .CodeMirror {border-top: 1px solid black; border-bottom: 1px solid black;}\n
      .cm-s-default span.cm-arrow { color: red; }\n
    </style>\n
<div id=nav>\n
  <a href="http://codemirror.net"><h1>CodeMirror</h1><img id=logo src="../../doc/logo.png"></a>\n
\n
  <ul>\n
    <li><a href="../../index.html">Home</a>\n
    <li><a href="../../doc/manual.html">Manual</a>\n
    <li><a href="https://github.com/codemirror/codemirror">Code</a>\n
  </ul>\n
  <ul>\n
    <li><a href="../index.html">Language modes</a>\n
    <li><a class=active href="#">Ruby</a>\n
  </ul>\n
</div>\n
\n
<article>\n
<h2>Ruby mode</h2>\n
<form><textarea id="code" name="code">\n
# Code from http://sandbox.mc.edu/~bennet/ruby/code/poly_rb.html\n
#\n
# This program evaluates polynomials.  It first asks for the coefficients\n
# of a polynomial, which must be entered on one line, highest-order first.\n
# It then requests values of x and will compute the value of the poly for\n
# each x.  It will repeatly ask for x values, unless you the user enters\n
# a blank line.  It that case, it will ask for another polynomial.  If the\n
# user types quit for either input, the program immediately exits.\n
#\n
\n
#\n
# Function to evaluate a polynomial at x.  The polynomial is given\n
# as a list of coefficients, from the greatest to the least.\n
def polyval(x, coef)\n
    sum = 0\n
    coef = coef.clone           # Don\'t want to destroy the original\n
    while true\n
        sum += coef.shift       # Add and remove the next coef\n
        break if coef.empty?    # If no more, done entirely.\n
        sum *= x                # This happens the right number of times.\n
    end\n
    return sum\n
end\n
\n
#\n
# Function to read a line containing a list of integers and return\n
# them as an array of integers.  If the string conversion fails, it\n
# throws TypeError.  If the input line is the word \'quit\', then it\n
# converts it to an end-of-file exception\n
def readints(prompt)\n
    # Read a line\n
    print prompt\n
    line = readline.chomp\n
    raise EOFError.new if line == \'quit\' # You can also use a real EOF.\n
            \n
    # Go through each item on the line, converting each one and adding it\n
    # to retval.\n
    retval = [ ]\n
    for str in line.split(/\\s+/)\n
        if str =~ /^\\-?\\d+$/\n
            retval.push(str.to_i)\n
        else\n
            raise TypeError.new\n
        end\n
    end\n
\n
    return retval\n
end\n
\n
#\n
# Take a coeff and an exponent and return the string representation, ignoring\n
# the sign of the coefficient.\n
def term_to_str(coef, exp)\n
    ret = ""\n
\n
    # Show coeff, unless it\'s 1 or at the right\n
    coef = coef.abs\n
    ret = coef.to_s     unless coef == 1 && exp > 0\n
    ret += "x" if exp > 0                               # x if exponent not 0\n
    ret += "^" + exp.to_s if exp > 1                    # ^exponent, if > 1.\n
\n
    return ret\n
end\n
\n
#\n
# Create a string of the polynomial in sort-of-readable form.\n
def polystr(p)\n
    # Get the exponent of first coefficient, plus 1.\n
    exp = p.length\n
\n
    # Assign exponents to each term, making pairs of coeff and exponent,\n
    # Then get rid of the zero terms.\n
    p = (p.map { |c| exp -= 1; [ c, exp ] }).select { |p| p[0] != 0 }\n
\n
    # If there\'s nothing left, it\'s a zero\n
    return "0" if p.empty?\n
\n
    # *** Now p is a non-empty list of [ coef, exponent ] pairs. ***\n
\n
    # Convert the first term, preceded by a "-" if it\'s negative.\n
    result = (if p[0][0] < 0 then "-" else "" end) + term_to_str(*p[0])\n
\n
    # Convert the rest of the terms, in each case adding the appropriate\n
    # + or - separating them.  \n
    for term in p[1...p.length]\n
        # Add the separator then the rep. of the term.\n
        result += (if term[0] < 0 then " - " else " + " end) + \n
                term_to_str(*term)\n
    end\n
\n
    return result\n
end\n
        \n
#\n
# Run until some kind of endfile.\n
begin\n
    # Repeat until an exception or quit gets us out.\n
    while true\n
        # Read a poly until it works.  An EOF will except out of the\n
        # program.\n
        print "\\n"\n
        begin\n
            poly = readints("Enter a polynomial coefficients: ")\n
        rescue TypeError\n
            print "Try again.\\n"\n
            retry\n
        end\n
        break if poly.empty?\n
\n
        # Read and evaluate x values until the user types a blank line.\n
        # Again, an EOF will except out of the pgm.\n
        while true\n
            # Request an integer.\n
            print "Enter x value or blank line: "\n
            x = readline.chomp\n
            break if x == \'\'\n
            raise EOFError.new if x == \'quit\'\n
\n
            # If it looks bad, let\'s try again.\n
            if x !~ /^\\-?\\d+$/\n
                print "That doesn\'t look like an integer.  Please try again.\\n"\n
                next\n
            end\n
\n
            # Convert to an integer and print the result.\n
            x = x.to_i\n
            print "p(x) = ", polystr(poly), "\\n"\n
            print "p(", x, ") = ", polyval(x, poly), "\\n"\n
        end\n
    end\n
rescue EOFError\n
    print "\\n=== EOF ===\\n"\n
rescue Interrupt, SignalException\n
    print "\\n=== Interrupted ===\\n"\n
else\n
    print "--- Bye ---\\n"\n
end\n
</textarea></form>\n
    <script>\n
      var editor = CodeMirror.fromTextArea(document.getElementById("code"), {\n
        mode: "text/x-ruby",\n
        matchBrackets: true,\n
        indentUnit: 4\n
      });\n
    </script>\n
\n
    <p><strong>MIME types defined:</strong> <code>text/x-ruby</code>.</p>\n
\n
    <p>Development of the CodeMirror Ruby mode was kindly sponsored\n
    by <a href="http://ubalo.com/">Ubalo</a>.</p>\n
\n
  </article>

]]></unicode> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>text/html</string> </value>
        </item>
        <item>
            <key> <string>expand</string> </key>
            <value> <int>0</int> </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>index.html</string> </value>
        </item>
        <item>
            <key> <string>output_encoding</string> </key>
            <value> <string>iso-8859-15</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
