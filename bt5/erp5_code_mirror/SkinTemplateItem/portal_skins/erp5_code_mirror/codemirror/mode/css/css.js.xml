<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604376.87</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>css.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
"use strict";\n
\n
CodeMirror.defineMode("css", function(config, parserConfig) {\n
  var inline = parserConfig.inline\n
  if (!parserConfig.propertyKeywords) parserConfig = CodeMirror.resolveMode("text/css");\n
\n
  var indentUnit = config.indentUnit,\n
      tokenHooks = parserConfig.tokenHooks,\n
      documentTypes = parserConfig.documentTypes || {},\n
      mediaTypes = parserConfig.mediaTypes || {},\n
      mediaFeatures = parserConfig.mediaFeatures || {},\n
      mediaValueKeywords = parserConfig.mediaValueKeywords || {},\n
      propertyKeywords = parserConfig.propertyKeywords || {},\n
      nonStandardPropertyKeywords = parserConfig.nonStandardPropertyKeywords || {},\n
      fontProperties = parserConfig.fontProperties || {},\n
      counterDescriptors = parserConfig.counterDescriptors || {},\n
      colorKeywords = parserConfig.colorKeywords || {},\n
      valueKeywords = parserConfig.valueKeywords || {},\n
      allowNested = parserConfig.allowNested,\n
      supportsAtComponent = parserConfig.supportsAtComponent === true;\n
\n
  var type, override;\n
  function ret(style, tp) { type = tp; return style; }\n
\n
  // Tokenizers\n
\n
  function tokenBase(stream, state) {\n
    var ch = stream.next();\n
    if (tokenHooks[ch]) {\n
      var result = tokenHooks[ch](stream, state);\n
      if (result !== false) return result;\n
    }\n
    if (ch == "@") {\n
      stream.eatWhile(/[\\w\\\\\\-]/);\n
      return ret("def", stream.current());\n
    } else if (ch == "=" || (ch == "~" || ch == "|") && stream.eat("=")) {\n
      return ret(null, "compare");\n
    } else if (ch == "\\"" || ch == "\'") {\n
      state.tokenize = tokenString(ch);\n
      return state.tokenize(stream, state);\n
    } else if (ch == "#") {\n
      stream.eatWhile(/[\\w\\\\\\-]/);\n
      return ret("atom", "hash");\n
    } else if (ch == "!") {\n
      stream.match(/^\\s*\\w*/);\n
      return ret("keyword", "important");\n
    } else if (/\\d/.test(ch) || ch == "." && stream.eat(/\\d/)) {\n
      stream.eatWhile(/[\\w.%]/);\n
      return ret("number", "unit");\n
    } else if (ch === "-") {\n
      if (/[\\d.]/.test(stream.peek())) {\n
        stream.eatWhile(/[\\w.%]/);\n
        return ret("number", "unit");\n
      } else if (stream.match(/^-[\\w\\\\\\-]+/)) {\n
        stream.eatWhile(/[\\w\\\\\\-]/);\n
        if (stream.match(/^\\s*:/, false))\n
          return ret("variable-2", "variable-definition");\n
        return ret("variable-2", "variable");\n
      } else if (stream.match(/^\\w+-/)) {\n
        return ret("meta", "meta");\n
      }\n
    } else if (/[,+>*\\/]/.test(ch)) {\n
      return ret(null, "select-op");\n
    } else if (ch == "." && stream.match(/^-?[_a-z][_a-z0-9-]*/i)) {\n
      return ret("qualifier", "qualifier");\n
    } else if (/[:;{}\\[\\]\\(\\)]/.test(ch)) {\n
      return ret(null, ch);\n
    } else if ((ch == "u" && stream.match(/rl(-prefix)?\\(/)) ||\n
               (ch == "d" && stream.match("omain(")) ||\n
               (ch == "r" && stream.match("egexp("))) {\n
      stream.backUp(1);\n
      state.tokenize = tokenParenthesized;\n
      return ret("property", "word");\n
    } else if (/[\\w\\\\\\-]/.test(ch)) {\n
      stream.eatWhile(/[\\w\\\\\\-]/);\n
      return ret("property", "word");\n
    } else {\n
      return ret(null, null);\n
    }\n
  }\n
\n
  function tokenString(quote) {\n
    return function(stream, state) {\n
      var escaped = false, ch;\n
      while ((ch = stream.next()) != null) {\n
        if (ch == quote && !escaped) {\n
          if (quote == ")") stream.backUp(1);\n
          break;\n
        }\n
        escaped = !escaped && ch == "\\\\";\n
      }\n
      if (ch == quote || !escaped && quote != ")") state.tokenize = null;\n
      return ret("string", "string");\n
    };\n
  }\n
\n
  function tokenParenthesized(stream, state) {\n
    stream.next(); // Must be \'(\'\n
    if (!stream.match(/\\s*[\\"\\\')]/, false))\n
      state.tokenize = tokenString(")");\n
    else\n
      state.tokenize = null;\n
    return ret(null, "(");\n
  }\n
\n
  // Context management\n
\n
  function Context(type, indent, prev) {\n
    this.type = type;\n
    this.indent = indent;\n
    this.prev = prev;\n
  }\n
\n
  function pushContext(state, stream, type, indent) {\n
    state.context = new Context(type, stream.indentation() + (indent === false ? 0 : indentUnit), state.context);\n
    return type;\n
  }\n
\n
  function popContext(state) {\n
    if (state.context.prev)\n
      state.context = state.context.prev;\n
    return state.context.type;\n
  }\n
\n
  function pass(type, stream, state) {\n
    return states[state.context.type](type, stream, state);\n
  }\n
  function popAndPass(type, stream, state, n) {\n
    for (var i = n || 1; i > 0; i--)\n
      state.context = state.context.prev;\n
    return pass(type, stream, state);\n
  }\n
\n
  // Parser\n
\n
  function wordAsValue(stream) {\n
    var word = stream.current().toLowerCase();\n
    if (valueKeywords.hasOwnProperty(word))\n
      override = "atom";\n
    else if (colorKeywords.hasOwnProperty(word))\n
      override = "keyword";\n
    else\n
      override = "variable";\n
  }\n
\n
  var states = {};\n
\n
  states.top = function(type, stream, state) {\n
    if (type == "{") {\n
      return pushContext(state, stream, "block");\n
    } else if (type == "}" && state.context.prev) {\n
      return popContext(state);\n
    } else if (supportsAtComponent && /@component/.test(type)) {\n
      return pushContext(state, stream, "atComponentBlock");\n
    } else if (/^@(-moz-)?document$/.test(type)) {\n
      return pushContext(state, stream, "documentTypes");\n
    } else if (/^@(media|supports|(-moz-)?document|import)$/.test(type)) {\n
      return pushContext(state, stream, "atBlock");\n
    } else if (/^@(font-face|counter-style)/.test(type)) {\n
      state.stateArg = type;\n
      return "restricted_atBlock_before";\n
    } else if (/^@(-(moz|ms|o|webkit)-)?keyframes$/.test(type)) {\n
      return "keyframes";\n
    } else if (type && type.charAt(0) == "@") {\n
      return pushContext(state, stream, "at");\n
    } else if (type == "hash") {\n
      override = "builtin";\n
    } else if (type == "word") {\n
      override = "tag";\n
    } else if (type == "variable-definition") {\n
      return "maybeprop";\n
    } else if (type == "interpolation") {\n
      return pushContext(state, stream, "interpolation");\n
    } else if (type == ":") {\n
      return "pseudo";\n
    } else if (allowNested && type == "(") {\n
      return pushContext(state, stream, "parens");\n
    }\n
    return state.context.type;\n
  };\n
\n
  states.block = function(type, stream, state) {\n
    if (type == "word") {\n
      var word = stream.current().toLowerCase();\n
      if (propertyKeywords.hasOwnProperty(word)) {\n
        override = "property";\n
        return "maybeprop";\n
      } else if (nonStandardPropertyKeywords.hasOwnProperty(word)) {\n
        override = "string-2";\n
        return "maybeprop";\n
      } else if (allowNested) {\n
        override = stream.match(/^\\s*:(?:\\s|$)/, false) ? "property" : "tag";\n
        return "block";\n
      } else {\n
        override += " error";\n
        return "maybeprop";\n
      }\n
    } else if (type == "meta") {\n
      return "block";\n
    } else if (!allowNested && (type == "hash" || type == "qualifier")) {\n
      override = "error";\n
      return "block";\n
    } else {\n
      return states.top(type, stream, state);\n
    }\n
  };\n
\n
  states.maybeprop = function(type, stream, state) {\n
    if (type == ":") return pushContext(state, stream, "prop");\n
    return pass(type, stream, state);\n
  };\n
\n
  states.prop = function(type, stream, state) {\n
    if (type == ";") return popContext(state);\n
    if (type == "{" && allowNested) return pushContext(state, stream, "propBlock");\n
    if (type == "}" || type == "{") return popAndPass(type, stream, state);\n
    if (type == "(") return pushContext(state, stream, "parens");\n
\n
    if (type == "hash" && !/^#([0-9a-fA-f]{3,4}|[0-9a-fA-f]{6}|[0-9a-fA-f]{8})$/.test(stream.current())) {\n
      override += " error";\n
    } else if (type == "word") {\n
      wordAsValue(stream);\n
    } else if (type == "interpolation") {\n
      return pushContext(state, stream, "interpolation");\n
    }\n
    return "prop";\n
  };\n
\n
  states.propBlock = function(type, _stream, state) {\n
    if (type == "}") return popContext(state);\n
    if (type == "word") { override = "property"; return "maybeprop"; }\n
    return state.context.type;\n
  };\n
\n
  states.parens = function(type, stream, state) {\n
    if (type == "{" || type == "}") return popAndPass(type, stream, state);\n
    if (type == ")") return popContext(state);\n
    if (type == "(") return pushContext(state, stream, "parens");\n
    if (type == "interpolation") return pushContext(state, stream, "interpolation");\n
    if (type == "word") wordAsValue(stream);\n
    return "parens";\n
  };\n
\n
  states.pseudo = function(type, stream, state) {\n
    if (type == "word") {\n
      override = "variable-3";\n
      return state.context.type;\n
    }\n
    return pass(type, stream, state);\n
  };\n
\n
  states.documentTypes = function(type, stream, state) {\n
    if (type == "word" && documentTypes.hasOwnProperty(stream.current())) {\n
      override = "tag";\n
      return state.context.type;\n
    } else {\n
      return states.atBlock(type, stream, state);\n
    }\n
  };\n
\n
  states.atBlock = function(type, stream, state) {\n
    if (type == "(") return pushContext(state, stream, "atBlock_parens");\n
    if (type == "}" || type == ";") return popAndPass(type, stream, state);\n
    if (type == "{") return popContext(state) && pushContext(state, stream, allowNested ? "block" : "top");\n
\n
    if (type == "interpolation") return pushContext(state, stream, "interpolation");\n
\n
    if (type == "word") {\n
      var word = stream.current().toLowerCase();\n
      if (word == "only" || word == "not" || word == "and" || word == "or")\n
        override = "keyword";\n
      else if (mediaTypes.hasOwnProperty(word))\n
        override = "attribute";\n
      else if (mediaFeatures.hasOwnProperty(word))\n
        override = "property";\n
      else if (mediaValueKeywords.hasOwnProperty(word))\n
        override = "keyword";\n
      else if (propertyKeywords.hasOwnProperty(word))\n
        override = "property";\n
      else if (nonStandardPropertyKeywords.hasOwnProperty(word))\n
        override = "string-2";\n
      else if (valueKeywords.hasOwnProperty(word))\n
        override = "atom";\n
      else if (colorKeywords.hasOwnProperty(word))\n
        override = "keyword";\n
      else\n
        override = "error";\n
    }\n
    return state.context.type;\n
  };\n
\n
  states.atComponentBlock = function(type, stream, state) {\n
    if (type == "}")\n
      return popAndPass(type, stream, state);\n
    if (type == "{")\n
      return popContext(state) && pushContext(state, stream, allowNested ? "block" : "top", false);\n
    if (type == "word")\n
      override = "error";\n
    return state.context.type;\n
  };\n
\n
  states.atBlock_parens = function(type, stream, state) {\n
    if (type == ")") return popContext(state);\n
    if (type == "{" || type == "}") return popAndPass(type, stream, state, 2);\n
    return states.atBlock(type, stream, state);\n
  };\n
\n
  states.restricted_atBlock_before = function(type, stream, state) {\n
    if (type == "{")\n
      return pushContext(state, stream, "restricted_atBlock");\n
    if (type == "word" && state.stateArg == "@counter-style") {\n
      override = "variable";\n
      return "restricted_atBlock_before";\n
    }\n
    return pass(type, stream, state);\n
  };\n
\n
  states.restricted_atBlock = function(type, stream, state) {\n
    if (type == "}") {\n
      state.stateArg = null;\n
      return popContext(state);\n
    }\n
    if (type == "word") {\n
      if ((state.stateArg == "@font-face" && !fontProperties.hasOwnProperty(stream.current().toLowerCase())) ||\n
          (state.stateArg == "@counter-style" && !counterDescriptors.hasOwnProperty(stream.current().toLowerCase())))\n
        override = "error";\n
      else\n
        override = "property";\n
      return "maybeprop";\n
    }\n
    return "restricted_atBlock";\n
  };\n
\n
  states.keyframes = function(type, stream, state) {\n
    if (type == "word") { override = "variable"; return "keyframes"; }\n
    if (type == "{") return pushContext(state, stream, "top");\n
    return pass(type, stream, state);\n
  };\n
\n
  states.at = function(type, stream, state) {\n
    if (type == ";") return popContext(state);\n
    if (type == "{" || type == "}") return popAndPass(type, stream, state);\n
    if (type == "word") override = "tag";\n
    else if (type == "hash") override = "builtin";\n
    return "at";\n
  };\n
\n
  states.interpolation = function(type, stream, state) {\n
    if (type == "}") return popContext(state);\n
    if (type == "{" || type == ";") return popAndPass(type, stream, state);\n
    if (type == "word") override = "variable";\n
    else if (type != "variable" && type != "(" && type != ")") override = "error";\n
    return "interpolation";\n
  };\n
\n
  return {\n
    startState: function(base) {\n
      return {tokenize: null,\n
              state: inline ? "block" : "top",\n
              stateArg: null,\n
              context: new Context(inline ? "block" : "top", base || 0, null)};\n
    },\n
\n
    token: function(stream, state) {\n
      if (!state.tokenize && stream.eatSpace()) return null;\n
      var style = (state.tokenize || tokenBase)(stream, state);\n
      if (style && typeof style == "object") {\n
        type = style[1];\n
        style = style[0];\n
      }\n
      override = style;\n
      state.state = states[state.state](type, stream, state);\n
      return override;\n
    },\n
\n
    indent: function(state, textAfter) {\n
      var cx = state.context, ch = textAfter && textAfter.charAt(0);\n
      var indent = cx.indent;\n
      if (cx.type == "prop" && (ch == "}" || ch == ")")) cx = cx.prev;\n
      if (cx.prev) {\n
        if (ch == "}" && (cx.type == "block" || cx.type == "top" ||\n
                          cx.type == "interpolation" || cx.type == "restricted_atBlock")) {\n
          // Resume indentation from parent context.\n
          cx = cx.prev;\n
          indent = cx.indent;\n
        } else if (ch == ")" && (cx.type == "parens" || cx.type == "atBlock_parens") ||\n
            ch == "{" && (cx.type == "at" || cx.type == "atBlock")) {\n
          // Dedent relative to current context.\n
          indent = Math.max(0, cx.indent - indentUnit);\n
          cx = cx.prev;\n
        }\n
      }\n
      return indent;\n
    },\n
\n
    electricChars: "}",\n
    blockCommentStart: "/*",\n
    blockCommentEnd: "*/",\n
    fold: "brace"\n
  };\n
});\n
\n
  function keySet(array) {\n
    var keys = {};\n
    for (var i = 0; i < array.length; ++i) {\n
      keys[array[i]] = true;\n
    }\n
    return keys;\n
  }\n
\n
  var documentTypes_ = [\n
    "domain", "regexp", "url", "url-prefix"\n
  ], documentTypes = keySet(documentTypes_);\n
\n
  var mediaTypes_ = [\n
    "all", "aural", "braille", "handheld", "print", "projection", "screen",\n
    "tty", "tv", "embossed"\n
  ], mediaTypes = keySet(mediaTypes_);\n
\n
  var mediaFeatures_ = [\n
    "width", "min-width", "max-width", "height", "min-height", "max-height",\n
    "device-width", "min-device-width", "max-device-width", "device-height",\n
    "min-device-height", "max-device-height", "aspect-ratio",\n
    "min-aspect-ratio", "max-aspect-ratio", "device-aspect-ratio",\n
    "min-device-aspect-ratio", "max-device-aspect-ratio", "color", "min-color",\n
    "max-color", "color-index", "min-color-index", "max-color-index",\n
    "monochrome", "min-monochrome", "max-monochrome", "resolution",\n
    "min-resolution", "max-resolution", "scan", "grid", "orientation",\n
    "device-pixel-ratio", "min-device-pixel-ratio", "max-device-pixel-ratio",\n
    "pointer", "any-pointer", "hover", "any-hover"\n
  ], mediaFeatures = keySet(mediaFeatures_);\n
\n
  var mediaValueKeywords_ = [\n
    "landscape", "portrait", "none", "coarse", "fine", "on-demand", "hover",\n
    "interlace", "progressive"\n
  ], mediaValueKeywords = keySet(mediaValueKeywords_);\n
\n
  var propertyKeywords_ = [\n
    "align-content", "align-items", "align-self", "alignment-adjust",\n
    "alignment-baseline", "anchor-point", "animation", "animation-delay",\n
    "animation-direction", "animation-duration", "animation-fill-mode",\n
    "animation-iteration-count", "animation-name", "animation-play-state",\n
    "animation-timing-function", "appearance", "azimuth", "backface-visibility",\n
    "background", "background-attachment", "background-blend-mode", "background-clip",\n
    "background-color", "background-image", "background-origin", "background-position",\n
    "background-repeat", "background-size", "baseline-shift", "binding",\n
    "bleed", "bookmark-label", "bookmark-level", "bookmark-state",\n
    "bookmark-target", "border", "border-bottom", "border-bottom-color",\n
    "border-bottom-left-radius", "border-bottom-right-radius",\n
    "border-bottom-style", "border-bottom-width", "border-collapse",\n
    "border-color", "border-image", "border-image-outset",\n
    "border-image-repeat", "border-image-slice", "border-image-source",\n
    "border-image-width", "border-left", "border-left-color",\n
    "border-left-style", "border-left-width", "border-radius", "border-right",\n
    "border-right-color", "border-right-style", "border-right-width",\n
    "border-spacing", "border-style", "border-top", "border-top-color",\n
    "border-top-left-radius", "border-top-right-radius", "border-top-style",\n
    "border-top-width", "border-width", "bottom", "box-decoration-break",\n
    "box-shadow", "box-sizing", "break-after", "break-before", "break-inside",\n
    "caption-side", "clear", "clip", "color", "color-profile", "column-count",\n
    "column-fill", "column-gap", "column-rule", "column-rule-color",\n
    "column-rule-style", "column-rule-width", "column-span", "column-width",\n
    "columns", "content", "counter-increment", "counter-reset", "crop", "cue",\n
    "cue-after", "cue-before", "cursor", "direction", "display",\n
    "dominant-baseline", "drop-initial-after-adjust",\n
    "drop-initial-after-align", "drop-initial-before-adjust",\n
    "drop-initial-before-align", "drop-initial-size", "drop-initial-value",\n
    "elevation", "empty-cells", "fit", "fit-position", "flex", "flex-basis",\n
    "flex-direction", "flex-flow", "flex-grow", "flex-shrink", "flex-wrap",\n
    "float", "float-offset", "flow-from", "flow-into", "font", "font-feature-settings",\n
    "font-family", "font-kerning", "font-language-override", "font-size", "font-size-adjust",\n
    "font-stretch", "font-style", "font-synthesis", "font-variant",\n
    "font-variant-alternates", "font-variant-caps", "font-variant-east-asian",\n
    "font-variant-ligatures", "font-variant-numeric", "font-variant-position",\n
    "font-weight", "grid", "grid-area", "grid-auto-columns", "grid-auto-flow",\n
    "grid-auto-position", "grid-auto-rows", "grid-column", "grid-column-end",\n
    "grid-column-start", "grid-row", "grid-row-end", "grid-row-start",\n
    "grid-template", "grid-template-areas", "grid-template-columns",\n
    "grid-template-rows", "hanging-punctuation", "height", "hyphens",\n
    "icon", "image-orientation", "image-rendering", "image-resolution",\n
    "inline-box-align", "justify-content", "left", "letter-spacing",\n
    "line-break", "line-height", "line-stacking", "line-stacking-ruby",\n
    "line-stacking-shift", "line-stacking-strategy", "list-style",\n
    "list-style-image", "list-style-position", "list-style-type", "margin",\n
    "margin-bottom", "margin-left", "margin-right", "margin-top",\n
    "marker-offset", "marks", "marquee-direction", "marquee-loop",\n
    "marquee-play-count", "marquee-speed", "marquee-style", "max-height",\n
    "max-width", "min-height", "min-width", "move-to", "nav-down", "nav-index",\n
    "nav-left", "nav-right", "nav-up", "object-fit", "object-position",\n
    "opacity", "order", "orphans", "outline",\n
    "outline-color", "outline-offset", "outline-style", "outline-width",\n
    "overflow", "overflow-style", "overflow-wrap", "overflow-x", "overflow-y",\n
    "padding", "padding-bottom", "padding-left", "padding-right", "padding-top",\n
    "page", "page-break-after", "page-break-before", "page-break-inside",\n
    "page-policy", "pause", "pause-after", "pause-before", "perspective",\n
    "perspective-origin", "pitch", "pitch-range", "play-during", "position",\n
    "presentation-level", "punctuation-trim", "quotes", "region-break-after",\n
    "region-break-before", "region-break-inside", "region-fragment",\n
    "rendering-intent", "resize", "rest", "rest-after", "rest-before", "richness",\n
    "right", "rotation", "rotation-point", "ruby-align", "ruby-overhang",\n
    "ruby-position", "ruby-span", "shape-image-threshold", "shape-inside", "shape-margin",\n
    "shape-outside", "size", "speak", "speak-as", "speak-header",\n
    "speak-numeral", "speak-punctuation", "speech-rate", "stress", "string-set",\n
    "tab-size", "table-layout", "target", "target-name", "target-new",\n
    "target-position", "text-align", "text-align-last", "text-decoration",\n
    "text-decoration-color", "text-decoration-line", "text-decoration-skip",\n
    "text-decoration-style", "text-emphasis", "text-emphasis-color",\n
    "text-emphasis-position", "text-emphasis-style", "text-height",\n
    "text-indent", "text-justify", "text-outline", "text-overflow", "text-shadow",\n
    "text-size-adjust", "text-space-collapse", "text-transform", "text-underline-position",\n
    "text-wrap", "top", "transform", "transform-origin", "transform-style",\n
    "transition", "transition-delay", "transition-duration",\n
    "transition-property", "transition-timing-function", "unicode-bidi",\n
    "vertical-align", "visibility", "voice-balance", "voice-duration",\n
    "voice-family", "voice-pitch", "voice-range", "voice-rate", "voice-stress",\n
    "voice-volume", "volume", "white-space", "widows", "width", "word-break",\n
    "word-spacing", "word-wrap", "z-index",\n
    // SVG-specific\n
    "clip-path", "clip-rule", "mask", "enable-background", "filter", "flood-color",\n
    "flood-opacity", "lighting-color", "stop-color", "stop-opacity", "pointer-events",\n
    "color-interpolation", "color-interpolation-filters",\n
    "color-rendering", "fill", "fill-opacity", "fill-rule", "image-rendering",\n
    "marker", "marker-end", "marker-mid", "marker-start", "shape-rendering", "stroke",\n
    "stroke-dasharray", "stroke-dashoffset", "stroke-linecap", "stroke-linejoin",\n
    "stroke-miterlimit", "stroke-opacity", "stroke-width", "text-rendering",\n
    "baseline-shift", "dominant-baseline", "glyph-orientation-horizontal",\n
    "glyph-orientation-vertical", "text-anchor", "writing-mode"\n
  ], propertyKeywords = keySet(propertyKeywords_);\n
\n
  var nonStandardPropertyKeywords_ = [\n
    "scrollbar-arrow-color", "scrollbar-base-color", "scrollbar-dark-shadow-color",\n
    "scrollbar-face-color", "scrollbar-highlight-color", "scrollbar-shadow-color",\n
    "scrollbar-3d-light-color", "scrollbar-track-color", "shape-inside",\n
    "searchfield-cancel-button", "searchfield-decoration", "searchfield-results-button",\n
    "searchfield-results-decoration", "zoom"\n
  ], nonStandardPropertyKeywords = keySet(nonStandardPropertyKeywords_);\n
\n
  var fontProperties_ = [\n
    "font-family", "src", "unicode-range", "font-variant", "font-feature-settings",\n
    "font-stretch", "font-weight", "font-style"\n
  ], fontProperties = keySet(fontProperties_);\n
\n
  var counterDescriptors_ = [\n
    "additive-symbols", "fallback", "negative", "pad", "prefix", "range",\n
    "speak-as", "suffix", "symbols", "system"\n
  ], counterDescriptors = keySet(counterDescriptors_);\n
\n
  var colorKeywords_ = [\n
    "aliceblue", "antiquewhite", "aqua", "aquamarine", "azure", "beige",\n
    "bisque", "black", "blanchedalmond", "blue", "blueviolet", "brown",\n
    "burlywood", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue",\n
    "cornsilk", "crimson", "cyan", "darkblue", "darkcyan", "darkgoldenrod",\n
    "darkgray", "darkgreen", "darkkhaki", "darkmagenta", "darkolivegreen",\n
    "darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen",\n
    "darkslateblue", "darkslategray", "darkturquoise", "darkviolet",\n
    "deeppink", "deepskyblue", "dimgray", "dodgerblue", "firebrick",\n
    "floralwhite", "forestgreen", "fuchsia", "gainsboro", "ghostwhite",\n
    "gold", "goldenrod", "gray", "grey", "green", "greenyellow", "honeydew",\n
    "hotpink", "indianred", "indigo", "ivory", "khaki", "lavender",\n
    "lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral",\n
    "lightcyan", "lightgoldenrodyellow", "lightgray", "lightgreen", "lightpink",\n
    "lightsalmon", "lightseagreen", "lightskyblue", "lightslategray",\n
    "lightsteelblue", "lightyellow", "lime", "limegreen", "linen", "magenta",\n
    "maroon", "mediumaquamarine", "mediumblue", "mediumorchid", "mediumpurple",\n
    "mediumseagreen", "mediumslateblue", "mediumspringgreen", "mediumturquoise",\n
    "mediumvioletred", "midnightblue", "mintcream", "mistyrose", "moccasin",\n
    "navajowhite", "navy", "oldlace", "olive", "olivedrab", "orange", "orangered",\n
    "orchid", "palegoldenrod", "palegreen", "paleturquoise", "palevioletred",\n
    "papayawhip", "peachpuff", "peru", "pink", "plum", "powderblue",\n
    "purple", "rebeccapurple", "red", "rosybrown", "royalblue", "saddlebrown",\n
    "salmon", "sandybrown", "seagreen", "seashell", "sienna", "silver", "skyblue",\n
    "slateblue", "slategray", "snow", "springgreen", "steelblue", "tan",\n
    "teal", "thistle", "tomato", "turquoise", "violet", "wheat", "white",\n
    "whitesmoke", "yellow", "yellowgreen"\n
  ], colorKeywords = keySet(colorKeywords_);\n
\n
  var valueKeywords_ = [\n
    "above", "absolute", "activeborder", "additive", "activecaption", "afar",\n
    "after-white-space", "ahead", "alias", "all", "all-scroll", "alphabetic", "alternate",\n
    "always", "amharic", "amharic-abegede", "antialiased", "appworkspace",\n
    "arabic-indic", "armenian", "asterisks", "attr", "auto", "avoid", "avoid-column", "avoid-page",\n
    "avoid-region", "background", "backwards", "baseline", "below", "bidi-override", "binary",\n
    "bengali", "blink", "block", "block-axis", "bold", "bolder", "border", "border-box",\n
    "both", "bottom", "break", "break-all", "break-word", "bullets", "button", "button-bevel",\n
    "buttonface", "buttonhighlight", "buttonshadow", "buttontext", "calc", "cambodian",\n
    "capitalize", "caps-lock-indicator", "caption", "captiontext", "caret",\n
    "cell", "center", "checkbox", "circle", "cjk-decimal", "cjk-earthly-branch",\n
    "cjk-heavenly-stem", "cjk-ideographic", "clear", "clip", "close-quote",\n
    "col-resize", "collapse", "color", "color-burn", "color-dodge", "column", "column-reverse",\n
    "compact", "condensed", "contain", "content",\n
    "content-box", "context-menu", "continuous", "copy", "counter", "counters", "cover", "crop",\n
    "cross", "crosshair", "currentcolor", "cursive", "cyclic", "darken", "dashed", "decimal",\n
    "decimal-leading-zero", "default", "default-button", "destination-atop",\n
    "destination-in", "destination-out", "destination-over", "devanagari", "difference",\n
    "disc", "discard", "disclosure-closed", "disclosure-open", "document",\n
    "dot-dash", "dot-dot-dash",\n
    "dotted", "double", "down", "e-resize", "ease", "ease-in", "ease-in-out", "ease-out",\n
    "element", "ellipse", "ellipsis", "embed", "end", "ethiopic", "ethiopic-abegede",\n
    "ethiopic-abegede-am-et", "ethiopic-abegede-gez", "ethiopic-abegede-ti-er",\n
    "ethiopic-abegede-ti-et", "ethiopic-halehame-aa-er",\n
    "ethiopic-halehame-aa-et", "ethiopic-halehame-am-et",\n
    "ethiopic-halehame-gez", "ethiopic-halehame-om-et",\n
    "ethiopic-halehame-sid-et", "ethiopic-halehame-so-et",\n
    "ethiopic-halehame-ti-er", "ethiopic-halehame-ti-et", "ethiopic-halehame-tig",\n
    "ethiopic-numeric", "ew-resize", "exclusion", "expanded", "extends", "extra-condensed",\n
    "extra-expanded", "fantasy", "fast", "fill", "fixed", "flat", "flex", "flex-end", "flex-start", "footnotes",\n
    "forwards", "from", "geometricPrecision", "georgian", "graytext", "groove",\n
    "gujarati", "gurmukhi", "hand", "hangul", "hangul-consonant", "hard-light", "hebrew",\n
    "help", "hidden", "hide", "higher", "highlight", "highlighttext",\n
    "hiragana", "hiragana-iroha", "horizontal", "hsl", "hsla", "hue", "icon", "ignore",\n
    "inactiveborder", "inactivecaption", "inactivecaptiontext", "infinite",\n
    "infobackground", "infotext", "inherit", "initial", "inline", "inline-axis",\n
    "inline-block", "inline-flex", "inline-table", "inset", "inside", "intrinsic", "invert",\n
    "italic", "japanese-formal", "japanese-informal", "justify", "kannada",\n
    "katakana", "katakana-iroha", "keep-all", "khmer",\n
    "korean-hangul-formal", "korean-hanja-formal", "korean-hanja-informal",\n
    "landscape", "lao", "large", "larger", "left", "level", "lighter", "lighten",\n
    "line-through", "linear", "linear-gradient", "lines", "list-item", "listbox", "listitem",\n
    "local", "logical", "loud", "lower", "lower-alpha", "lower-armenian",\n
    "lower-greek", "lower-hexadecimal", "lower-latin", "lower-norwegian",\n
    "lower-roman", "lowercase", "ltr", "luminosity", "malayalam", "match", "matrix", "matrix3d",\n
    "media-controls-background", "media-current-time-display",\n
    "media-fullscreen-button", "media-mute-button", "media-play-button",\n
    "media-return-to-realtime-button", "media-rewind-button",\n
    "media-seek-back-button", "media-seek-forward-button", "media-slider",\n
    "media-sliderthumb", "media-time-remaining-display", "media-volume-slider",\n
    "media-volume-slider-container", "media-volume-sliderthumb", "medium",\n
    "menu", "menulist", "menulist-button", "menulist-text",\n
    "menulist-textfield", "menutext", "message-box", "middle", "min-intrinsic",\n
    "mix", "mongolian", "monospace", "move", "multiple", "multiply", "myanmar", "n-resize",\n
    "narrower", "ne-resize", "nesw-resize", "no-close-quote", "no-drop",\n
    "no-open-quote", "no-repeat", "none", "normal", "not-allowed", "nowrap",\n
    "ns-resize", "numbers", "numeric", "nw-resize", "nwse-resize", "oblique", "octal", "open-quote",\n
    "optimizeLegibility", "optimizeSpeed", "oriya", "oromo", "outset",\n
    "outside", "outside-shape", "overlay", "overline", "padding", "padding-box",\n
    "painted", "page", "paused", "persian", "perspective", "plus-darker", "plus-lighter",\n
    "pointer", "polygon", "portrait", "pre", "pre-line", "pre-wrap", "preserve-3d",\n
    "progress", "push-button", "radial-gradient", "radio", "read-only",\n
    "read-write", "read-write-plaintext-only", "rectangle", "region",\n
    "relative", "repeat", "repeating-linear-gradient",\n
    "repeating-radial-gradient", "repeat-x", "repeat-y", "reset", "reverse",\n
    "rgb", "rgba", "ridge", "right", "rotate", "rotate3d", "rotateX", "rotateY",\n
    "rotateZ", "round", "row", "row-resize", "row-reverse", "rtl", "run-in", "running",\n
    "s-resize", "sans-serif", "saturation", "scale", "scale3d", "scaleX", "scaleY", "scaleZ", "screen",\n
    "scroll", "scrollbar", "se-resize", "searchfield",\n
    "searchfield-cancel-button", "searchfield-decoration",\n
    "searchfield-results-button", "searchfield-results-decoration",\n
    "semi-condensed", "semi-expanded", "separate", "serif", "show", "sidama",\n
    "simp-chinese-formal", "simp-chinese-informal", "single",\n
    "skew", "skewX", "skewY", "skip-white-space", "slide", "slider-horizontal",\n
    "slider-vertical", "sliderthumb-horizontal", "sliderthumb-vertical", "slow",\n
    "small", "small-caps", "small-caption", "smaller", "soft-light", "solid", "somali",\n
    "source-atop", "source-in", "source-out", "source-over", "space", "space-around", "space-between", "spell-out", "square",\n
    "square-button", "start", "static", "status-bar", "stretch", "stroke", "sub",\n
    "subpixel-antialiased", "super", "sw-resize", "symbolic", "symbols", "table",\n
    "table-caption", "table-cell", "table-column", "table-column-group",\n
    "table-footer-group", "table-header-group", "table-row", "table-row-group",\n
    "tamil",\n
    "telugu", "text", "text-bottom", "text-top", "textarea", "textfield", "thai",\n
    "thick", "thin", "threeddarkshadow", "threedface", "threedhighlight",\n
    "threedlightshadow", "threedshadow", "tibetan", "tigre", "tigrinya-er",\n
    "tigrinya-er-abegede", "tigrinya-et", "tigrinya-et-abegede", "to", "top",\n
    "trad-chinese-formal", "trad-chinese-informal",\n
    "translate", "translate3d", "translateX", "translateY", "translateZ",\n
    "transparent", "ultra-condensed", "ultra-expanded", "underline", "up",\n
    "upper-alpha", "upper-armenian", "upper-greek", "upper-hexadecimal",\n
    "upper-latin", "upper-norwegian", "upper-roman", "uppercase", "urdu", "url",\n
    "var", "vertical", "vertical-text", "visible", "visibleFill", "visiblePainted",\n
    "visibleStroke", "visual", "w-resize", "wait", "wave", "wider",\n
    "window", "windowframe", "windowtext", "words", "wrap", "wrap-reverse", "x-large", "x-small", "xor",\n
    "xx-large", "xx-small"\n
  ], valueKeywords = keySet(valueKeywords_);\n
\n
  var allWords = documentTypes_.concat(mediaTypes_).concat(mediaFeatures_).concat(mediaValueKeywords_)\n
    .concat(propertyKeywords_).concat(nonStandardPropertyKeywords_).concat(colorKeywords_)\n
    .concat(valueKeywords_);\n
  CodeMirror.registerHelper("hintWords", "css", allWords);\n
\n
  function tokenCComment(stream, state) {\n
    var maybeEnd = false, ch;\n
    while ((ch = stream.next()) != null) {\n
      if (maybeEnd && ch == "/") {\n
        state.tokenize = null;\n
        break;\n
      }\n
      maybeEnd = (ch == "*");\n
    }\n
    return ["comment", "comment"];\n
  }\n
\n
  CodeMirror.defineMIME("text/css", {\n
    documentTypes: documentTypes,\n
    mediaTypes: mediaTypes,\n
    mediaFeatures: mediaFeatures,\n
    mediaValueKeywords: mediaValueKeywords,\n
    propertyKeywords: propertyKeywords,\n
    nonStandardPropertyKeywords: nonStandardPropertyKeywords,\n
    fontProperties: fontProperties,\n
    counterDescriptors: counterDescriptors,\n
    colorKeywords: colorKeywords,\n
    valueKeywords: valueKeywords,\n
    tokenHooks: {\n
      "/": function(stream, state) {\n
        if (!stream.eat("*")) return false;\n
        state.tokenize = tokenCComment;\n
        return tokenCComment(stream, state);\n
      }\n
    },\n
    name: "css"\n
  });\n
\n
  CodeMirror.defineMIME("text/x-scss", {\n
    mediaTypes: mediaTypes,\n
    mediaFeatures: mediaFeatures,\n
    mediaValueKeywords: mediaValueKeywords,\n
    propertyKeywords: propertyKeywords,\n
    nonStandardPropertyKeywords: nonStandardPropertyKeywords,\n
    colorKeywords: colorKeywords,\n
    valueKeywords: valueKeywords,\n
    fontProperties: fontProperties,\n
    allowNested: true,\n
    tokenHooks: {\n
      "/": function(stream, state) {\n
        if (stream.eat("/")) {\n
          stream.skipToEnd();\n
          return ["comment", "comment"];\n
        } else if (stream.eat("*")) {\n
          state.tokenize = tokenCComment;\n
          return tokenCComment(stream, state);\n
        } else {\n
          return ["operator", "operator"];\n
        }\n
      },\n
      ":": function(stream) {\n
        if (stream.match(/\\s*\\{/))\n
          return [null, "{"];\n
        return false;\n
      },\n
      "$": function(stream) {\n
        stream.match(/^[\\w-]+/);\n
        if (stream.match(/^\\s*:/, false))\n
          return ["variable-2", "variable-definition"];\n
        return ["variable-2", "variable"];\n
      },\n
      "#": function(stream) {\n
        if (!stream.eat("{")) return false;\n
        return [null, "interpolation"];\n
      }\n
    },\n
    name: "css",\n
    helperType: "scss"\n
  });\n
\n
  CodeMirror.defineMIME("text/x-less", {\n
    mediaTypes: mediaTypes,\n
    mediaFeatures: mediaFeatures,\n
    mediaValueKeywords: mediaValueKeywords,\n
    propertyKeywords: propertyKeywords,\n
    nonStandardPropertyKeywords: nonStandardPropertyKeywords,\n
    colorKeywords: colorKeywords,\n
    valueKeywords: valueKeywords,\n
    fontProperties: fontProperties,\n
    allowNested: true,\n
    tokenHooks: {\n
      "/": function(stream, state) {\n
        if (stream.eat("/")) {\n
          stream.skipToEnd();\n
          return ["comment", "comment"];\n
        } else if (stream.eat("*")) {\n
          state.tokenize = tokenCComment;\n
          return tokenCComment(stream, state);\n
        } else {\n
          return ["operator", "operator"];\n
        }\n
      },\n
      "@": function(stream) {\n
        if (stream.eat("{")) return [null, "interpolation"];\n
        if (stream.match(/^(charset|document|font-face|import|(-(moz|ms|o|webkit)-)?keyframes|media|namespace|page|supports)\\b/, false)) return false;\n
        stream.eatWhile(/[\\w\\\\\\-]/);\n
        if (stream.match(/^\\s*:/, false))\n
          return ["variable-2", "variable-definition"];\n
        return ["variable-2", "variable"];\n
      },\n
      "&": function() {\n
        return ["atom", "atom"];\n
      }\n
    },\n
    name: "css",\n
    helperType: "less"\n
  });\n
\n
  CodeMirror.defineMIME("text/x-gss", {\n
    documentTypes: documentTypes,\n
    mediaTypes: mediaTypes,\n
    mediaFeatures: mediaFeatures,\n
    propertyKeywords: propertyKeywords,\n
    nonStandardPropertyKeywords: nonStandardPropertyKeywords,\n
    fontProperties: fontProperties,\n
    counterDescriptors: counterDescriptors,\n
    colorKeywords: colorKeywords,\n
    valueKeywords: valueKeywords,\n
    supportsAtComponent: true,\n
    tokenHooks: {\n
      "/": function(stream, state) {\n
        if (!stream.eat("*")) return false;\n
        state.tokenize = tokenCComment;\n
        return tokenCComment(stream, state);\n
      }\n
    },\n
    name: "css",\n
    helperType: "gss"\n
  });\n
\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>37156</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
