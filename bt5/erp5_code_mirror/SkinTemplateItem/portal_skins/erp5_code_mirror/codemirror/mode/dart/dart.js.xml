<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604377.61</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>dart.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"), require("../clike/clike"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror", "../clike/clike"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
  "use strict";\n
\n
  var keywords = ("this super static final const abstract class extends external factory " +\n
    "implements get native operator set typedef with enum throw rethrow " +\n
    "assert break case continue default in return new deferred async await " +\n
    "try catch finally do else for if switch while import library export " +\n
    "part of show hide is as").split(" ");\n
  var blockKeywords = "try catch finally do else for if switch while".split(" ");\n
  var atoms = "true false null".split(" ");\n
  var builtins = "void bool num int double dynamic var String".split(" ");\n
\n
  function set(words) {\n
    var obj = {};\n
    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n
    return obj;\n
  }\n
\n
  function pushInterpolationStack(state) {\n
    (state.interpolationStack || (state.interpolationStack = [])).push(state.tokenize);\n
  }\n
\n
  function popInterpolationStack(state) {\n
    return (state.interpolationStack || (state.interpolationStack = [])).pop();\n
  }\n
\n
  function sizeInterpolationStack(state) {\n
    return state.interpolationStack ? state.interpolationStack.length : 0;\n
  }\n
\n
  CodeMirror.defineMIME("application/dart", {\n
    name: "clike",\n
    keywords: set(keywords),\n
    blockKeywords: set(blockKeywords),\n
    builtin: set(builtins),\n
    atoms: set(atoms),\n
    hooks: {\n
      "@": function(stream) {\n
        stream.eatWhile(/[\\w\\$_\\.]/);\n
        return "meta";\n
      },\n
\n
      // custom string handling to deal with triple-quoted strings and string interpolation\n
      "\'": function(stream, state) {\n
        return tokenString("\'", stream, state, false);\n
      },\n
      "\\"": function(stream, state) {\n
        return tokenString("\\"", stream, state, false);\n
      },\n
      "r": function(stream, state) {\n
        var peek = stream.peek();\n
        if (peek == "\'" || peek == "\\"") {\n
          return tokenString(stream.next(), stream, state, true);\n
        }\n
        return false;\n
      },\n
\n
      "}": function(_stream, state) {\n
        // "}" is end of interpolation, if interpolation stack is non-empty\n
        if (sizeInterpolationStack(state) > 0) {\n
          state.tokenize = popInterpolationStack(state);\n
          return null;\n
        }\n
        return false;\n
      },\n
\n
      "/": function(stream, state) {\n
        if (!stream.eat("*")) return false\n
        state.tokenize = tokenNestedComment(1)\n
        return state.tokenize(stream, state)\n
      }\n
    }\n
  });\n
\n
  function tokenString(quote, stream, state, raw) {\n
    var tripleQuoted = false;\n
    if (stream.eat(quote)) {\n
      if (stream.eat(quote)) tripleQuoted = true;\n
      else return "string"; //empty string\n
    }\n
    function tokenStringHelper(stream, state) {\n
      var escaped = false;\n
      while (!stream.eol()) {\n
        if (!raw && !escaped && stream.peek() == "$") {\n
          pushInterpolationStack(state);\n
          state.tokenize = tokenInterpolation;\n
          return "string";\n
        }\n
        var next = stream.next();\n
        if (next == quote && !escaped && (!tripleQuoted || stream.match(quote + quote))) {\n
          state.tokenize = null;\n
          break;\n
        }\n
        escaped = !raw && !escaped && next == "\\\\";\n
      }\n
      return "string";\n
    }\n
    state.tokenize = tokenStringHelper;\n
    return tokenStringHelper(stream, state);\n
  }\n
\n
  function tokenInterpolation(stream, state) {\n
    stream.eat("$");\n
    if (stream.eat("{")) {\n
      // let clike handle the content of ${...},\n
      // we take over again when "}" appears (see hooks).\n
      state.tokenize = null;\n
    } else {\n
      state.tokenize = tokenInterpolationIdentifier;\n
    }\n
    return null;\n
  }\n
\n
  function tokenInterpolationIdentifier(stream, state) {\n
    stream.eatWhile(/[\\w_]/);\n
    state.tokenize = popInterpolationStack(state);\n
    return "variable";\n
  }\n
\n
  function tokenNestedComment(depth) {\n
    return function (stream, state) {\n
      var ch\n
      while (ch = stream.next()) {\n
        if (ch == "*" && stream.eat("/")) {\n
          if (depth == 1) {\n
            state.tokenize = null\n
            break\n
          } else {\n
            state.tokenize = tokenNestedComment(depth - 1)\n
            return state.tokenize(stream, state)\n
          }\n
        } else if (ch == "/" && stream.eat("*")) {\n
          state.tokenize = tokenNestedComment(depth + 1)\n
          return state.tokenize(stream, state)\n
        }\n
      }\n
      return "comment"\n
    }\n
  }\n
\n
  CodeMirror.registerHelper("hintWords", "application/dart", keywords.concat(atoms).concat(builtins));\n
\n
  // This is needed to make loading through meta.js work.\n
  CodeMirror.defineMode("dart", function(conf) {\n
    return CodeMirror.getMode(conf, "application/dart");\n
  }, "clike");\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>5114</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
