<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="ZopePageTemplate" module="Products.PageTemplates.ZopePageTemplate"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_text</string> </key>
            <value> <unicode encoding="cdata"><![CDATA[

<!doctype html>\n
\n
<title>CodeMirror: Q mode</title>\n
<meta charset="utf-8"/>\n
<link rel=stylesheet href="../../doc/docs.css">\n
\n
<link rel="stylesheet" href="../../lib/codemirror.css">\n
<script src="../../lib/codemirror.js"></script>\n
<script src="../../addon/cm_edit/matchbrackets.js"></script>\n
<script src="q.js"></script>\n
<style type="text/css">.CodeMirror {border-top: 1px solid black; border-bottom: 1px solid black;}</style>\n
<div id=nav>\n
  <a href="http://codemirror.net"><h1>CodeMirror</h1><img id=logo src="../../doc/logo.png"></a>\n
\n
  <ul>\n
    <li><a href="../../index.html">Home</a>\n
    <li><a href="../../doc/manual.html">Manual</a>\n
    <li><a href="https://github.com/codemirror/codemirror">Code</a>\n
  </ul>\n
  <ul>\n
    <li><a href="../index.html">Language modes</a>\n
    <li><a class=active href="#">Q</a>\n
  </ul>\n
</div>\n
\n
<article>\n
<h2>Q mode</h2>\n
\n
\n
<div><textarea id="code" name="code">\n
/ utilities to quickly load a csv file - for more exhaustive analysis of the csv contents see csvguess.q\n
/ 2009.09.20 - updated to match latest csvguess.q \n
\n
/ .csv.colhdrs[file] - return a list of colhdrs from file\n
/ info:.csv.info[file] - return a table of information about the file\n
/ columns are: \n
/\tc - column name; ci - column index; t - load type; mw - max width; \n
/\tdchar - distinct characters in values; rule - rule that caught the type\n
/\tmaybe - needs checking, _could_ be say a date, but perhaps just a float?\n
/ .csv.info0[file;onlycols] - like .csv.info except that it only analyses <onlycols>\n
/ example:\n
/\tinfo:.csv.info0[file;(.csv.colhdrs file)like"*price"]\n
/\tinfo:.csv.infolike[file;"*price"]\n
/\tshow delete from info where t=" "\n
/ .csv.data[file;info] - use the info from .csv.info to read the data\n
/ .csv.data10[file;info] - like .csv.data but only returns the first 10 rows\n
/ bulkload[file;info] - bulk loads file into table DATA (which must be already defined :: DATA:() )\n
/ .csv.read[file]/read10[file] - for when you don\'t care about checking/tweaking the <info> before reading \n
\n
\\d .csv\n
DELIM:","\n
ZAPHDRS:0b / lowercase and remove _ from colhdrs (junk characters are always removed)\n
WIDTHHDR:25000 / number of characters read to get the header\n
READLINES:222 / number of lines read and used to guess the types\n
SYMMAXWIDTH:11 / character columns narrower than this are stored as symbols\n
SYMMAXGR:10 / max symbol granularity% before we give up and keep as a * string\n
FORCECHARWIDTH:30 / every field (of any type) with values this wide or more is forced to character "*"\n
DISCARDEMPTY:0b / completely ignore empty columns if true else set them to "C"\n
CHUNKSIZE:50000000 / used in fs2 (modified .Q.fs)\n
\n
k)nameltrim:{$[~@x;.z.s\'x;~(*x)in aA:.Q.a,.Q.A;(+/&\\~x in aA)_x;x]}\n
k)fs2:{[f;s]((-7!s)>){[f;s;x]i:1+last@&0xa=r:1:(s;x;CHUNKSIZE);f@`\\:i#r;x+i}[f;s]/0j}\n
cleanhdrs:{{$[ZAPHDRS;lower x except"_";x]}x where x in DELIM,.Q.an}\n
cancast:{nw:x$"";if[not x in"BXCS";nw:(min 0#;max 0#;::)@\\:nw];$[not any nw in x$(11&count y)#y;$[11<count y;not any nw in x$y;1b];0b]}\n
\n
read:{[file]data[file;info[file]]}  \n
read10:{[file]data10[file;info[file]]}  \n
\n
colhdrs:{[file]\n
\t`$nameltrim DELIM vs cleanhdrs first read0(file;0;1+first where 0xa=read1(file;0;WIDTHHDR))}\n
data:{[file;info]\n
\t(exec c from info where not t=" ")xcol(exec t from info;enlist DELIM)0:file}\n
data10:{[file;info]\n
\tdata[;info](file;0;1+last 11#where 0xa=read1(file;0;15*WIDTHHDR))}\n
info0:{[file;onlycols]\n
\tcolhdrs:`$nameltrim DELIM vs cleanhdrs first head:read0(file;0;1+last where 0xa=read1(file;0;WIDTHHDR));\n
\tloadfmts:(count colhdrs)#"S";if[count onlycols;loadfmts[where not colhdrs in onlycols]:"C"];\n
\tbreaks:where 0xa=read1(file;0;floor(10+READLINES)*WIDTHHDR%count head);\n
\tnas:count as:colhdrs xcol(loadfmts;enlist DELIM)0:(file;0;1+last((1+READLINES)&count breaks)#breaks);\n
\tinfo:([]c:key flip as;v:value flip as);as:();\n
\treserved:key`.q;reserved,:.Q.res;reserved,:`i;\n
\tinfo:update res:c in reserved from info;\n
\tinfo:update ci:i,t:"?",ipa:0b,mdot:0,mw:0,rule:0,gr:0,ndv:0,maybe:0b,empty:0b,j10:0b,j12:0b from info;\n
\tinfo:update ci:`s#ci from info;\n
\tif[count onlycols;info:update t:" ",rule:10 from info where not c in onlycols];\n
\tinfo:update sdv:{string(distinct x)except`}peach v from info; \n
\tinfo:update ndv:count each sdv from info;\n
\tinfo:update gr:floor 0.5+100*ndv%nas,mw:{max count each x}peach sdv from info where 0<ndv;\n
\tinfo:update t:"*",rule:20 from info where mw>.csv.FORCECHARWIDTH; / long values\n
\tinfo:update t:"C "[.csv.DISCARDEMPTY],rule:30,empty:1b from info where t="?",mw=0; / empty columns\n
\tinfo:update dchar:{asc distinct raze x}peach sdv from info where t="?";\n
\tinfo:update mdot:{max sum each"."=x}peach sdv from info where t="?",{"."in x}each dchar;\n
\tinfo:update t:"n",rule:40 from info where t="?",{any x in"0123456789"}each dchar; / vaguely numeric..\n
\tinfo:update t:"I",rule:50,ipa:1b from info where t="n",mw within 7 15,mdot=3,{all x in".0123456789"}each dchar,.csv.cancast["I"]peach sdv; / ip-address\n
\tinfo:update t:"J",rule:60 from info where t="n",mdot=0,{all x in"+-0123456789"}each dchar,.csv.cancast["J"]peach sdv;\n
\tinfo:update t:"I",rule:70 from info where t="J",mw<12,.csv.cancast["I"]peach sdv;\n
\tinfo:update t:"H",rule:80 from info where t="I",mw<7,.csv.cancast["H"]peach sdv;\n
\tinfo:update t:"F",rule:90 from info where t="n",mdot<2,mw>1,.csv.cancast["F"]peach sdv;\n
\tinfo:update t:"E",rule:100,maybe:1b from info where t="F",mw<9;\n
\tinfo:update t:"M",rule:110,maybe:1b from info where t in"nIHEF",mdot<2,mw within 4 7,.csv.cancast["M"]peach sdv; \n
\tinfo:update t:"D",rule:120,maybe:1b from info where t in"nI",mdot in 0 2,mw within 6 11,.csv.cancast["D"]peach sdv; \n
\tinfo:update t:"V",rule:130,maybe:1b from info where t="I",mw in 5 6,7<count each dchar,{all x like"*[0-9][0-5][0-9][0-5][0-9]"}peach sdv,.csv.cancast["V"]peach sdv; / 235959 12345        \n
\tinfo:update t:"U",rule:140,maybe:1b from info where t="H",mw in 3 4,7<count each dchar,{all x like"*[0-9][0-5][0-9]"}peach sdv,.csv.cancast["U"]peach sdv; /2359\n
\tinfo:update t:"U",rule:150,maybe:0b from info where t="n",mw in 4 5,mdot=0,{all x like"*[0-9]:[0-5][0-9]"}peach sdv,.csv.cancast["U"]peach sdv;\n
\tinfo:update t:"T",rule:160,maybe:0b from info where t="n",mw within 7 12,mdot<2,{all x like"*[0-9]:[0-5][0-9]:[0-5][0-9]*"}peach sdv,.csv.cancast["T"]peach sdv;\n
\tinfo:update t:"V",rule:170,maybe:0b from info where t="T",mw in 7 8,mdot=0,.csv.cancast["V"]peach sdv;\n
\tinfo:update t:"T",rule:180,maybe:1b from info where t in"EF",mw within 7 10,mdot=1,{all x like"*[0-9][0-5][0-9][0-5][0-9].*"}peach sdv,.csv.cancast["T"]peach sdv;\n
\tinfo:update t:"Z",rule:190,maybe:0b from info where t="n",mw within 11 24,mdot<4,.csv.cancast["Z"]peach sdv;\n
\tinfo:update t:"P",rule:200,maybe:1b from info where t="n",mw within 12 29,mdot<4,{all x like"[12]*"}peach sdv,.csv.cancast["P"]peach sdv;\n
\tinfo:update t:"N",rule:210,maybe:1b from info where t="n",mw within 3 28,mdot=1,.csv.cancast["N"]peach sdv;\n
\tinfo:update t:"?",rule:220,maybe:0b from info where t="n"; / reset remaining maybe numeric\n
\tinfo:update t:"C",rule:230,maybe:0b from info where t="?",mw=1; / char\n
\tinfo:update t:"B",rule:240,maybe:0b from info where t in"HC",mw=1,mdot=0,{$[all x in"01tTfFyYnN";(any"0fFnN"in x)and any"1tTyY"in x;0b]}each dchar; / boolean\n
\tinfo:update t:"B",rule:250,maybe:1b from info where t in"HC",mw=1,mdot=0,{all x in"01tTfFyYnN"}each dchar; / boolean\n
\tinfo:update t:"X",rule:260,maybe:0b from info where t="?",mw=2,{$[all x in"0123456789abcdefABCDEF";(any .Q.n in x)and any"abcdefABCDEF"in x;0b]}each dchar; /hex\n
\tinfo:update t:"S",rule:270,maybe:1b from info where t="?",mw<.csv.SYMMAXWIDTH,mw>1,gr<.csv.SYMMAXGR; / symbols (max width permitting)\n
\tinfo:update t:"*",rule:280,maybe:0b from info where t="?"; / the rest as strings\n
\t/ flag those S/* columns which could be encoded to integers (.Q.j10/x10/j12/x12) to avoid symbols\n
\tinfo:update j12:1b from info where t in"S*",mw<13,{all x in .Q.nA}each dchar;\n
\tinfo:update j10:1b from info where t in"S*",mw<11,{all x in .Q.b6}each dchar; \n
\tselect c,ci,t,maybe,empty,res,j10,j12,ipa,mw,mdot,rule,gr,ndv,dchar from info}\n
info:info0[;()] / by default don\'t restrict columns\n
infolike:{[file;pattern] info0[file;{x where x like y}[lower colhdrs[file];pattern]]} / .csv.infolike[file;"*time"]\n
\n
\\d .\n
/ DATA:()\n
bulkload:{[file;info]\n
\tif[not`DATA in system"v";\'`DATA.not.defined];\n
\tif[count DATA;\'`DATA.not.empty];\n
\tloadhdrs:exec c from info where not t=" ";loadfmts:exec t from info;\n
\t.csv.fs2[{[file;loadhdrs;loadfmts] `DATA insert $[count DATA;flip loadhdrs!(loadfmts;.csv.DELIM)0:file;loadhdrs xcol(loadfmts;enlist .csv.DELIM)0:file]}[file;loadhdrs;loadfmts]];\n
\tcount DATA}\n
@[.:;"\\\\l csvutil.custom.q";::]; / save your custom settings in csvutil.custom.q to override those set at the beginning of the file \n
</textarea></div>\n
\n
    <script>\n
      var editor = CodeMirror.fromTextArea(document.getElementById("code"), {\n
        lineNumbers: true,\n
        matchBrackets: true\n
      });\n
    </script>\n
\n
    <p><strong>MIME type defined:</strong> <code>text/x-q</code>.</p>\n
  </article>

]]></unicode> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>text/html</string> </value>
        </item>
        <item>
            <key> <string>expand</string> </key>
            <value> <int>0</int> </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>index.html</string> </value>
        </item>
        <item>
            <key> <string>output_encoding</string> </key>
            <value> <string>iso-8859-15</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
