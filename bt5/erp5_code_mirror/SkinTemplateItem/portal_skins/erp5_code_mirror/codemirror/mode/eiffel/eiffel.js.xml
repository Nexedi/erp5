<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604378.48</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>eiffel.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
"use strict";\n
\n
CodeMirror.defineMode("eiffel", function() {\n
  function wordObj(words) {\n
    var o = {};\n
    for (var i = 0, e = words.length; i < e; ++i) o[words[i]] = true;\n
    return o;\n
  }\n
  var keywords = wordObj([\n
    \'note\',\n
    \'across\',\n
    \'when\',\n
    \'variant\',\n
    \'until\',\n
    \'unique\',\n
    \'undefine\',\n
    \'then\',\n
    \'strip\',\n
    \'select\',\n
    \'retry\',\n
    \'rescue\',\n
    \'require\',\n
    \'rename\',\n
    \'reference\',\n
    \'redefine\',\n
    \'prefix\',\n
    \'once\',\n
    \'old\',\n
    \'obsolete\',\n
    \'loop\',\n
    \'local\',\n
    \'like\',\n
    \'is\',\n
    \'inspect\',\n
    \'infix\',\n
    \'include\',\n
    \'if\',\n
    \'frozen\',\n
    \'from\',\n
    \'external\',\n
    \'export\',\n
    \'ensure\',\n
    \'end\',\n
    \'elseif\',\n
    \'else\',\n
    \'do\',\n
    \'creation\',\n
    \'create\',\n
    \'check\',\n
    \'alias\',\n
    \'agent\',\n
    \'separate\',\n
    \'invariant\',\n
    \'inherit\',\n
    \'indexing\',\n
    \'feature\',\n
    \'expanded\',\n
    \'deferred\',\n
    \'class\',\n
    \'Void\',\n
    \'True\',\n
    \'Result\',\n
    \'Precursor\',\n
    \'False\',\n
    \'Current\',\n
    \'create\',\n
    \'attached\',\n
    \'detachable\',\n
    \'as\',\n
    \'and\',\n
    \'implies\',\n
    \'not\',\n
    \'or\'\n
  ]);\n
  var operators = wordObj([":=", "and then","and", "or","<<",">>"]);\n
\n
  function chain(newtok, stream, state) {\n
    state.tokenize.push(newtok);\n
    return newtok(stream, state);\n
  }\n
\n
  function tokenBase(stream, state) {\n
    if (stream.eatSpace()) return null;\n
    var ch = stream.next();\n
    if (ch == \'"\'||ch == "\'") {\n
      return chain(readQuoted(ch, "string"), stream, state);\n
    } else if (ch == "-"&&stream.eat("-")) {\n
      stream.skipToEnd();\n
      return "comment";\n
    } else if (ch == ":"&&stream.eat("=")) {\n
      return "operator";\n
    } else if (/[0-9]/.test(ch)) {\n
      stream.eatWhile(/[xXbBCc0-9\\.]/);\n
      stream.eat(/[\\?\\!]/);\n
      return "ident";\n
    } else if (/[a-zA-Z_0-9]/.test(ch)) {\n
      stream.eatWhile(/[a-zA-Z_0-9]/);\n
      stream.eat(/[\\?\\!]/);\n
      return "ident";\n
    } else if (/[=+\\-\\/*^%<>~]/.test(ch)) {\n
      stream.eatWhile(/[=+\\-\\/*^%<>~]/);\n
      return "operator";\n
    } else {\n
      return null;\n
    }\n
  }\n
\n
  function readQuoted(quote, style,  unescaped) {\n
    return function(stream, state) {\n
      var escaped = false, ch;\n
      while ((ch = stream.next()) != null) {\n
        if (ch == quote && (unescaped || !escaped)) {\n
          state.tokenize.pop();\n
          break;\n
        }\n
        escaped = !escaped && ch == "%";\n
      }\n
      return style;\n
    };\n
  }\n
\n
  return {\n
    startState: function() {\n
      return {tokenize: [tokenBase]};\n
    },\n
\n
    token: function(stream, state) {\n
      var style = state.tokenize[state.tokenize.length-1](stream, state);\n
      if (style == "ident") {\n
        var word = stream.current();\n
        style = keywords.propertyIsEnumerable(stream.current()) ? "keyword"\n
          : operators.propertyIsEnumerable(stream.current()) ? "operator"\n
          : /^[A-Z][A-Z_0-9]*$/g.test(word) ? "tag"\n
          : /^0[bB][0-1]+$/g.test(word) ? "number"\n
          : /^0[cC][0-7]+$/g.test(word) ? "number"\n
          : /^0[xX][a-fA-F0-9]+$/g.test(word) ? "number"\n
          : /^([0-9]+\\.[0-9]*)|([0-9]*\\.[0-9]+)$/g.test(word) ? "number"\n
          : /^[0-9]+$/g.test(word) ? "number"\n
          : "variable";\n
      }\n
      return style;\n
    },\n
    lineComment: "--"\n
  };\n
});\n
\n
CodeMirror.defineMIME("text/x-eiffel", "eiffel");\n
\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>3744</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
