<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="ZopePageTemplate" module="Products.PageTemplates.ZopePageTemplate"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_text</string> </key>
            <value> <unicode encoding="cdata"><![CDATA[

<!doctype html>\n
\n
<title>CodeMirror: Go mode</title>\n
<meta charset="utf-8"/>\n
<link rel=stylesheet href="../../doc/docs.css">\n
\n
<link rel="stylesheet" href="../../lib/codemirror.css">\n
<link rel="stylesheet" href="../../theme/elegant.css">\n
<script src="../../lib/codemirror.js"></script>\n
<script src="../../addon/cm_edit/matchbrackets.js"></script>\n
<script src="go.js"></script>\n
<style>.CodeMirror {border:1px solid #999; background:#ffc}</style>\n
<div id=nav>\n
  <a href="http://codemirror.net"><h1>CodeMirror</h1><img id=logo src="../../doc/logo.png"></a>\n
\n
  <ul>\n
    <li><a href="../../index.html">Home</a>\n
    <li><a href="../../doc/manual.html">Manual</a>\n
    <li><a href="https://github.com/codemirror/codemirror">Code</a>\n
  </ul>\n
  <ul>\n
    <li><a href="../index.html">Language modes</a>\n
    <li><a class=active href="#">Go</a>\n
  </ul>\n
</div>\n
\n
<article>\n
<h2>Go mode</h2>\n
<form><textarea id="code" name="code">\n
// Prime Sieve in Go.\n
// Taken from the Go specification.\n
// Copyright Â© The Go Authors.\n
\n
package main\n
\n
import "fmt"\n
\n
// Send the sequence 2, 3, 4, ... to channel \'ch\'.\n
func generate(ch chan&lt;- int) {\n
\tfor i := 2; ; i++ {\n
\t\tch &lt;- i  // Send \'i\' to channel \'ch\'\n
\t}\n
}\n
\n
// Copy the values from channel \'src\' to channel \'dst\',\n
// removing those divisible by \'prime\'.\n
func filter(src &lt;-chan int, dst chan&lt;- int, prime int) {\n
\tfor i := range src {    // Loop over values received from \'src\'.\n
\t\tif i%prime != 0 {\n
\t\t\tdst &lt;- i  // Send \'i\' to channel \'dst\'.\n
\t\t}\n
\t}\n
}\n
\n
// The prime sieve: Daisy-chain filter processes together.\n
func sieve() {\n
\tch := make(chan int)  // Create a new channel.\n
\tgo generate(ch)       // Start generate() as a subprocess.\n
\tfor {\n
\t\tprime := &lt;-ch\n
\t\tfmt.Print(prime, "\\n")\n
\t\tch1 := make(chan int)\n
\t\tgo filter(ch, ch1, prime)\n
\t\tch = ch1\n
\t}\n
}\n
\n
func main() {\n
\tsieve()\n
}\n
</textarea></form>\n
\n
    <script>\n
      var editor = CodeMirror.fromTextArea(document.getElementById("code"), {\n
        theme: "elegant",\n
        matchBrackets: true,\n
        indentUnit: 8,\n
        tabSize: 8,\n
        indentWithTabs: true,\n
        mode: "text/x-go"\n
      });\n
    </script>\n
\n
    <p><strong>MIME type:</strong> <code>text/x-go</code></p>\n
  </article>

]]></unicode> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>text/html</string> </value>
        </item>
        <item>
            <key> <string>expand</string> </key>
            <value> <int>0</int> </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>index.html</string> </value>
        </item>
        <item>
            <key> <string>output_encoding</string> </key>
            <value> <string>iso-8859-15</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
