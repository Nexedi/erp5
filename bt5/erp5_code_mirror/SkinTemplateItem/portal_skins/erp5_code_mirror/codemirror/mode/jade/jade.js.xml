<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604380.86</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>jade.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"), require("../javascript/javascript"), require("../css/css"), require("../htmlmixed/htmlmixed"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror", "../javascript/javascript", "../css/css", "../htmlmixed/htmlmixed"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
"use strict";\n
\n
CodeMirror.defineMode(\'jade\', function (config) {\n
  // token types\n
  var KEYWORD = \'keyword\';\n
  var DOCTYPE = \'meta\';\n
  var ID = \'builtin\';\n
  var CLASS = \'qualifier\';\n
\n
  var ATTRS_NEST = {\n
    \'{\': \'}\',\n
    \'(\': \')\',\n
    \'[\': \']\'\n
  };\n
\n
  var jsMode = CodeMirror.getMode(config, \'javascript\');\n
\n
  function State() {\n
    this.javaScriptLine = false;\n
    this.javaScriptLineExcludesColon = false;\n
\n
    this.javaScriptArguments = false;\n
    this.javaScriptArgumentsDepth = 0;\n
\n
    this.isInterpolating = false;\n
    this.interpolationNesting = 0;\n
\n
    this.jsState = jsMode.startState();\n
\n
    this.restOfLine = \'\';\n
\n
    this.isIncludeFiltered = false;\n
    this.isEach = false;\n
\n
    this.lastTag = \'\';\n
    this.scriptType = \'\';\n
\n
    // Attributes Mode\n
    this.isAttrs = false;\n
    this.attrsNest = [];\n
    this.inAttributeName = true;\n
    this.attributeIsType = false;\n
    this.attrValue = \'\';\n
\n
    // Indented Mode\n
    this.indentOf = Infinity;\n
    this.indentToken = \'\';\n
\n
    this.innerMode = null;\n
    this.innerState = null;\n
\n
    this.innerModeForLine = false;\n
  }\n
  /**\n
   * Safely copy a state\n
   *\n
   * @return {State}\n
   */\n
  State.prototype.copy = function () {\n
    var res = new State();\n
    res.javaScriptLine = this.javaScriptLine;\n
    res.javaScriptLineExcludesColon = this.javaScriptLineExcludesColon;\n
    res.javaScriptArguments = this.javaScriptArguments;\n
    res.javaScriptArgumentsDepth = this.javaScriptArgumentsDepth;\n
    res.isInterpolating = this.isInterpolating;\n
    res.interpolationNesting = this.interpolationNesting;\n
\n
    res.jsState = CodeMirror.copyState(jsMode, this.jsState);\n
\n
    res.innerMode = this.innerMode;\n
    if (this.innerMode && this.innerState) {\n
      res.innerState = CodeMirror.copyState(this.innerMode, this.innerState);\n
    }\n
\n
    res.restOfLine = this.restOfLine;\n
\n
    res.isIncludeFiltered = this.isIncludeFiltered;\n
    res.isEach = this.isEach;\n
    res.lastTag = this.lastTag;\n
    res.scriptType = this.scriptType;\n
    res.isAttrs = this.isAttrs;\n
    res.attrsNest = this.attrsNest.slice();\n
    res.inAttributeName = this.inAttributeName;\n
    res.attributeIsType = this.attributeIsType;\n
    res.attrValue = this.attrValue;\n
    res.indentOf = this.indentOf;\n
    res.indentToken = this.indentToken;\n
\n
    res.innerModeForLine = this.innerModeForLine;\n
\n
    return res;\n
  };\n
\n
  function javaScript(stream, state) {\n
    if (stream.sol()) {\n
      // if javaScriptLine was set at end of line, ignore it\n
      state.javaScriptLine = false;\n
      state.javaScriptLineExcludesColon = false;\n
    }\n
    if (state.javaScriptLine) {\n
      if (state.javaScriptLineExcludesColon && stream.peek() === \':\') {\n
        state.javaScriptLine = false;\n
        state.javaScriptLineExcludesColon = false;\n
        return;\n
      }\n
      var tok = jsMode.token(stream, state.jsState);\n
      if (stream.eol()) state.javaScriptLine = false;\n
      return tok || true;\n
    }\n
  }\n
  function javaScriptArguments(stream, state) {\n
    if (state.javaScriptArguments) {\n
      if (state.javaScriptArgumentsDepth === 0 && stream.peek() !== \'(\') {\n
        state.javaScriptArguments = false;\n
        return;\n
      }\n
      if (stream.peek() === \'(\') {\n
        state.javaScriptArgumentsDepth++;\n
      } else if (stream.peek() === \')\') {\n
        state.javaScriptArgumentsDepth--;\n
      }\n
      if (state.javaScriptArgumentsDepth === 0) {\n
        state.javaScriptArguments = false;\n
        return;\n
      }\n
\n
      var tok = jsMode.token(stream, state.jsState);\n
      return tok || true;\n
    }\n
  }\n
\n
  function yieldStatement(stream) {\n
    if (stream.match(/^yield\\b/)) {\n
        return \'keyword\';\n
    }\n
  }\n
\n
  function doctype(stream) {\n
    if (stream.match(/^(?:doctype) *([^\\n]+)?/)) {\n
        return DOCTYPE;\n
    }\n
  }\n
\n
  function interpolation(stream, state) {\n
    if (stream.match(\'#{\')) {\n
      state.isInterpolating = true;\n
      state.interpolationNesting = 0;\n
      return \'punctuation\';\n
    }\n
  }\n
\n
  function interpolationContinued(stream, state) {\n
    if (state.isInterpolating) {\n
      if (stream.peek() === \'}\') {\n
        state.interpolationNesting--;\n
        if (state.interpolationNesting < 0) {\n
          stream.next();\n
          state.isInterpolating = false;\n
          return \'punctuation\';\n
        }\n
      } else if (stream.peek() === \'{\') {\n
        state.interpolationNesting++;\n
      }\n
      return jsMode.token(stream, state.jsState) || true;\n
    }\n
  }\n
\n
  function caseStatement(stream, state) {\n
    if (stream.match(/^case\\b/)) {\n
      state.javaScriptLine = true;\n
      return KEYWORD;\n
    }\n
  }\n
\n
  function when(stream, state) {\n
    if (stream.match(/^when\\b/)) {\n
      state.javaScriptLine = true;\n
      state.javaScriptLineExcludesColon = true;\n
      return KEYWORD;\n
    }\n
  }\n
\n
  function defaultStatement(stream) {\n
    if (stream.match(/^default\\b/)) {\n
      return KEYWORD;\n
    }\n
  }\n
\n
  function extendsStatement(stream, state) {\n
    if (stream.match(/^extends?\\b/)) {\n
      state.restOfLine = \'string\';\n
      return KEYWORD;\n
    }\n
  }\n
\n
  function append(stream, state) {\n
    if (stream.match(/^append\\b/)) {\n
      state.restOfLine = \'variable\';\n
      return KEYWORD;\n
    }\n
  }\n
  function prepend(stream, state) {\n
    if (stream.match(/^prepend\\b/)) {\n
      state.restOfLine = \'variable\';\n
      return KEYWORD;\n
    }\n
  }\n
  function block(stream, state) {\n
    if (stream.match(/^block\\b *(?:(prepend|append)\\b)?/)) {\n
      state.restOfLine = \'variable\';\n
      return KEYWORD;\n
    }\n
  }\n
\n
  function include(stream, state) {\n
    if (stream.match(/^include\\b/)) {\n
      state.restOfLine = \'string\';\n
      return KEYWORD;\n
    }\n
  }\n
\n
  function includeFiltered(stream, state) {\n
    if (stream.match(/^include:([a-zA-Z0-9\\-]+)/, false) && stream.match(\'include\')) {\n
      state.isIncludeFiltered = true;\n
      return KEYWORD;\n
    }\n
  }\n
\n
  function includeFilteredContinued(stream, state) {\n
    if (state.isIncludeFiltered) {\n
      var tok = filter(stream, state);\n
      state.isIncludeFiltered = false;\n
      state.restOfLine = \'string\';\n
      return tok;\n
    }\n
  }\n
\n
  function mixin(stream, state) {\n
    if (stream.match(/^mixin\\b/)) {\n
      state.javaScriptLine = true;\n
      return KEYWORD;\n
    }\n
  }\n
\n
  function call(stream, state) {\n
    if (stream.match(/^\\+([-\\w]+)/)) {\n
      if (!stream.match(/^\\( *[-\\w]+ *=/, false)) {\n
        state.javaScriptArguments = true;\n
        state.javaScriptArgumentsDepth = 0;\n
      }\n
      return \'variable\';\n
    }\n
    if (stream.match(/^\\+#{/, false)) {\n
      stream.next();\n
      state.mixinCallAfter = true;\n
      return interpolation(stream, state);\n
    }\n
  }\n
  function callArguments(stream, state) {\n
    if (state.mixinCallAfter) {\n
      state.mixinCallAfter = false;\n
      if (!stream.match(/^\\( *[-\\w]+ *=/, false)) {\n
        state.javaScriptArguments = true;\n
        state.javaScriptArgumentsDepth = 0;\n
      }\n
      return true;\n
    }\n
  }\n
\n
  function conditional(stream, state) {\n
    if (stream.match(/^(if|unless|else if|else)\\b/)) {\n
      state.javaScriptLine = true;\n
      return KEYWORD;\n
    }\n
  }\n
\n
  function each(stream, state) {\n
    if (stream.match(/^(- *)?(each|for)\\b/)) {\n
      state.isEach = true;\n
      return KEYWORD;\n
    }\n
  }\n
  function eachContinued(stream, state) {\n
    if (state.isEach) {\n
      if (stream.match(/^ in\\b/)) {\n
        state.javaScriptLine = true;\n
        state.isEach = false;\n
        return KEYWORD;\n
      } else if (stream.sol() || stream.eol()) {\n
        state.isEach = false;\n
      } else if (stream.next()) {\n
        while (!stream.match(/^ in\\b/, false) && stream.next());\n
        return \'variable\';\n
      }\n
    }\n
  }\n
\n
  function whileStatement(stream, state) {\n
    if (stream.match(/^while\\b/)) {\n
      state.javaScriptLine = true;\n
      return KEYWORD;\n
    }\n
  }\n
\n
  function tag(stream, state) {\n
    var captures;\n
    if (captures = stream.match(/^(\\w(?:[-:\\w]*\\w)?)\\/?/)) {\n
      state.lastTag = captures[1].toLowerCase();\n
      if (state.lastTag === \'script\') {\n
        state.scriptType = \'application/javascript\';\n
      }\n
      return \'tag\';\n
    }\n
  }\n
\n
  function filter(stream, state) {\n
    if (stream.match(/^:([\\w\\-]+)/)) {\n
      var innerMode;\n
      if (config && config.innerModes) {\n
        innerMode = config.innerModes(stream.current().substring(1));\n
      }\n
      if (!innerMode) {\n
        innerMode = stream.current().substring(1);\n
      }\n
      if (typeof innerMode === \'string\') {\n
        innerMode = CodeMirror.getMode(config, innerMode);\n
      }\n
      setInnerMode(stream, state, innerMode);\n
      return \'atom\';\n
    }\n
  }\n
\n
  function code(stream, state) {\n
    if (stream.match(/^(!?=|-)/)) {\n
      state.javaScriptLine = true;\n
      return \'punctuation\';\n
    }\n
  }\n
\n
  function id(stream) {\n
    if (stream.match(/^#([\\w-]+)/)) {\n
      return ID;\n
    }\n
  }\n
\n
  function className(stream) {\n
    if (stream.match(/^\\.([\\w-]+)/)) {\n
      return CLASS;\n
    }\n
  }\n
\n
  function attrs(stream, state) {\n
    if (stream.peek() == \'(\') {\n
      stream.next();\n
      state.isAttrs = true;\n
      state.attrsNest = [];\n
      state.inAttributeName = true;\n
      state.attrValue = \'\';\n
      state.attributeIsType = false;\n
      return \'punctuation\';\n
    }\n
  }\n
\n
  function attrsContinued(stream, state) {\n
    if (state.isAttrs) {\n
      if (ATTRS_NEST[stream.peek()]) {\n
        state.attrsNest.push(ATTRS_NEST[stream.peek()]);\n
      }\n
      if (state.attrsNest[state.attrsNest.length - 1] === stream.peek()) {\n
        state.attrsNest.pop();\n
      } else  if (stream.eat(\')\')) {\n
        state.isAttrs = false;\n
        return \'punctuation\';\n
      }\n
      if (state.inAttributeName && stream.match(/^[^=,\\)!]+/)) {\n
        if (stream.peek() === \'=\' || stream.peek() === \'!\') {\n
          state.inAttributeName = false;\n
          state.jsState = jsMode.startState();\n
          if (state.lastTag === \'script\' && stream.current().trim().toLowerCase() === \'type\') {\n
            state.attributeIsType = true;\n
          } else {\n
            state.attributeIsType = false;\n
          }\n
        }\n
        return \'attribute\';\n
      }\n
\n
      var tok = jsMode.token(stream, state.jsState);\n
      if (state.attributeIsType && tok === \'string\') {\n
        state.scriptType = stream.current().toString();\n
      }\n
      if (state.attrsNest.length === 0 && (tok === \'string\' || tok === \'variable\' || tok === \'keyword\')) {\n
        try {\n
          Function(\'\', \'var x \' + state.attrValue.replace(/,\\s*$/, \'\').replace(/^!/, \'\'));\n
          state.inAttributeName = true;\n
          state.attrValue = \'\';\n
          stream.backUp(stream.current().length);\n
          return attrsContinued(stream, state);\n
        } catch (ex) {\n
          //not the end of an attribute\n
        }\n
      }\n
      state.attrValue += stream.current();\n
      return tok || true;\n
    }\n
  }\n
\n
  function attributesBlock(stream, state) {\n
    if (stream.match(/^&attributes\\b/)) {\n
      state.javaScriptArguments = true;\n
      state.javaScriptArgumentsDepth = 0;\n
      return \'keyword\';\n
    }\n
  }\n
\n
  function indent(stream) {\n
    if (stream.sol() && stream.eatSpace()) {\n
      return \'indent\';\n
    }\n
  }\n
\n
  function comment(stream, state) {\n
    if (stream.match(/^ *\\/\\/(-)?([^\\n]*)/)) {\n
      state.indentOf = stream.indentation();\n
      state.indentToken = \'comment\';\n
      return \'comment\';\n
    }\n
  }\n
\n
  function colon(stream) {\n
    if (stream.match(/^: */)) {\n
      return \'colon\';\n
    }\n
  }\n
\n
  function text(stream, state) {\n
    if (stream.match(/^(?:\\| ?| )([^\\n]+)/)) {\n
      return \'string\';\n
    }\n
    if (stream.match(/^(<[^\\n]*)/, false)) {\n
      // html string\n
      setInnerMode(stream, state, \'htmlmixed\');\n
      state.innerModeForLine = true;\n
      return innerMode(stream, state, true);\n
    }\n
  }\n
\n
  function dot(stream, state) {\n
    if (stream.eat(\'.\')) {\n
      var innerMode = null;\n
      if (state.lastTag === \'script\' && state.scriptType.toLowerCase().indexOf(\'javascript\') != -1) {\n
        innerMode = state.scriptType.toLowerCase().replace(/"|\'/g, \'\');\n
      } else if (state.lastTag === \'style\') {\n
        innerMode = \'css\';\n
      }\n
      setInnerMode(stream, state, innerMode);\n
      return \'dot\';\n
    }\n
  }\n
\n
  function fail(stream) {\n
    stream.next();\n
    return null;\n
  }\n
\n
\n
  function setInnerMode(stream, state, mode) {\n
    mode = CodeMirror.mimeModes[mode] || mode;\n
    mode = config.innerModes ? config.innerModes(mode) || mode : mode;\n
    mode = CodeMirror.mimeModes[mode] || mode;\n
    mode = CodeMirror.getMode(config, mode);\n
    state.indentOf = stream.indentation();\n
\n
    if (mode && mode.name !== \'null\') {\n
      state.innerMode = mode;\n
    } else {\n
      state.indentToken = \'string\';\n
    }\n
  }\n
  function innerMode(stream, state, force) {\n
    if (stream.indentation() > state.indentOf || (state.innerModeForLine && !stream.sol()) || force) {\n
      if (state.innerMode) {\n
        if (!state.innerState) {\n
          state.innerState = state.innerMode.startState ? state.innerMode.startState(stream.indentation()) : {};\n
        }\n
        return stream.hideFirstChars(state.indentOf + 2, function () {\n
          return state.innerMode.token(stream, state.innerState) || true;\n
        });\n
      } else {\n
        stream.skipToEnd();\n
        return state.indentToken;\n
      }\n
    } else if (stream.sol()) {\n
      state.indentOf = Infinity;\n
      state.indentToken = null;\n
      state.innerMode = null;\n
      state.innerState = null;\n
    }\n
  }\n
  function restOfLine(stream, state) {\n
    if (stream.sol()) {\n
      // if restOfLine was set at end of line, ignore it\n
      state.restOfLine = \'\';\n
    }\n
    if (state.restOfLine) {\n
      stream.skipToEnd();\n
      var tok = state.restOfLine;\n
      state.restOfLine = \'\';\n
      return tok;\n
    }\n
  }\n
\n
\n
  function startState() {\n
    return new State();\n
  }\n
  function copyState(state) {\n
    return state.copy();\n
  }\n
  /**\n
   * Get the next token in the stream\n
   *\n
   * @param {Stream} stream\n
   * @param {State} state\n
   */\n
  function nextToken(stream, state) {\n
    var tok = innerMode(stream, state)\n
      || restOfLine(stream, state)\n
      || interpolationContinued(stream, state)\n
      || includeFilteredContinued(stream, state)\n
      || eachContinued(stream, state)\n
      || attrsContinued(stream, state)\n
      || javaScript(stream, state)\n
      || javaScriptArguments(stream, state)\n
      || callArguments(stream, state)\n
\n
      || yieldStatement(stream, state)\n
      || doctype(stream, state)\n
      || interpolation(stream, state)\n
      || caseStatement(stream, state)\n
      || when(stream, state)\n
      || defaultStatement(stream, state)\n
      || extendsStatement(stream, state)\n
      || append(stream, state)\n
      || prepend(stream, state)\n
      || block(stream, state)\n
      || include(stream, state)\n
      || includeFiltered(stream, state)\n
      || mixin(stream, state)\n
      || call(stream, state)\n
      || conditional(stream, state)\n
      || each(stream, state)\n
      || whileStatement(stream, state)\n
      || tag(stream, state)\n
      || filter(stream, state)\n
      || code(stream, state)\n
      || id(stream, state)\n
      || className(stream, state)\n
      || attrs(stream, state)\n
      || attributesBlock(stream, state)\n
      || indent(stream, state)\n
      || text(stream, state)\n
      || comment(stream, state)\n
      || colon(stream, state)\n
      || dot(stream, state)\n
      || fail(stream, state);\n
\n
    return tok === true ? null : tok;\n
  }\n
  return {\n
    startState: startState,\n
    copyState: copyState,\n
    token: nextToken\n
  };\n
}, \'javascript\', \'css\', \'htmlmixed\');\n
\n
CodeMirror.defineMIME(\'text/x-jade\', \'jade\');\n
\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>15972</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
