<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604382.09</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>mllike.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
"use strict";\n
\n
CodeMirror.defineMode(\'mllike\', function(_config, parserConfig) {\n
  var words = {\n
    \'let\': \'keyword\',\n
    \'rec\': \'keyword\',\n
    \'in\': \'keyword\',\n
    \'of\': \'keyword\',\n
    \'and\': \'keyword\',\n
    \'if\': \'keyword\',\n
    \'then\': \'keyword\',\n
    \'else\': \'keyword\',\n
    \'for\': \'keyword\',\n
    \'to\': \'keyword\',\n
    \'while\': \'keyword\',\n
    \'do\': \'keyword\',\n
    \'done\': \'keyword\',\n
    \'fun\': \'keyword\',\n
    \'function\': \'keyword\',\n
    \'val\': \'keyword\',\n
    \'type\': \'keyword\',\n
    \'mutable\': \'keyword\',\n
    \'match\': \'keyword\',\n
    \'with\': \'keyword\',\n
    \'try\': \'keyword\',\n
    \'open\': \'builtin\',\n
    \'ignore\': \'builtin\',\n
    \'begin\': \'keyword\',\n
    \'end\': \'keyword\'\n
  };\n
\n
  var extraWords = parserConfig.extraWords || {};\n
  for (var prop in extraWords) {\n
    if (extraWords.hasOwnProperty(prop)) {\n
      words[prop] = parserConfig.extraWords[prop];\n
    }\n
  }\n
\n
  function tokenBase(stream, state) {\n
    var ch = stream.next();\n
\n
    if (ch === \'"\') {\n
      state.tokenize = tokenString;\n
      return state.tokenize(stream, state);\n
    }\n
    if (ch === \'(\') {\n
      if (stream.eat(\'*\')) {\n
        state.commentLevel++;\n
        state.tokenize = tokenComment;\n
        return state.tokenize(stream, state);\n
      }\n
    }\n
    if (ch === \'~\') {\n
      stream.eatWhile(/\\w/);\n
      return \'variable-2\';\n
    }\n
    if (ch === \'`\') {\n
      stream.eatWhile(/\\w/);\n
      return \'quote\';\n
    }\n
    if (ch === \'/\' && parserConfig.slashComments && stream.eat(\'/\')) {\n
      stream.skipToEnd();\n
      return \'comment\';\n
    }\n
    if (/\\d/.test(ch)) {\n
      stream.eatWhile(/[\\d]/);\n
      if (stream.eat(\'.\')) {\n
        stream.eatWhile(/[\\d]/);\n
      }\n
      return \'number\';\n
    }\n
    if ( /[+\\-*&%=<>!?|]/.test(ch)) {\n
      return \'operator\';\n
    }\n
    stream.eatWhile(/\\w/);\n
    var cur = stream.current();\n
    return words.hasOwnProperty(cur) ? words[cur] : \'variable\';\n
  }\n
\n
  function tokenString(stream, state) {\n
    var next, end = false, escaped = false;\n
    while ((next = stream.next()) != null) {\n
      if (next === \'"\' && !escaped) {\n
        end = true;\n
        break;\n
      }\n
      escaped = !escaped && next === \'\\\\\';\n
    }\n
    if (end && !escaped) {\n
      state.tokenize = tokenBase;\n
    }\n
    return \'string\';\n
  };\n
\n
  function tokenComment(stream, state) {\n
    var prev, next;\n
    while(state.commentLevel > 0 && (next = stream.next()) != null) {\n
      if (prev === \'(\' && next === \'*\') state.commentLevel++;\n
      if (prev === \'*\' && next === \')\') state.commentLevel--;\n
      prev = next;\n
    }\n
    if (state.commentLevel <= 0) {\n
      state.tokenize = tokenBase;\n
    }\n
    return \'comment\';\n
  }\n
\n
  return {\n
    startState: function() {return {tokenize: tokenBase, commentLevel: 0};},\n
    token: function(stream, state) {\n
      if (stream.eatSpace()) return null;\n
      return state.tokenize(stream, state);\n
    },\n
\n
    blockCommentStart: "(*",\n
    blockCommentEnd: "*)",\n
    lineComment: parserConfig.slashComments ? "//" : null\n
  };\n
});\n
\n
CodeMirror.defineMIME(\'text/x-ocaml\', {\n
  name: \'mllike\',\n
  extraWords: {\n
    \'succ\': \'keyword\',\n
    \'trace\': \'builtin\',\n
    \'exit\': \'builtin\',\n
    \'print_string\': \'builtin\',\n
    \'print_endline\': \'builtin\',\n
    \'true\': \'atom\',\n
    \'false\': \'atom\',\n
    \'raise\': \'keyword\'\n
  }\n
});\n
\n
CodeMirror.defineMIME(\'text/x-fsharp\', {\n
  name: \'mllike\',\n
  extraWords: {\n
    \'abstract\': \'keyword\',\n
    \'as\': \'keyword\',\n
    \'assert\': \'keyword\',\n
    \'base\': \'keyword\',\n
    \'class\': \'keyword\',\n
    \'default\': \'keyword\',\n
    \'delegate\': \'keyword\',\n
    \'downcast\': \'keyword\',\n
    \'downto\': \'keyword\',\n
    \'elif\': \'keyword\',\n
    \'exception\': \'keyword\',\n
    \'extern\': \'keyword\',\n
    \'finally\': \'keyword\',\n
    \'global\': \'keyword\',\n
    \'inherit\': \'keyword\',\n
    \'inline\': \'keyword\',\n
    \'interface\': \'keyword\',\n
    \'internal\': \'keyword\',\n
    \'lazy\': \'keyword\',\n
    \'let!\': \'keyword\',\n
    \'member\' : \'keyword\',\n
    \'module\': \'keyword\',\n
    \'namespace\': \'keyword\',\n
    \'new\': \'keyword\',\n
    \'null\': \'keyword\',\n
    \'override\': \'keyword\',\n
    \'private\': \'keyword\',\n
    \'public\': \'keyword\',\n
    \'return\': \'keyword\',\n
    \'return!\': \'keyword\',\n
    \'select\': \'keyword\',\n
    \'static\': \'keyword\',\n
    \'struct\': \'keyword\',\n
    \'upcast\': \'keyword\',\n
    \'use\': \'keyword\',\n
    \'use!\': \'keyword\',\n
    \'val\': \'keyword\',\n
    \'when\': \'keyword\',\n
    \'yield\': \'keyword\',\n
    \'yield!\': \'keyword\',\n
\n
    \'List\': \'builtin\',\n
    \'Seq\': \'builtin\',\n
    \'Map\': \'builtin\',\n
    \'Set\': \'builtin\',\n
    \'int\': \'builtin\',\n
    \'string\': \'builtin\',\n
    \'raise\': \'builtin\',\n
    \'failwith\': \'builtin\',\n
    \'not\': \'builtin\',\n
    \'true\': \'builtin\',\n
    \'false\': \'builtin\'\n
  },\n
  slashComments: true\n
});\n
\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>5018</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
