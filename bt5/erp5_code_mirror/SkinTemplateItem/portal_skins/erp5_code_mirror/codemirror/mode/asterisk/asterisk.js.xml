<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604375.76</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>asterisk.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
/*\n
 * =====================================================================================\n
 *\n
 *       Filename:  mode/asterisk/asterisk.js\n
 *\n
 *    Description:  CodeMirror mode for Asterisk dialplan\n
 *\n
 *        Created:  05/17/2012 09:20:25 PM\n
 *       Revision:  none\n
 *\n
 *         Author:  Stas Kobzar (stas@modulis.ca),\n
 *        Company:  Modulis.ca Inc.\n
 *\n
 * =====================================================================================\n
 */\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
"use strict";\n
\n
CodeMirror.defineMode("asterisk", function() {\n
  var atoms    = ["exten", "same", "include","ignorepat","switch"],\n
      dpcmd    = ["#include","#exec"],\n
      apps     = [\n
                  "addqueuemember","adsiprog","aelsub","agentlogin","agentmonitoroutgoing","agi",\n
                  "alarmreceiver","amd","answer","authenticate","background","backgrounddetect",\n
                  "bridge","busy","callcompletioncancel","callcompletionrequest","celgenuserevent",\n
                  "changemonitor","chanisavail","channelredirect","chanspy","clearhash","confbridge",\n
                  "congestion","continuewhile","controlplayback","dahdiacceptr2call","dahdibarge",\n
                  "dahdiras","dahdiscan","dahdisendcallreroutingfacility","dahdisendkeypadfacility",\n
                  "datetime","dbdel","dbdeltree","deadagi","dial","dictate","directory","disa",\n
                  "dumpchan","eagi","echo","endwhile","exec","execif","execiftime","exitwhile","extenspy",\n
                  "externalivr","festival","flash","followme","forkcdr","getcpeid","gosub","gosubif",\n
                  "goto","gotoif","gotoiftime","hangup","iax2provision","ices","importvar","incomplete",\n
                  "ivrdemo","jabberjoin","jabberleave","jabbersend","jabbersendgroup","jabberstatus",\n
                  "jack","log","macro","macroexclusive","macroexit","macroif","mailboxexists","meetme",\n
                  "meetmeadmin","meetmechanneladmin","meetmecount","milliwatt","minivmaccmess","minivmdelete",\n
                  "minivmgreet","minivmmwi","minivmnotify","minivmrecord","mixmonitor","monitor","morsecode",\n
                  "mp3player","mset","musiconhold","nbscat","nocdr","noop","odbc","odbc","odbcfinish",\n
                  "originate","ospauth","ospfinish","osplookup","ospnext","page","park","parkandannounce",\n
                  "parkedcall","pausemonitor","pausequeuemember","pickup","pickupchan","playback","playtones",\n
                  "privacymanager","proceeding","progress","queue","queuelog","raiseexception","read","readexten",\n
                  "readfile","receivefax","receivefax","receivefax","record","removequeuemember",\n
                  "resetcdr","retrydial","return","ringing","sayalpha","saycountedadj","saycountednoun",\n
                  "saycountpl","saydigits","saynumber","sayphonetic","sayunixtime","senddtmf","sendfax",\n
                  "sendfax","sendfax","sendimage","sendtext","sendurl","set","setamaflags",\n
                  "setcallerpres","setmusiconhold","sipaddheader","sipdtmfmode","sipremoveheader","skel",\n
                  "slastation","slatrunk","sms","softhangup","speechactivategrammar","speechbackground",\n
                  "speechcreate","speechdeactivategrammar","speechdestroy","speechloadgrammar","speechprocessingsound",\n
                  "speechstart","speechunloadgrammar","stackpop","startmusiconhold","stopmixmonitor","stopmonitor",\n
                  "stopmusiconhold","stopplaytones","system","testclient","testserver","transfer","tryexec",\n
                  "trysystem","unpausemonitor","unpausequeuemember","userevent","verbose","vmauthenticate",\n
                  "vmsayname","voicemail","voicemailmain","wait","waitexten","waitfornoise","waitforring",\n
                  "waitforsilence","waitmusiconhold","waituntil","while","zapateller"\n
                 ];\n
\n
  function basicToken(stream,state){\n
    var cur = \'\';\n
    var ch = stream.next();\n
    // comment\n
    if(ch == ";") {\n
      stream.skipToEnd();\n
      return "comment";\n
    }\n
    // context\n
    if(ch == \'[\') {\n
      stream.skipTo(\']\');\n
      stream.eat(\']\');\n
      return "header";\n
    }\n
    // string\n
    if(ch == \'"\') {\n
      stream.skipTo(\'"\');\n
      return "string";\n
    }\n
    if(ch == "\'") {\n
      stream.skipTo("\'");\n
      return "string-2";\n
    }\n
    // dialplan commands\n
    if(ch == \'#\') {\n
      stream.eatWhile(/\\w/);\n
      cur = stream.current();\n
      if(dpcmd.indexOf(cur) !== -1) {\n
        stream.skipToEnd();\n
        return "strong";\n
      }\n
    }\n
    // application args\n
    if(ch == \'$\'){\n
      var ch1 = stream.peek();\n
      if(ch1 == \'{\'){\n
        stream.skipTo(\'}\');\n
        stream.eat(\'}\');\n
        return "variable-3";\n
      }\n
    }\n
    // extension\n
    stream.eatWhile(/\\w/);\n
    cur = stream.current();\n
    if(atoms.indexOf(cur) !== -1) {\n
      state.extenStart = true;\n
      switch(cur) {\n
        case \'same\': state.extenSame = true; break;\n
        case \'include\':\n
        case \'switch\':\n
        case \'ignorepat\':\n
          state.extenInclude = true;break;\n
        default:break;\n
      }\n
      return "atom";\n
    }\n
  }\n
\n
  return {\n
    startState: function() {\n
      return {\n
        extenStart: false,\n
        extenSame:  false,\n
        extenInclude: false,\n
        extenExten: false,\n
        extenPriority: false,\n
        extenApplication: false\n
      };\n
    },\n
    token: function(stream, state) {\n
\n
      var cur = \'\';\n
      if(stream.eatSpace()) return null;\n
      // extension started\n
      if(state.extenStart){\n
        stream.eatWhile(/[^\\s]/);\n
        cur = stream.current();\n
        if(/^=>?$/.test(cur)){\n
          state.extenExten = true;\n
          state.extenStart = false;\n
          return "strong";\n
        } else {\n
          state.extenStart = false;\n
          stream.skipToEnd();\n
          return "error";\n
        }\n
      } else if(state.extenExten) {\n
        // set exten and priority\n
        state.extenExten = false;\n
        state.extenPriority = true;\n
        stream.eatWhile(/[^,]/);\n
        if(state.extenInclude) {\n
          stream.skipToEnd();\n
          state.extenPriority = false;\n
          state.extenInclude = false;\n
        }\n
        if(state.extenSame) {\n
          state.extenPriority = false;\n
          state.extenSame = false;\n
          state.extenApplication = true;\n
        }\n
        return "tag";\n
      } else if(state.extenPriority) {\n
        state.extenPriority = false;\n
        state.extenApplication = true;\n
        stream.next(); // get comma\n
        if(state.extenSame) return null;\n
        stream.eatWhile(/[^,]/);\n
        return "number";\n
      } else if(state.extenApplication) {\n
        stream.eatWhile(/,/);\n
        cur = stream.current();\n
        if(cur === \',\') return null;\n
        stream.eatWhile(/\\w/);\n
        cur = stream.current().toLowerCase();\n
        state.extenApplication = false;\n
        if(apps.indexOf(cur) !== -1){\n
          return "def strong";\n
        }\n
      } else{\n
        return basicToken(stream,state);\n
      }\n
\n
      return null;\n
    }\n
  };\n
});\n
\n
CodeMirror.defineMIME("text/x-asterisk", "asterisk");\n
\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>7437</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
