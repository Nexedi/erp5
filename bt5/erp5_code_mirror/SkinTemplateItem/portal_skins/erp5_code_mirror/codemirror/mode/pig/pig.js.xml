<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604383.43</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>pig.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
/*\n
 *      Pig Latin Mode for CodeMirror 2\n
 *      @author Prasanth Jayachandran\n
 *      @link   https://github.com/prasanthj/pig-codemirror-2\n
 *  This implementation is adapted from PL/SQL mode in CodeMirror 2.\n
 */\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
"use strict";\n
\n
CodeMirror.defineMode("pig", function(_config, parserConfig) {\n
  var keywords = parserConfig.keywords,\n
  builtins = parserConfig.builtins,\n
  types = parserConfig.types,\n
  multiLineStrings = parserConfig.multiLineStrings;\n
\n
  var isOperatorChar = /[*+\\-%<>=&?:\\/!|]/;\n
\n
  function chain(stream, state, f) {\n
    state.tokenize = f;\n
    return f(stream, state);\n
  }\n
\n
  function tokenComment(stream, state) {\n
    var isEnd = false;\n
    var ch;\n
    while(ch = stream.next()) {\n
      if(ch == "/" && isEnd) {\n
        state.tokenize = tokenBase;\n
        break;\n
      }\n
      isEnd = (ch == "*");\n
    }\n
    return "comment";\n
  }\n
\n
  function tokenString(quote) {\n
    return function(stream, state) {\n
      var escaped = false, next, end = false;\n
      while((next = stream.next()) != null) {\n
        if (next == quote && !escaped) {\n
          end = true; break;\n
        }\n
        escaped = !escaped && next == "\\\\";\n
      }\n
      if (end || !(escaped || multiLineStrings))\n
        state.tokenize = tokenBase;\n
      return "error";\n
    };\n
  }\n
\n
\n
  function tokenBase(stream, state) {\n
    var ch = stream.next();\n
\n
    // is a start of string?\n
    if (ch == \'"\' || ch == "\'")\n
      return chain(stream, state, tokenString(ch));\n
    // is it one of the special chars\n
    else if(/[\\[\\]{}\\(\\),;\\.]/.test(ch))\n
      return null;\n
    // is it a number?\n
    else if(/\\d/.test(ch)) {\n
      stream.eatWhile(/[\\w\\.]/);\n
      return "number";\n
    }\n
    // multi line comment or operator\n
    else if (ch == "/") {\n
      if (stream.eat("*")) {\n
        return chain(stream, state, tokenComment);\n
      }\n
      else {\n
        stream.eatWhile(isOperatorChar);\n
        return "operator";\n
      }\n
    }\n
    // single line comment or operator\n
    else if (ch=="-") {\n
      if(stream.eat("-")){\n
        stream.skipToEnd();\n
        return "comment";\n
      }\n
      else {\n
        stream.eatWhile(isOperatorChar);\n
        return "operator";\n
      }\n
    }\n
    // is it an operator\n
    else if (isOperatorChar.test(ch)) {\n
      stream.eatWhile(isOperatorChar);\n
      return "operator";\n
    }\n
    else {\n
      // get the while word\n
      stream.eatWhile(/[\\w\\$_]/);\n
      // is it one of the listed keywords?\n
      if (keywords && keywords.propertyIsEnumerable(stream.current().toUpperCase())) {\n
        //keywords can be used as variables like flatten(group), group.$0 etc..\n
        if (!stream.eat(")") && !stream.eat("."))\n
          return "keyword";\n
      }\n
      // is it one of the builtin functions?\n
      if (builtins && builtins.propertyIsEnumerable(stream.current().toUpperCase()))\n
        return "variable-2";\n
      // is it one of the listed types?\n
      if (types && types.propertyIsEnumerable(stream.current().toUpperCase()))\n
        return "variable-3";\n
      // default is a \'variable\'\n
      return "variable";\n
    }\n
  }\n
\n
  // Interface\n
  return {\n
    startState: function() {\n
      return {\n
        tokenize: tokenBase,\n
        startOfLine: true\n
      };\n
    },\n
\n
    token: function(stream, state) {\n
      if(stream.eatSpace()) return null;\n
      var style = state.tokenize(stream, state);\n
      return style;\n
    }\n
  };\n
});\n
\n
(function() {\n
  function keywords(str) {\n
    var obj = {}, words = str.split(" ");\n
    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n
    return obj;\n
  }\n
\n
  // builtin funcs taken from trunk revision 1303237\n
  var pBuiltins = "ABS ACOS ARITY ASIN ATAN AVG BAGSIZE BINSTORAGE BLOOM BUILDBLOOM CBRT CEIL "\n
    + "CONCAT COR COS COSH COUNT COUNT_STAR COV CONSTANTSIZE CUBEDIMENSIONS DIFF DISTINCT DOUBLEABS "\n
    + "DOUBLEAVG DOUBLEBASE DOUBLEMAX DOUBLEMIN DOUBLEROUND DOUBLESUM EXP FLOOR FLOATABS FLOATAVG "\n
    + "FLOATMAX FLOATMIN FLOATROUND FLOATSUM GENERICINVOKER INDEXOF INTABS INTAVG INTMAX INTMIN "\n
    + "INTSUM INVOKEFORDOUBLE INVOKEFORFLOAT INVOKEFORINT INVOKEFORLONG INVOKEFORSTRING INVOKER "\n
    + "ISEMPTY JSONLOADER JSONMETADATA JSONSTORAGE LAST_INDEX_OF LCFIRST LOG LOG10 LOWER LONGABS "\n
    + "LONGAVG LONGMAX LONGMIN LONGSUM MAX MIN MAPSIZE MONITOREDUDF NONDETERMINISTIC OUTPUTSCHEMA  "\n
    + "PIGSTORAGE PIGSTREAMING RANDOM REGEX_EXTRACT REGEX_EXTRACT_ALL REPLACE ROUND SIN SINH SIZE "\n
    + "SQRT STRSPLIT SUBSTRING SUM STRINGCONCAT STRINGMAX STRINGMIN STRINGSIZE TAN TANH TOBAG "\n
    + "TOKENIZE TOMAP TOP TOTUPLE TRIM TEXTLOADER TUPLESIZE UCFIRST UPPER UTF8STORAGECONVERTER ";\n
\n
  // taken from QueryLexer.g\n
  var pKeywords = "VOID IMPORT RETURNS DEFINE LOAD FILTER FOREACH ORDER CUBE DISTINCT COGROUP "\n
    + "JOIN CROSS UNION SPLIT INTO IF OTHERWISE ALL AS BY USING INNER OUTER ONSCHEMA PARALLEL "\n
    + "PARTITION GROUP AND OR NOT GENERATE FLATTEN ASC DESC IS STREAM THROUGH STORE MAPREDUCE "\n
    + "SHIP CACHE INPUT OUTPUT STDERROR STDIN STDOUT LIMIT SAMPLE LEFT RIGHT FULL EQ GT LT GTE LTE "\n
    + "NEQ MATCHES TRUE FALSE DUMP";\n
\n
  // data types\n
  var pTypes = "BOOLEAN INT LONG FLOAT DOUBLE CHARARRAY BYTEARRAY BAG TUPLE MAP ";\n
\n
  CodeMirror.defineMIME("text/x-pig", {\n
    name: "pig",\n
    builtins: keywords(pBuiltins),\n
    keywords: keywords(pKeywords),\n
    types: keywords(pTypes)\n
  });\n
\n
  CodeMirror.registerHelper("hintWords", "pig", (pBuiltins + pTypes + pKeywords).split(" "));\n
}());\n
\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>5810</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
