<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604375.52</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>asciiarmor.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
  "use strict";\n
\n
  function errorIfNotEmpty(stream) {\n
    var nonWS = stream.match(/^\\s*\\S/);\n
    stream.skipToEnd();\n
    return nonWS ? "error" : null;\n
  }\n
\n
  CodeMirror.defineMode("asciiarmor", function() {\n
    return {\n
      token: function(stream, state) {\n
        var m;\n
        if (state.state == "top") {\n
          if (stream.sol() && (m = stream.match(/^-----BEGIN (.*)?-----\\s*$/))) {\n
            state.state = "headers";\n
            state.type = m[1];\n
            return "tag";\n
          }\n
          return errorIfNotEmpty(stream);\n
        } else if (state.state == "headers") {\n
          if (stream.sol() && stream.match(/^\\w+:/)) {\n
            state.state = "header";\n
            return "atom";\n
          } else {\n
            var result = errorIfNotEmpty(stream);\n
            if (result) state.state = "body";\n
            return result;\n
          }\n
        } else if (state.state == "header") {\n
          stream.skipToEnd();\n
          state.state = "headers";\n
          return "string";\n
        } else if (state.state == "body") {\n
          if (stream.sol() && (m = stream.match(/^-----END (.*)?-----\\s*$/))) {\n
            if (m[1] != state.type) return "error";\n
            state.state = "end";\n
            return "tag";\n
          } else {\n
            if (stream.eatWhile(/[A-Za-z0-9+\\/=]/)) {\n
              return null;\n
            } else {\n
              stream.next();\n
              return "error";\n
            }\n
          }\n
        } else if (state.state == "end") {\n
          return errorIfNotEmpty(stream);\n
        }\n
      },\n
      blankLine: function(state) {\n
        if (state.state == "headers") state.state = "body";\n
      },\n
      startState: function() {\n
        return {state: "top", type: null};\n
      }\n
    };\n
  });\n
\n
  CodeMirror.defineMIME("application/pgp", "asciiarmor");\n
  CodeMirror.defineMIME("application/pgp-keys", "asciiarmor");\n
  CodeMirror.defineMIME("application/pgp-signature", "asciiarmor");\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>2378</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
