<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="ZopePageTemplate" module="Products.PageTemplates.ZopePageTemplate"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_text</string> </key>
            <value> <unicode encoding="cdata"><![CDATA[

<!doctype html>\n
\n
<title>CodeMirror: CMake mode</title>\n
<meta charset="utf-8"/>\n
<link rel=stylesheet href="../../doc/docs.css">\n
\n
<link rel="stylesheet" href="../../lib/codemirror.css">\n
<script src="../../lib/codemirror.js"></script>\n
<script src="../../addon/cm_edit/matchbrackets.js"></script>\n
<script src="cmake.js"></script>\n
<style>\n
      .CodeMirror {border-top: 1px solid black; border-bottom: 1px solid black;}\n
      .cm-s-default span.cm-arrow { color: red; }\n
    </style>\n
<div id=nav>\n
  <a href="http://codemirror.net"><h1>CodeMirror</h1><img id=logo src="../../doc/logo.png"></a>\n
\n
  <ul>\n
    <li><a href="../../index.html">Home</a>\n
    <li><a href="../../doc/manual.html">Manual</a>\n
    <li><a href="https://github.com/codemirror/codemirror">Code</a>\n
  </ul>\n
  <ul>\n
    <li><a href="../index.html">Language modes</a>\n
    <li><a class=active href="#">CMake</a>\n
  </ul>\n
</div>\n
\n
<article>\n
<h2>CMake mode</h2>\n
<form><textarea id="code" name="code">\n
# vim: syntax=cmake\n
if(NOT CMAKE_BUILD_TYPE)\n
    # default to Release build for GCC builds\n
    set(CMAKE_BUILD_TYPE Release CACHE STRING\n
        "Choose the type of build, options are: None(CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel."\n
        FORCE)\n
endif()\n
message(STATUS "cmake version ${CMAKE_VERSION}")\n
if(POLICY CMP0025)\n
    cmake_policy(SET CMP0025 OLD) # report Apple\'s Clang as just Clang\n
endif()\n
if(POLICY CMP0042)\n
    cmake_policy(SET CMP0042 NEW) # MACOSX_RPATH\n
endif()\n
\n
project (x265)\n
cmake_minimum_required (VERSION 2.8.8) # OBJECT libraries require 2.8.8\n
include(CheckIncludeFiles)\n
include(CheckFunctionExists)\n
include(CheckSymbolExists)\n
include(CheckCXXCompilerFlag)\n
\n
# X265_BUILD must be incremented each time the public API is changed\n
set(X265_BUILD 48)\n
configure_file("${PROJECT_SOURCE_DIR}/x265.def.in"\n
               "${PROJECT_BINARY_DIR}/x265.def")\n
configure_file("${PROJECT_SOURCE_DIR}/x265_config.h.in"\n
               "${PROJECT_BINARY_DIR}/x265_config.h")\n
\n
SET(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake" "${CMAKE_MODULE_PATH}")\n
\n
# System architecture detection\n
string(TOLOWER "${CMAKE_SYSTEM_PROCESSOR}" SYSPROC)\n
set(X86_ALIASES x86 i386 i686 x86_64 amd64)\n
list(FIND X86_ALIASES "${SYSPROC}" X86MATCH)\n
if("${SYSPROC}" STREQUAL "" OR X86MATCH GREATER "-1")\n
    message(STATUS "Detected x86 target processor")\n
    set(X86 1)\n
    add_definitions(-DX265_ARCH_X86=1)\n
    if("${CMAKE_SIZEOF_VOID_P}" MATCHES 8)\n
        set(X64 1)\n
        add_definitions(-DX86_64=1)\n
    endif()\n
elseif(${SYSPROC} STREQUAL "armv6l")\n
    message(STATUS "Detected ARM target processor")\n
    set(ARM 1)\n
    add_definitions(-DX265_ARCH_ARM=1 -DHAVE_ARMV6=1)\n
else()\n
    message(STATUS "CMAKE_SYSTEM_PROCESSOR value `${CMAKE_SYSTEM_PROCESSOR}` is unknown")\n
    message(STATUS "Please add this value near ${CMAKE_CURRENT_LIST_FILE}:${CMAKE_CURRENT_LIST_LINE}")\n
endif()\n
\n
if(UNIX)\n
    list(APPEND PLATFORM_LIBS pthread)\n
    find_library(LIBRT rt)\n
    if(LIBRT)\n
        list(APPEND PLATFORM_LIBS rt)\n
    endif()\n
    find_package(Numa)\n
    if(NUMA_FOUND)\n
        list(APPEND CMAKE_REQUIRED_LIBRARIES ${NUMA_LIBRARY})\n
        check_symbol_exists(numa_node_of_cpu numa.h NUMA_V2)\n
        if(NUMA_V2)\n
            add_definitions(-DHAVE_LIBNUMA)\n
            message(STATUS "libnuma found, building with support for NUMA nodes")\n
            list(APPEND PLATFORM_LIBS ${NUMA_LIBRARY})\n
            link_directories(${NUMA_LIBRARY_DIR})\n
            include_directories(${NUMA_INCLUDE_DIR})\n
        endif()\n
    endif()\n
    mark_as_advanced(LIBRT NUMA_FOUND)\n
endif(UNIX)\n
\n
if(X64 AND NOT WIN32)\n
    option(ENABLE_PIC "Enable Position Independent Code" ON)\n
else()\n
    option(ENABLE_PIC "Enable Position Independent Code" OFF)\n
endif(X64 AND NOT WIN32)\n
\n
# Compiler detection\n
if(CMAKE_GENERATOR STREQUAL "Xcode")\n
  set(XCODE 1)\n
endif()\n
if (APPLE)\n
  add_definitions(-DMACOS)\n
endif()\n
</textarea></form>\n
    <script>\n
      var editor = CodeMirror.fromTextArea(document.getElementById("code"), {\n
        mode: "text/x-cmake",\n
        matchBrackets: true,\n
        indentUnit: 4\n
      });\n
    </script>\n
\n
    <p><strong>MIME types defined:</strong> <code>text/x-cmake</code>.</p>\n
\n
  </article>

]]></unicode> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>text/html</string> </value>
        </item>
        <item>
            <key> <string>expand</string> </key>
            <value> <int>0</int> </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>index.html</string> </value>
        </item>
        <item>
            <key> <string>output_encoding</string> </key>
            <value> <string>iso-8859-15</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
