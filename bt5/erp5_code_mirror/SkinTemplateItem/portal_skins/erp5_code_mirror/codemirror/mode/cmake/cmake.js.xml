<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604376.33</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>cmake.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object")\n
    mod(require("../../lib/codemirror"));\n
  else if (typeof define == "function" && define.amd)\n
    define(["../../lib/codemirror"], mod);\n
  else\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
"use strict";\n
\n
CodeMirror.defineMode("cmake", function () {\n
  var variable_regex = /({)?[a-zA-Z0-9_]+(})?/;\n
\n
  function tokenString(stream, state) {\n
    var current, prev, found_var = false;\n
    while (!stream.eol() && (current = stream.next()) != state.pending) {\n
      if (current === \'$\' && prev != \'\\\\\' && state.pending == \'"\') {\n
        found_var = true;\n
        break;\n
      }\n
      prev = current;\n
    }\n
    if (found_var) {\n
      stream.backUp(1);\n
    }\n
    if (current == state.pending) {\n
      state.continueString = false;\n
    } else {\n
      state.continueString = true;\n
    }\n
    return "string";\n
  }\n
\n
  function tokenize(stream, state) {\n
    var ch = stream.next();\n
\n
    // Have we found a variable?\n
    if (ch === \'$\') {\n
      if (stream.match(variable_regex)) {\n
        return \'variable-2\';\n
      }\n
      return \'variable\';\n
    }\n
    // Should we still be looking for the end of a string?\n
    if (state.continueString) {\n
      // If so, go through the loop again\n
      stream.backUp(1);\n
      return tokenString(stream, state);\n
    }\n
    // Do we just have a function on our hands?\n
    // In \'cmake_minimum_required (VERSION 2.8.8)\', \'cmake_minimum_required\' is matched\n
    if (stream.match(/(\\s+)?\\w+\\(/) || stream.match(/(\\s+)?\\w+\\ \\(/)) {\n
      stream.backUp(1);\n
      return \'def\';\n
    }\n
    if (ch == "#") {\n
      stream.skipToEnd();\n
      return "comment";\n
    }\n
    // Have we found a string?\n
    if (ch == "\'" || ch == \'"\') {\n
      // Store the type (single or double)\n
      state.pending = ch;\n
      // Perform the looping function to find the end\n
      return tokenString(stream, state);\n
    }\n
    if (ch == \'(\' || ch == \')\') {\n
      return \'bracket\';\n
    }\n
    if (ch.match(/[0-9]/)) {\n
      return \'number\';\n
    }\n
    stream.eatWhile(/[\\w-]/);\n
    return null;\n
  }\n
  return {\n
    startState: function () {\n
      var state = {};\n
      state.inDefinition = false;\n
      state.inInclude = false;\n
      state.continueString = false;\n
      state.pending = false;\n
      return state;\n
    },\n
    token: function (stream, state) {\n
      if (stream.eatSpace()) return null;\n
      return tokenize(stream, state);\n
    }\n
  };\n
});\n
\n
CodeMirror.defineMIME("text/x-cmake", "cmake");\n
\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>2600</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
