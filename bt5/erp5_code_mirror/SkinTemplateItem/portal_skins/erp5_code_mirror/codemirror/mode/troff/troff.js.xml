<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604387.28</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>troff.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object")\n
    mod(require("../../lib/codemirror"));\n
  else if (typeof define == "function" && define.amd)\n
    define(["../../lib/codemirror"], mod);\n
  else\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
"use strict";\n
\n
CodeMirror.defineMode(\'troff\', function() {\n
\n
  var words = {};\n
\n
  function tokenBase(stream) {\n
    if (stream.eatSpace()) return null;\n
\n
    var sol = stream.sol();\n
    var ch = stream.next();\n
\n
    if (ch === \'\\\\\') {\n
      if (stream.match(\'fB\') || stream.match(\'fR\') || stream.match(\'fI\') ||\n
          stream.match(\'u\')  || stream.match(\'d\')  ||\n
          stream.match(\'%\')  || stream.match(\'&\')) {\n
        return \'string\';\n
      }\n
      if (stream.match(\'m[\')) {\n
        stream.skipTo(\']\');\n
        stream.next();\n
        return \'string\';\n
      }\n
      if (stream.match(\'s+\') || stream.match(\'s-\')) {\n
        stream.eatWhile(/[\\d-]/);\n
        return \'string\';\n
      }\n
      if (stream.match(\'\\(\') || stream.match(\'*\\(\')) {\n
        stream.eatWhile(/[\\w-]/);\n
        return \'string\';\n
      }\n
      return \'string\';\n
    }\n
    if (sol && (ch === \'.\' || ch === \'\\\'\')) {\n
      if (stream.eat(\'\\\\\') && stream.eat(\'\\"\')) {\n
        stream.skipToEnd();\n
        return \'comment\';\n
      }\n
    }\n
    if (sol && ch === \'.\') {\n
      if (stream.match(\'B \') || stream.match(\'I \') || stream.match(\'R \')) {\n
        return \'attribute\';\n
      }\n
      if (stream.match(\'TH \') || stream.match(\'SH \') || stream.match(\'SS \') || stream.match(\'HP \')) {\n
        stream.skipToEnd();\n
        return \'quote\';\n
      }\n
      if ((stream.match(/[A-Z]/) && stream.match(/[A-Z]/)) || (stream.match(/[a-z]/) && stream.match(/[a-z]/))) {\n
        return \'attribute\';\n
      }\n
    }\n
    stream.eatWhile(/[\\w-]/);\n
    var cur = stream.current();\n
    return words.hasOwnProperty(cur) ? words[cur] : null;\n
  }\n
\n
  function tokenize(stream, state) {\n
    return (state.tokens[0] || tokenBase) (stream, state);\n
  };\n
\n
  return {\n
    startState: function() {return {tokens:[]};},\n
    token: function(stream, state) {\n
      return tokenize(stream, state);\n
    }\n
  };\n
});\n
\n
CodeMirror.defineMIME(\'text/troff\', \'troff\');\n
CodeMirror.defineMIME(\'text/x-troff\', \'troff\');\n
CodeMirror.defineMIME(\'application/x-troff\', \'troff\');\n
\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>2392</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
