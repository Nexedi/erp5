<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604382.65</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>mumps.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
/*\n
  This MUMPS Language script was constructed using vbscript.js as a template.\n
*/\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
  "use strict";\n
\n
  CodeMirror.defineMode("mumps", function() {\n
    function wordRegexp(words) {\n
      return new RegExp("^((" + words.join(")|(") + "))\\\\b", "i");\n
    }\n
\n
    var singleOperators = new RegExp("^[\\\\+\\\\-\\\\*/&#!_?\\\\\\\\<>=\\\\\'\\\\[\\\\]]");\n
    var doubleOperators = new RegExp("^((\'=)|(<=)|(>=)|(\'>)|(\'<)|([[)|(]])|(^$))");\n
    var singleDelimiters = new RegExp("^[\\\\.,:]");\n
    var brackets = new RegExp("[()]");\n
    var identifiers = new RegExp("^[%A-Za-z][A-Za-z0-9]*");\n
    var commandKeywords = ["break","close","do","else","for","goto", "halt", "hang", "if", "job","kill","lock","merge","new","open", "quit", "read", "set", "tcommit", "trollback", "tstart", "use", "view", "write", "xecute", "b","c","d","e","f","g", "h", "i", "j","k","l","m","n","o", "q", "r", "s", "tc", "tro", "ts", "u", "v", "w", "x"];\n
    // The following list includes instrinsic functions _and_ special variables\n
    var intrinsicFuncsWords = ["\\\\$ascii", "\\\\$char", "\\\\$data", "\\\\$ecode", "\\\\$estack", "\\\\$etrap", "\\\\$extract", "\\\\$find", "\\\\$fnumber", "\\\\$get", "\\\\$horolog", "\\\\$io", "\\\\$increment", "\\\\$job", "\\\\$justify", "\\\\$length", "\\\\$name", "\\\\$next", "\\\\$order", "\\\\$piece", "\\\\$qlength", "\\\\$qsubscript", "\\\\$query", "\\\\$quit", "\\\\$random", "\\\\$reverse", "\\\\$select", "\\\\$stack", "\\\\$test", "\\\\$text", "\\\\$translate", "\\\\$view", "\\\\$x", "\\\\$y", "\\\\$a", "\\\\$c", "\\\\$d", "\\\\$e", "\\\\$ec", "\\\\$es", "\\\\$et", "\\\\$f", "\\\\$fn", "\\\\$g", "\\\\$h", "\\\\$i", "\\\\$j", "\\\\$l", "\\\\$n", "\\\\$na", "\\\\$o", "\\\\$p", "\\\\$q", "\\\\$ql", "\\\\$qs", "\\\\$r", "\\\\$re", "\\\\$s", "\\\\$st", "\\\\$t", "\\\\$tr", "\\\\$v", "\\\\$z"];\n
    var intrinsicFuncs = wordRegexp(intrinsicFuncsWords);\n
    var command = wordRegexp(commandKeywords);\n
\n
    function tokenBase(stream, state) {\n
      if (stream.sol()) {\n
        state.label = true;\n
        state.commandMode = 0;\n
      }\n
\n
      // The <space> character has meaning in MUMPS. Ignoring consecutive\n
      // spaces would interfere with interpreting whether the next non-space\n
      // character belongs to the command or argument context.\n
\n
      // Examine each character and update a mode variable whose interpretation is:\n
      //   >0 => command    0 => argument    <0 => command post-conditional\n
      var ch = stream.peek();\n
\n
      if (ch == " " || ch == "\\t") { // Pre-process <space>\n
        state.label = false;\n
        if (state.commandMode == 0)\n
          state.commandMode = 1;\n
        else if ((state.commandMode < 0) || (state.commandMode == 2))\n
          state.commandMode = 0;\n
      } else if ((ch != ".") && (state.commandMode > 0)) {\n
        if (ch == ":")\n
          state.commandMode = -1;   // SIS - Command post-conditional\n
        else\n
          state.commandMode = 2;\n
      }\n
\n
      // Do not color parameter list as line tag\n
      if ((ch === "(") || (ch === "\\u0009"))\n
        state.label = false;\n
\n
      // MUMPS comment starts with ";"\n
      if (ch === ";") {\n
        stream.skipToEnd();\n
        return "comment";\n
      }\n
\n
      // Number Literals // SIS/RLM - MUMPS permits canonic number followed by concatenate operator\n
      if (stream.match(/^[-+]?\\d+(\\.\\d+)?([eE][-+]?\\d+)?/))\n
        return "number";\n
\n
      // Handle Strings\n
      if (ch == \'"\') {\n
        if (stream.skipTo(\'"\')) {\n
          stream.next();\n
          return "string";\n
        } else {\n
          stream.skipToEnd();\n
          return "error";\n
        }\n
      }\n
\n
      // Handle operators and Delimiters\n
      if (stream.match(doubleOperators) || stream.match(singleOperators))\n
        return "operator";\n
\n
      // Prevents leading "." in DO block from falling through to error\n
      if (stream.match(singleDelimiters))\n
        return null;\n
\n
      if (brackets.test(ch)) {\n
        stream.next();\n
        return "bracket";\n
      }\n
\n
      if (state.commandMode > 0 && stream.match(command))\n
        return "variable-2";\n
\n
      if (stream.match(intrinsicFuncs))\n
        return "builtin";\n
\n
      if (stream.match(identifiers))\n
        return "variable";\n
\n
      // Detect dollar-sign when not a documented intrinsic function\n
      // "^" may introduce a GVN or SSVN - Color same as function\n
      if (ch === "$" || ch === "^") {\n
        stream.next();\n
        return "builtin";\n
      }\n
\n
      // MUMPS Indirection\n
      if (ch === "@") {\n
        stream.next();\n
        return "string-2";\n
      }\n
\n
      if (/[\\w%]/.test(ch)) {\n
        stream.eatWhile(/[\\w%]/);\n
        return "variable";\n
      }\n
\n
      // Handle non-detected items\n
      stream.next();\n
      return "error";\n
    }\n
\n
    return {\n
      startState: function() {\n
        return {\n
          label: false,\n
          commandMode: 0\n
        };\n
      },\n
\n
      token: function(stream, state) {\n
        var style = tokenBase(stream, state);\n
        if (state.label) return "tag";\n
        return style;\n
      }\n
    };\n
  });\n
\n
  CodeMirror.defineMIME("text/x-mumps", "mumps");\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>5354</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
