<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604384.01</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>r.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
"use strict";\n
\n
CodeMirror.registerHelper("wordChars", "r", /[\\w.]/);\n
\n
CodeMirror.defineMode("r", function(config) {\n
  function wordObj(str) {\n
    var words = str.split(" "), res = {};\n
    for (var i = 0; i < words.length; ++i) res[words[i]] = true;\n
    return res;\n
  }\n
  var atoms = wordObj("NULL NA Inf NaN NA_integer_ NA_real_ NA_complex_ NA_character_");\n
  var builtins = wordObj("list quote bquote eval return call parse deparse");\n
  var keywords = wordObj("if else repeat while function for in next break");\n
  var blockkeywords = wordObj("if else repeat while function for");\n
  var opChars = /[+\\-*\\/^<>=!&|~$:]/;\n
  var curPunc;\n
\n
  function tokenBase(stream, state) {\n
    curPunc = null;\n
    var ch = stream.next();\n
    if (ch == "#") {\n
      stream.skipToEnd();\n
      return "comment";\n
    } else if (ch == "0" && stream.eat("x")) {\n
      stream.eatWhile(/[\\da-f]/i);\n
      return "number";\n
    } else if (ch == "." && stream.eat(/\\d/)) {\n
      stream.match(/\\d*(?:e[+\\-]?\\d+)?/);\n
      return "number";\n
    } else if (/\\d/.test(ch)) {\n
      stream.match(/\\d*(?:\\.\\d+)?(?:e[+\\-]\\d+)?L?/);\n
      return "number";\n
    } else if (ch == "\'" || ch == \'"\') {\n
      state.tokenize = tokenString(ch);\n
      return "string";\n
    } else if (ch == "." && stream.match(/.[.\\d]+/)) {\n
      return "keyword";\n
    } else if (/[\\w\\.]/.test(ch) && ch != "_") {\n
      stream.eatWhile(/[\\w\\.]/);\n
      var word = stream.current();\n
      if (atoms.propertyIsEnumerable(word)) return "atom";\n
      if (keywords.propertyIsEnumerable(word)) {\n
        // Block keywords start new blocks, except \'else if\', which only starts\n
        // one new block for the \'if\', no block for the \'else\'.\n
        if (blockkeywords.propertyIsEnumerable(word) &&\n
            !stream.match(/\\s*if(\\s+|$)/, false))\n
          curPunc = "block";\n
        return "keyword";\n
      }\n
      if (builtins.propertyIsEnumerable(word)) return "builtin";\n
      return "variable";\n
    } else if (ch == "%") {\n
      if (stream.skipTo("%")) stream.next();\n
      return "variable-2";\n
    } else if (ch == "<" && stream.eat("-")) {\n
      return "arrow";\n
    } else if (ch == "=" && state.ctx.argList) {\n
      return "arg-is";\n
    } else if (opChars.test(ch)) {\n
      if (ch == "$") return "dollar";\n
      stream.eatWhile(opChars);\n
      return "operator";\n
    } else if (/[\\(\\){}\\[\\];]/.test(ch)) {\n
      curPunc = ch;\n
      if (ch == ";") return "semi";\n
      return null;\n
    } else {\n
      return null;\n
    }\n
  }\n
\n
  function tokenString(quote) {\n
    return function(stream, state) {\n
      if (stream.eat("\\\\")) {\n
        var ch = stream.next();\n
        if (ch == "x") stream.match(/^[a-f0-9]{2}/i);\n
        else if ((ch == "u" || ch == "U") && stream.eat("{") && stream.skipTo("}")) stream.next();\n
        else if (ch == "u") stream.match(/^[a-f0-9]{4}/i);\n
        else if (ch == "U") stream.match(/^[a-f0-9]{8}/i);\n
        else if (/[0-7]/.test(ch)) stream.match(/^[0-7]{1,2}/);\n
        return "string-2";\n
      } else {\n
        var next;\n
        while ((next = stream.next()) != null) {\n
          if (next == quote) { state.tokenize = tokenBase; break; }\n
          if (next == "\\\\") { stream.backUp(1); break; }\n
        }\n
        return "string";\n
      }\n
    };\n
  }\n
\n
  function push(state, type, stream) {\n
    state.ctx = {type: type,\n
                 indent: state.indent,\n
                 align: null,\n
                 column: stream.column(),\n
                 prev: state.ctx};\n
  }\n
  function pop(state) {\n
    state.indent = state.ctx.indent;\n
    state.ctx = state.ctx.prev;\n
  }\n
\n
  return {\n
    startState: function() {\n
      return {tokenize: tokenBase,\n
              ctx: {type: "top",\n
                    indent: -config.indentUnit,\n
                    align: false},\n
              indent: 0,\n
              afterIdent: false};\n
    },\n
\n
    token: function(stream, state) {\n
      if (stream.sol()) {\n
        if (state.ctx.align == null) state.ctx.align = false;\n
        state.indent = stream.indentation();\n
      }\n
      if (stream.eatSpace()) return null;\n
      var style = state.tokenize(stream, state);\n
      if (style != "comment" && state.ctx.align == null) state.ctx.align = true;\n
\n
      var ctype = state.ctx.type;\n
      if ((curPunc == ";" || curPunc == "{" || curPunc == "}") && ctype == "block") pop(state);\n
      if (curPunc == "{") push(state, "}", stream);\n
      else if (curPunc == "(") {\n
        push(state, ")", stream);\n
        if (state.afterIdent) state.ctx.argList = true;\n
      }\n
      else if (curPunc == "[") push(state, "]", stream);\n
      else if (curPunc == "block") push(state, "block", stream);\n
      else if (curPunc == ctype) pop(state);\n
      state.afterIdent = style == "variable" || style == "keyword";\n
      return style;\n
    },\n
\n
    indent: function(state, textAfter) {\n
      if (state.tokenize != tokenBase) return 0;\n
      var firstChar = textAfter && textAfter.charAt(0), ctx = state.ctx,\n
          closing = firstChar == ctx.type;\n
      if (ctx.type == "block") return ctx.indent + (firstChar == "{" ? 0 : config.indentUnit);\n
      else if (ctx.align) return ctx.column + (closing ? 0 : 1);\n
      else return ctx.indent + (closing ? 0 : config.indentUnit);\n
    },\n
\n
    lineComment: "#"\n
  };\n
});\n
\n
CodeMirror.defineMIME("text/x-rsrc", "r");\n
\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>5677</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
