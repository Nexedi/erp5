<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="ZopePageTemplate" module="Products.PageTemplates.ZopePageTemplate"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_text</string> </key>
            <value> <unicode encoding="cdata"><![CDATA[

<!doctype html>\n
\n
<title>CodeMirror: XQuery mode</title>\n
<meta charset="utf-8"/>\n
<link rel=stylesheet href="../../doc/docs.css">\n
\n
<link rel="stylesheet" href="../../lib/codemirror.css">\n
<link rel="stylesheet" href="../../theme/xq-dark.css">\n
<script src="../../lib/codemirror.js"></script>\n
<script src="xquery.js"></script>\n
<style type="text/css">\n
\t.CodeMirror {\n
\t  border-top: 1px solid black; border-bottom: 1px solid black;\n
\t  height:400px;\n
\t}\n
    </style>\n
<div id=nav>\n
  <a href="http://codemirror.net"><h1>CodeMirror</h1><img id=logo src="../../doc/logo.png"></a>\n
\n
  <ul>\n
    <li><a href="../../index.html">Home</a>\n
    <li><a href="../../doc/manual.html">Manual</a>\n
    <li><a href="https://github.com/codemirror/codemirror">Code</a>\n
  </ul>\n
  <ul>\n
    <li><a href="../index.html">Language modes</a>\n
    <li><a class=active href="#">XQuery</a>\n
  </ul>\n
</div>\n
\n
<article>\n
<h2>XQuery mode</h2>\n
 \n
 \n
<div class="cm-s-default"> \n
\t<textarea id="code" name="code"> \n
xquery version &quot;1.0-ml&quot;;\n
(: this is\n
 : a \n
   "comment" :)\n
let $let := &lt;x attr=&quot;value&quot;&gt;&quot;test&quot;&lt;func&gt;function() $var {function()} {$var}&lt;/func&gt;&lt;/x&gt;\n
let $joe:=1\n
return element element {\n
\tattribute attribute { 1 },\n
\telement test { &#39;a&#39; }, \n
\tattribute foo { &quot;bar&quot; },\n
\tfn:doc()[ foo/@bar eq $let ],\n
\t//x }    \n
 \n
(: a more \'evil\' test :)\n
(: Modified Blakeley example (: with nested comment :) ... :)\n
declare private function local:declare() {()};\n
declare private function local:private() {()};\n
declare private function local:function() {()};\n
declare private function local:local() {()};\n
let $let := &lt;let&gt;let $let := &quot;let&quot;&lt;/let&gt;\n
return element element {\n
\tattribute attribute { try { xdmp:version() } catch($e) { xdmp:log($e) } },\n
\tattribute fn:doc { &quot;bar&quot; castable as xs:string },\n
\telement text { text { &quot;text&quot; } },\n
\tfn:doc()[ child::eq/(@bar | attribute::attribute) eq $let ],\n
\t//fn:doc\n
}\n
\n
\n
\n
xquery version &quot;1.0-ml&quot;;\n
\n
(: Copyright 2006-2010 Mark Logic Corporation. :)\n
\n
(:\n
 : Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);\n
 : you may not use this file except in compliance with the License.\n
 : You may obtain a copy of the License at\n
 :\n
 :     http://www.apache.org/licenses/LICENSE-2.0\n
 :\n
 : Unless required by applicable law or agreed to in writing, software\n
 : distributed under the License is distributed on an &quot;AS IS&quot; BASIS,\n
 : WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n
 : See the License for the specific language governing permissions and\n
 : limitations under the License.\n
 :)\n
\n
module namespace json = &quot;http://marklogic.com/json&quot;;\n
declare default function namespace &quot;http://www.w3.org/2005/xpath-functions&quot;;\n
\n
(: Need to backslash escape any double quotes, backslashes, and newlines :)\n
declare function json:escape($s as xs:string) as xs:string {\n
  let $s := replace($s, &quot;\\\\&quot;, &quot;\\\\\\\\&quot;)\n
  let $s := replace($s, &quot;&quot;&quot;&quot;, &quot;\\\\&quot;&quot;&quot;)\n
  let $s := replace($s, codepoints-to-string((13, 10)), &quot;\\\\n&quot;)\n
  let $s := replace($s, codepoints-to-string(13), &quot;\\\\n&quot;)\n
  let $s := replace($s, codepoints-to-string(10), &quot;\\\\n&quot;)\n
  return $s\n
};\n
\n
declare function json:atomize($x as element()) as xs:string {\n
  if (count($x/node()) = 0) then \'null\'\n
  else if ($x/@type = &quot;number&quot;) then\n
    let $castable := $x castable as xs:float or\n
                     $x castable as xs:double or\n
                     $x castable as xs:decimal\n
    return\n
    if ($castable) then xs:string($x)\n
    else error(concat(&quot;Not a number: &quot;, xdmp:describe($x)))\n
  else if ($x/@type = &quot;boolean&quot;) then\n
    let $castable := $x castable as xs:boolean\n
    return\n
    if ($castable) then xs:string(xs:boolean($x))\n
    else error(concat(&quot;Not a boolean: &quot;, xdmp:describe($x)))\n
  else concat(\'&quot;\', json:escape($x), \'&quot;\')\n
};\n
\n
(: Print the thing that comes after the colon :)\n
declare function json:print-value($x as element()) as xs:string {\n
  if (count($x/*) = 0) then\n
    json:atomize($x)\n
  else if ($x/@quote = &quot;true&quot;) then\n
    concat(\'&quot;\', json:escape(xdmp:quote($x/node())), \'&quot;\')\n
  else\n
    string-join((\'{\',\n
      string-join(for $i in $x/* return json:print-name-value($i), &quot;,&quot;),\n
    \'}\'), &quot;&quot;)\n
};\n
\n
(: Print the name and value both :)\n
declare function json:print-name-value($x as element()) as xs:string? {\n
  let $name := name($x)\n
  let $first-in-array :=\n
    count($x/preceding-sibling::*[name(.) = $name]) = 0 and\n
    (count($x/following-sibling::*[name(.) = $name]) &gt; 0 or $x/@array = &quot;true&quot;)\n
  let $later-in-array := count($x/preceding-sibling::*[name(.) = $name]) &gt; 0\n
  return\n
\n
  if ($later-in-array) then\n
    ()  (: I was handled previously :)\n
  else if ($first-in-array) then\n
    string-join((\'&quot;\', json:escape($name), \'&quot;:[\',\n
      string-join((for $i in ($x, $x/following-sibling::*[name(.) = $name]) return json:print-value($i)), &quot;,&quot;),\n
    \']\'), &quot;&quot;)\n
   else\n
     string-join((\'&quot;\', json:escape($name), \'&quot;:\', json:print-value($x)), &quot;&quot;)\n
};\n
\n
(:~\n
  Transforms an XML element into a JSON string representation.  See http://json.org.\n
  &lt;p/&gt;\n
  Sample usage:\n
  &lt;pre&gt;\n
    xquery version &quot;1.0-ml&quot;;\n
    import module namespace json=&quot;http://marklogic.com/json&quot; at &quot;json.xqy&quot;;\n
    json:serialize(&amp;lt;foo&amp;gt;&amp;lt;bar&amp;gt;kid&amp;lt;/bar&amp;gt;&amp;lt;/foo&amp;gt;)\n
  &lt;/pre&gt;\n
  Sample transformations:\n
  &lt;pre&gt;\n
  &amp;lt;e/&amp;gt; becomes {&quot;e&quot;:null}\n
  &amp;lt;e&amp;gt;text&amp;lt;/e&amp;gt; becomes {&quot;e&quot;:&quot;text&quot;}\n
  &amp;lt;e&amp;gt;quote &quot; escaping&amp;lt;/e&amp;gt; becomes {&quot;e&quot;:&quot;quote \\&quot; escaping&quot;}\n
  &amp;lt;e&amp;gt;backslash \\ escaping&amp;lt;/e&amp;gt; becomes {&quot;e&quot;:&quot;backslash \\\\ escaping&quot;}\n
  &amp;lt;e&amp;gt;&amp;lt;a&amp;gt;text1&amp;lt;/a&amp;gt;&amp;lt;b&amp;gt;text2&amp;lt;/b&amp;gt;&amp;lt;/e&amp;gt; becomes {&quot;e&quot;:{&quot;a&quot;:&quot;text1&quot;,&quot;b&quot;:&quot;text2&quot;}}\n
  &amp;lt;e&amp;gt;&amp;lt;a&amp;gt;text1&amp;lt;/a&amp;gt;&amp;lt;a&amp;gt;text2&amp;lt;/a&amp;gt;&amp;lt;/e&amp;gt; becomes {&quot;e&quot;:{&quot;a&quot;:[&quot;text1&quot;,&quot;text2&quot;]}}\n
  &amp;lt;e&amp;gt;&amp;lt;a array=&quot;true&quot;&amp;gt;text1&amp;lt;/a&amp;gt;&amp;lt;/e&amp;gt; becomes {&quot;e&quot;:{&quot;a&quot;:[&quot;text1&quot;]}}\n
  &amp;lt;e&amp;gt;&amp;lt;a type=&quot;boolean&quot;&amp;gt;false&amp;lt;/a&amp;gt;&amp;lt;/e&amp;gt; becomes {&quot;e&quot;:{&quot;a&quot;:false}}\n
  &amp;lt;e&amp;gt;&amp;lt;a type=&quot;number&quot;&amp;gt;123.5&amp;lt;/a&amp;gt;&amp;lt;/e&amp;gt; becomes {&quot;e&quot;:{&quot;a&quot;:123.5}}\n
  &amp;lt;e quote=&quot;true&quot;&amp;gt;&amp;lt;div attrib=&quot;value&quot;/&amp;gt;&amp;lt;/e&amp;gt; becomes {&quot;e&quot;:&quot;&amp;lt;div attrib=\\&quot;value\\&quot;/&amp;gt;&quot;}\n
  &lt;/pre&gt;\n
  &lt;p/&gt;\n
  Namespace URIs are ignored.  Namespace prefixes are included in the JSON name.\n
  &lt;p/&gt;\n
  Attributes are ignored, except for the special attribute @array=&quot;true&quot; that\n
  indicates the JSON serialization should write the node, even if single, as an\n
  array, and the attribute @type that can be set to &quot;boolean&quot; or &quot;number&quot; to\n
  dictate the value should be written as that type (unquoted).  There\'s also\n
  an @quote attribute that when set to true writes the inner content as text\n
  rather than as structured JSON, useful for sending some XHTML over the\n
  wire.\n
  &lt;p/&gt;\n
  Text nodes within mixed content are ignored.\n
\n
  @param $x Element node to convert\n
  @return String holding JSON serialized representation of $x\n
\n
  @author Jason Hunter\n
  @version 1.0.1\n
  \n
  Ported to xquery 1.0-ml; double escaped backslashes in json:escape\n
:)\n
declare function json:serialize($x as element())  as xs:string {\n
  string-join((\'{\', json:print-name-value($x), \'}\'), &quot;&quot;)\n
};\n
  </textarea> \n
</div> \n
 \n
    <script> \n
      var editor = CodeMirror.fromTextArea(document.getElementById("code"), {\n
        lineNumbers: true,\n
        matchBrackets: true,\n
        theme: "xq-dark"\n
      });\n
    </script> \n
 \n
    <p><strong>MIME types defined:</strong> <code>application/xquery</code>.</p> \n
 \n
    <p>Development of the CodeMirror XQuery mode was sponsored by \n
      <a href="http://marklogic.com">MarkLogic</a> and developed by \n
      <a href="https://twitter.com/mbrevoort">Mike Brevoort</a>.\n
    </p>\n
 \n
  </article>

]]></unicode> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>text/html</string> </value>
        </item>
        <item>
            <key> <string>expand</string> </key>
            <value> <int>0</int> </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>index.html</string> </value>
        </item>
        <item>
            <key> <string>output_encoding</string> </key>
            <value> <string>iso-8859-15</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
