<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604381.84</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>test.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
(function() {\n
  var mode = CodeMirror.getMode({tabSize: 4}, "markdown");\n
  function MT(name) { test.mode(name, mode, Array.prototype.slice.call(arguments, 1)); }\n
  var modeHighlightFormatting = CodeMirror.getMode({tabSize: 4}, {name: "markdown", highlightFormatting: true});\n
  function FT(name) { test.mode(name, modeHighlightFormatting, Array.prototype.slice.call(arguments, 1)); }\n
  var modeAtxNoSpace = CodeMirror.getMode({tabSize: 4}, {name: "markdown", allowAtxHeaderWithoutSpace: true});\n
  function AtxNoSpaceTest(name) { test.mode(name, modeAtxNoSpace, Array.prototype.slice.call(arguments, 1)); }\n
  var modeFenced = CodeMirror.getMode({tabSize: 4}, {name: "markdown", fencedCodeBlocks: true});\n
  function FencedTest(name) { test.mode(name, modeFenced, Array.prototype.slice.call(arguments, 1)); }\n
  var modeOverrideClasses = CodeMirror.getMode({tabsize: 4}, {\n
    name: "markdown",\n
    strikethrough: true,\n
    tokenTypeOverrides: {\n
      "header" : "override-header",\n
      "code" : "override-code",\n
      "quote" : "override-quote",\n
      "list1" : "override-list1",\n
      "list2" : "override-list2",\n
      "list3" : "override-list3",\n
      "hr" : "override-hr",\n
      "image" : "override-image",\n
      "linkInline" : "override-link-inline",\n
      "linkEmail" : "override-link-email",\n
      "linkText" : "override-link-text",\n
      "linkHref" : "override-link-href",\n
      "em" : "override-em",\n
      "strong" : "override-strong",\n
      "strikethrough" : "override-strikethrough"\n
  }});\n
  function TokenTypeOverrideTest(name) { test.mode(name, modeOverrideClasses, Array.prototype.slice.call(arguments, 1)); }\n
  var modeFormattingOverride = CodeMirror.getMode({tabsize: 4}, {\n
    name: "markdown",\n
    highlightFormatting: true,\n
    tokenTypeOverrides: {\n
      "formatting" : "override-formatting"\n
  }});\n
  function FormatTokenTypeOverrideTest(name) { test.mode(name, modeFormattingOverride, Array.prototype.slice.call(arguments, 1)); }\n
\n
\n
  FT("formatting_emAsterisk",\n
     "[em&formatting&formatting-em *][em foo][em&formatting&formatting-em *]");\n
\n
  FT("formatting_emUnderscore",\n
     "[em&formatting&formatting-em _][em foo][em&formatting&formatting-em _]");\n
\n
  FT("formatting_strongAsterisk",\n
     "[strong&formatting&formatting-strong **][strong foo][strong&formatting&formatting-strong **]");\n
\n
  FT("formatting_strongUnderscore",\n
     "[strong&formatting&formatting-strong __][strong foo][strong&formatting&formatting-strong __]");\n
\n
  FT("formatting_codeBackticks",\n
     "[comment&formatting&formatting-code `][comment foo][comment&formatting&formatting-code `]");\n
\n
  FT("formatting_doubleBackticks",\n
     "[comment&formatting&formatting-code ``][comment foo ` bar][comment&formatting&formatting-code ``]");\n
\n
  FT("formatting_atxHeader",\n
     "[header&header-1&formatting&formatting-header&formatting-header-1 # ][header&header-1 foo # bar ][header&header-1&formatting&formatting-header&formatting-header-1 #]");\n
\n
  FT("formatting_setextHeader",\n
     "foo",\n
     "[header&header-1&formatting&formatting-header&formatting-header-1 =]");\n
\n
  FT("formatting_blockquote",\n
     "[quote&quote-1&formatting&formatting-quote&formatting-quote-1 > ][quote&quote-1 foo]");\n
\n
  FT("formatting_list",\n
     "[variable-2&formatting&formatting-list&formatting-list-ul - ][variable-2 foo]");\n
  FT("formatting_list",\n
     "[variable-2&formatting&formatting-list&formatting-list-ol 1. ][variable-2 foo]");\n
\n
  FT("formatting_link",\n
     "[link&formatting&formatting-link [][link foo][link&formatting&formatting-link ]]][string&formatting&formatting-link-string&url (][string&url http://example.com/][string&formatting&formatting-link-string&url )]");\n
\n
  FT("formatting_linkReference",\n
     "[link&formatting&formatting-link [][link foo][link&formatting&formatting-link ]]][string&formatting&formatting-link-string&url [][string&url bar][string&formatting&formatting-link-string&url ]]]",\n
     "[link&formatting&formatting-link [][link bar][link&formatting&formatting-link ]]:] [string&url http://example.com/]");\n
\n
  FT("formatting_linkWeb",\n
     "[link&formatting&formatting-link <][link http://example.com/][link&formatting&formatting-link >]");\n
\n
  FT("formatting_linkEmail",\n
     "[link&formatting&formatting-link <][link user@example.com][link&formatting&formatting-link >]");\n
\n
  FT("formatting_escape",\n
     "[formatting-escape \\\\*]");\n
\n
  MT("plainText",\n
     "foo");\n
\n
  // Don\'t style single trailing space\n
  MT("trailingSpace1",\n
     "foo ");\n
\n
  // Two or more trailing spaces should be styled with line break character\n
  MT("trailingSpace2",\n
     "foo[trailing-space-a  ][trailing-space-new-line  ]");\n
\n
  MT("trailingSpace3",\n
     "foo[trailing-space-a  ][trailing-space-b  ][trailing-space-new-line  ]");\n
\n
  MT("trailingSpace4",\n
     "foo[trailing-space-a  ][trailing-space-b  ][trailing-space-a  ][trailing-space-new-line  ]");\n
\n
  // Code blocks using 4 spaces (regardless of CodeMirror.tabSize value)\n
  MT("codeBlocksUsing4Spaces",\n
     "    [comment foo]");\n
\n
  // Code blocks using 4 spaces with internal indentation\n
  MT("codeBlocksUsing4SpacesIndentation",\n
     "    [comment bar]",\n
     "        [comment hello]",\n
     "            [comment world]",\n
     "    [comment foo]",\n
     "bar");\n
\n
  // Code blocks should end even after extra indented lines\n
  MT("codeBlocksWithTrailingIndentedLine",\n
     "    [comment foo]",\n
     "        [comment bar]",\n
     "    [comment baz]",\n
     "    ",\n
     "hello");\n
\n
  // Code blocks using 1 tab (regardless of CodeMirror.indentWithTabs value)\n
  MT("codeBlocksUsing1Tab",\n
     "\\t[comment foo]");\n
\n
  // No code blocks directly after paragraph\n
  // http://spec.commonmark.org/0.19/#example-65\n
  MT("noCodeBlocksAfterParagraph",\n
     "Foo",\n
     "    Bar");\n
\n
  // Inline code using backticks\n
  MT("inlineCodeUsingBackticks",\n
     "foo [comment `bar`]");\n
\n
  // Block code using single backtick (shouldn\'t work)\n
  MT("blockCodeSingleBacktick",\n
     "[comment `]",\n
     "[comment foo]",\n
     "[comment `]");\n
\n
  // Unclosed backticks\n
  // Instead of simply marking as CODE, it would be nice to have an\n
  // incomplete flag for CODE, that is styled slightly different.\n
  MT("unclosedBackticks",\n
     "foo [comment `bar]");\n
\n
  // Per documentation: "To include a literal backtick character within a\n
  // code span, you can use multiple backticks as the opening and closing\n
  // delimiters"\n
  MT("doubleBackticks",\n
     "[comment ``foo ` bar``]");\n
\n
  // Tests based on Dingus\n
  // http://daringfireball.net/projects/markdown/dingus\n
  //\n
  // Multiple backticks within an inline code block\n
  MT("consecutiveBackticks",\n
     "[comment `foo```bar`]");\n
\n
  // Multiple backticks within an inline code block with a second code block\n
  MT("consecutiveBackticks",\n
     "[comment `foo```bar`] hello [comment `world`]");\n
\n
  // Unclosed with several different groups of backticks\n
  MT("unclosedBackticks",\n
     "[comment ``foo ``` bar` hello]");\n
\n
  // Closed with several different groups of backticks\n
  MT("closedBackticks",\n
     "[comment ``foo ``` bar` hello``] world");\n
\n
  // atx headers\n
  // http://daringfireball.net/projects/markdown/syntax#header\n
\n
  MT("atxH1",\n
     "[header&header-1 # foo]");\n
\n
  MT("atxH2",\n
     "[header&header-2 ## foo]");\n
\n
  MT("atxH3",\n
     "[header&header-3 ### foo]");\n
\n
  MT("atxH4",\n
     "[header&header-4 #### foo]");\n
\n
  MT("atxH5",\n
     "[header&header-5 ##### foo]");\n
\n
  MT("atxH6",\n
     "[header&header-6 ###### foo]");\n
\n
  // http://spec.commonmark.org/0.19/#example-24\n
  MT("noAtxH7",\n
     "####### foo");\n
\n
  // http://spec.commonmark.org/0.19/#example-25\n
  MT("noAtxH1WithoutSpace",\n
     "#5 bolt");\n
\n
  // CommonMark requires a space after # but most parsers don\'t\n
  AtxNoSpaceTest("atxNoSpaceAllowed_H1NoSpace",\n
     "[header&header-1 #foo]");\n
\n
  AtxNoSpaceTest("atxNoSpaceAllowed_H4NoSpace",\n
     "[header&header-4 ####foo]");\n
\n
  AtxNoSpaceTest("atxNoSpaceAllowed_H1Space",\n
     "[header&header-1 # foo]");\n
\n
  // Inline styles should be parsed inside headers\n
  MT("atxH1inline",\n
     "[header&header-1 # foo ][header&header-1&em *bar*]");\n
\n
  // Setext headers - H1, H2\n
  // Per documentation, "Any number of underlining =’s or -’s will work."\n
  // http://daringfireball.net/projects/markdown/syntax#header\n
  // Ideally, the text would be marked as `header` as well, but this is\n
  // not really feasible at the moment. So, instead, we\'re testing against\n
  // what works today, to avoid any regressions.\n
  //\n
  // Check if single underlining = works\n
  MT("setextH1",\n
     "foo",\n
     "[header&header-1 =]");\n
\n
  // Check if 3+ =\'s work\n
  MT("setextH1",\n
     "foo",\n
     "[header&header-1 ===]");\n
\n
  // Check if single underlining - works\n
  MT("setextH2",\n
     "foo",\n
     "[header&header-2 -]");\n
\n
  // Check if 3+ -\'s work\n
  MT("setextH2",\n
     "foo",\n
     "[header&header-2 ---]");\n
\n
  // http://spec.commonmark.org/0.19/#example-45\n
  MT("setextH2AllowSpaces",\n
     "foo",\n
     "   [header&header-2 ----      ]");\n
\n
  // http://spec.commonmark.org/0.19/#example-44\n
  MT("noSetextAfterIndentedCodeBlock",\n
     "     [comment foo]",\n
     "[hr ---]");\n
\n
  // http://spec.commonmark.org/0.19/#example-51\n
  MT("noSetextAfterQuote",\n
     "[quote&quote-1 > foo]",\n
     "[hr ---]");\n
\n
  MT("noSetextAfterList",\n
     "[variable-2 - foo]",\n
     "[hr ---]");\n
\n
  // Single-line blockquote with trailing space\n
  MT("blockquoteSpace",\n
     "[quote&quote-1 > foo]");\n
\n
  // Single-line blockquote\n
  MT("blockquoteNoSpace",\n
     "[quote&quote-1 >foo]");\n
\n
  // No blank line before blockquote\n
  MT("blockquoteNoBlankLine",\n
     "foo",\n
     "[quote&quote-1 > bar]");\n
\n
  // Nested blockquote\n
  MT("blockquoteSpace",\n
     "[quote&quote-1 > foo]",\n
     "[quote&quote-1 >][quote&quote-2 > foo]",\n
     "[quote&quote-1 >][quote&quote-2 >][quote&quote-3 > foo]");\n
\n
  // Single-line blockquote followed by normal paragraph\n
  MT("blockquoteThenParagraph",\n
     "[quote&quote-1 >foo]",\n
     "",\n
     "bar");\n
\n
  // Multi-line blockquote (lazy mode)\n
  MT("multiBlockquoteLazy",\n
     "[quote&quote-1 >foo]",\n
     "[quote&quote-1 bar]");\n
\n
  // Multi-line blockquote followed by normal paragraph (lazy mode)\n
  MT("multiBlockquoteLazyThenParagraph",\n
     "[quote&quote-1 >foo]",\n
     "[quote&quote-1 bar]",\n
     "",\n
     "hello");\n
\n
  // Multi-line blockquote (non-lazy mode)\n
  MT("multiBlockquote",\n
     "[quote&quote-1 >foo]",\n
     "[quote&quote-1 >bar]");\n
\n
  // Multi-line blockquote followed by normal paragraph (non-lazy mode)\n
  MT("multiBlockquoteThenParagraph",\n
     "[quote&quote-1 >foo]",\n
     "[quote&quote-1 >bar]",\n
     "",\n
     "hello");\n
\n
  // Header with leading space after continued blockquote (#3287, negative indentation)\n
  MT("headerAfterContinuedBlockquote",\n
     "[quote&quote-1 > foo]",\n
     "[quote&quote-1 bar]",\n
     "",\n
     " [header&header-1 # hello]");\n
\n
  // Check list types\n
\n
  MT("listAsterisk",\n
     "foo",\n
     "bar",\n
     "",\n
     "[variable-2 * foo]",\n
     "[variable-2 * bar]");\n
\n
  MT("listPlus",\n
     "foo",\n
     "bar",\n
     "",\n
     "[variable-2 + foo]",\n
     "[variable-2 + bar]");\n
\n
  MT("listDash",\n
     "foo",\n
     "bar",\n
     "",\n
     "[variable-2 - foo]",\n
     "[variable-2 - bar]");\n
\n
  MT("listNumber",\n
     "foo",\n
     "bar",\n
     "",\n
     "[variable-2 1. foo]",\n
     "[variable-2 2. bar]");\n
\n
  // Lists require a preceding blank line (per Dingus)\n
  MT("listBogus",\n
     "foo",\n
     "1. bar",\n
     "2. hello");\n
\n
  // List after hr\n
  MT("listAfterHr",\n
     "[hr ---]",\n
     "[variable-2 - bar]");\n
\n
  // List after header\n
  MT("listAfterHeader",\n
     "[header&header-1 # foo]",\n
     "[variable-2 - bar]");\n
\n
  // hr after list\n
  MT("hrAfterList",\n
     "[variable-2 - foo]",\n
     "[hr -----]");\n
\n
  // Formatting in lists (*)\n
  MT("listAsteriskFormatting",\n
     "[variable-2 * ][variable-2&em *foo*][variable-2  bar]",\n
     "[variable-2 * ][variable-2&strong **foo**][variable-2  bar]",\n
     "[variable-2 * ][variable-2&strong **][variable-2&em&strong *foo**][variable-2&em *][variable-2  bar]",\n
     "[variable-2 * ][variable-2&comment `foo`][variable-2  bar]");\n
\n
  // Formatting in lists (+)\n
  MT("listPlusFormatting",\n
     "[variable-2 + ][variable-2&em *foo*][variable-2  bar]",\n
     "[variable-2 + ][variable-2&strong **foo**][variable-2  bar]",\n
     "[variable-2 + ][variable-2&strong **][variable-2&em&strong *foo**][variable-2&em *][variable-2  bar]",\n
     "[variable-2 + ][variable-2&comment `foo`][variable-2  bar]");\n
\n
  // Formatting in lists (-)\n
  MT("listDashFormatting",\n
     "[variable-2 - ][variable-2&em *foo*][variable-2  bar]",\n
     "[variable-2 - ][variable-2&strong **foo**][variable-2  bar]",\n
     "[variable-2 - ][variable-2&strong **][variable-2&em&strong *foo**][variable-2&em *][variable-2  bar]",\n
     "[variable-2 - ][variable-2&comment `foo`][variable-2  bar]");\n
\n
  // Formatting in lists (1.)\n
  MT("listNumberFormatting",\n
     "[variable-2 1. ][variable-2&em *foo*][variable-2  bar]",\n
     "[variable-2 2. ][variable-2&strong **foo**][variable-2  bar]",\n
     "[variable-2 3. ][variable-2&strong **][variable-2&em&strong *foo**][variable-2&em *][variable-2  bar]",\n
     "[variable-2 4. ][variable-2&comment `foo`][variable-2  bar]");\n
\n
  // Paragraph lists\n
  MT("listParagraph",\n
     "[variable-2 * foo]",\n
     "",\n
     "[variable-2 * bar]");\n
\n
  // Multi-paragraph lists\n
  //\n
  // 4 spaces\n
  MT("listMultiParagraph",\n
     "[variable-2 * foo]",\n
     "",\n
     "[variable-2 * bar]",\n
     "",\n
     "    [variable-2 hello]");\n
\n
  // 4 spaces, extra blank lines (should still be list, per Dingus)\n
  MT("listMultiParagraphExtra",\n
     "[variable-2 * foo]",\n
     "",\n
     "[variable-2 * bar]",\n
     "",\n
     "",\n
     "    [variable-2 hello]");\n
\n
  // 4 spaces, plus 1 space (should still be list, per Dingus)\n
  MT("listMultiParagraphExtraSpace",\n
     "[variable-2 * foo]",\n
     "",\n
     "[variable-2 * bar]",\n
     "",\n
     "     [variable-2 hello]",\n
     "",\n
     "    [variable-2 world]");\n
\n
  // 1 tab\n
  MT("listTab",\n
     "[variable-2 * foo]",\n
     "",\n
     "[variable-2 * bar]",\n
     "",\n
     "\\t[variable-2 hello]");\n
\n
  // No indent\n
  MT("listNoIndent",\n
     "[variable-2 * foo]",\n
     "",\n
     "[variable-2 * bar]",\n
     "",\n
     "hello");\n
\n
  MT("listCommonMarkIndentationCode",\n
     "[variable-2 * Code blocks also affect]",\n
     "  [variable-3 * The next level starts where the contents start.]",\n
     "   [variable-3 *    Anything less than that will keep the item on the same level.]",\n
     "       [variable-3 * Each list item can indent the first level further and further.]",\n
     "  [variable-3 * For the most part, this makes sense while writing a list.]",\n
     "    [keyword * This means two items with same indentation can be different levels.]",\n
     "     [keyword *  Each level has an indent requirement that can change between items.]",\n
     "       [keyword * A list item that meets this will be part of the next level.]",\n
     "   [variable-3 * Otherwise, it will be part of the level where it does meet this.]",\n
     " [variable-2 * World]");\n
\n
  // Blockquote\n
  MT("blockquote",\n
     "[variable-2 * foo]",\n
     "",\n
     "[variable-2 * bar]",\n
     "",\n
     "    [variable-2&quote&quote-1 > hello]");\n
\n
  // Code block\n
  MT("blockquoteCode",\n
     "[variable-2 * foo]",\n
     "",\n
     "[variable-2 * bar]",\n
     "",\n
     "        [comment > hello]",\n
     "",\n
     "    [variable-2 world]");\n
\n
  // Code block followed by text\n
  MT("blockquoteCodeText",\n
     "[variable-2 * foo]",\n
     "",\n
     "    [variable-2 bar]",\n
     "",\n
     "        [comment hello]",\n
     "",\n
     "    [variable-2 world]");\n
\n
  // Nested list\n
\n
  MT("listAsteriskNested",\n
     "[variable-2 * foo]",\n
     "",\n
     "    [variable-3 * bar]");\n
\n
  MT("listPlusNested",\n
     "[variable-2 + foo]",\n
     "",\n
     "    [variable-3 + bar]");\n
\n
  MT("listDashNested",\n
     "[variable-2 - foo]",\n
     "",\n
     "    [variable-3 - bar]");\n
\n
  MT("listNumberNested",\n
     "[variable-2 1. foo]",\n
     "",\n
     "    [variable-3 2. bar]");\n
\n
  MT("listMixed",\n
     "[variable-2 * foo]",\n
     "",\n
     "    [variable-3 + bar]",\n
     "",\n
     "        [keyword - hello]",\n
     "",\n
     "            [variable-2 1. world]");\n
\n
  MT("listBlockquote",\n
     "[variable-2 * foo]",\n
     "",\n
     "    [variable-3 + bar]",\n
     "",\n
     "        [quote&quote-1&variable-3 > hello]");\n
\n
  MT("listCode",\n
     "[variable-2 * foo]",\n
     "",\n
     "    [variable-3 + bar]",\n
     "",\n
     "            [comment hello]");\n
\n
  // Code with internal indentation\n
  MT("listCodeIndentation",\n
     "[variable-2 * foo]",\n
     "",\n
     "        [comment bar]",\n
     "            [comment hello]",\n
     "                [comment world]",\n
     "        [comment foo]",\n
     "    [variable-2 bar]");\n
\n
  // List nesting edge cases\n
  MT("listNested",\n
    "[variable-2 * foo]",\n
    "",\n
    "    [variable-3 * bar]",\n
    "",\n
    "       [variable-3 hello]"\n
  );\n
  MT("listNested",\n
    "[variable-2 * foo]",\n
    "",\n
    "    [variable-3 * bar]",\n
    "",\n
    "      [keyword * foo]"\n
  );\n
\n
  // Code followed by text\n
  MT("listCodeText",\n
     "[variable-2 * foo]",\n
     "",\n
     "        [comment bar]",\n
     "",\n
     "hello");\n
\n
  // Following tests directly from official Markdown documentation\n
  // http://daringfireball.net/projects/markdown/syntax#hr\n
\n
  MT("hrSpace",\n
     "[hr * * *]");\n
\n
  MT("hr",\n
     "[hr ***]");\n
\n
  MT("hrLong",\n
     "[hr *****]");\n
\n
  MT("hrSpaceDash",\n
     "[hr - - -]");\n
\n
  MT("hrDashLong",\n
     "[hr ---------------------------------------]");\n
\n
  // Inline link with title\n
  MT("linkTitle",\n
     "[link [[foo]]][string&url (http://example.com/ \\"bar\\")] hello");\n
\n
  // Inline link without title\n
  MT("linkNoTitle",\n
     "[link [[foo]]][string&url (http://example.com/)] bar");\n
\n
  // Inline link with image\n
  MT("linkImage",\n
     "[link [[][tag ![[foo]]][string&url (http://example.com/)][link ]]][string&url (http://example.com/)] bar");\n
\n
  // Inline link with Em\n
  MT("linkEm",\n
     "[link [[][link&em *foo*][link ]]][string&url (http://example.com/)] bar");\n
\n
  // Inline link with Strong\n
  MT("linkStrong",\n
     "[link [[][link&strong **foo**][link ]]][string&url (http://example.com/)] bar");\n
\n
  // Inline link with EmStrong\n
  MT("linkEmStrong",\n
     "[link [[][link&strong **][link&em&strong *foo**][link&em *][link ]]][string&url (http://example.com/)] bar");\n
\n
  // Image with title\n
  MT("imageTitle",\n
     "[tag ![[foo]]][string&url (http://example.com/ \\"bar\\")] hello");\n
\n
  // Image without title\n
  MT("imageNoTitle",\n
     "[tag ![[foo]]][string&url (http://example.com/)] bar");\n
\n
  // Image with asterisks\n
  MT("imageAsterisks",\n
     "[tag ![[*foo*]]][string&url (http://example.com/)] bar");\n
\n
  // Not a link. Should be normal text due to square brackets being used\n
  // regularly in text, especially in quoted material, and no space is allowed\n
  // between square brackets and parentheses (per Dingus).\n
  MT("notALink",\n
     "[[foo]] (bar)");\n
\n
  // Reference-style links\n
  MT("linkReference",\n
     "[link [[foo]]][string&url [[bar]]] hello");\n
\n
  // Reference-style links with Em\n
  MT("linkReferenceEm",\n
     "[link [[][link&em *foo*][link ]]][string&url [[bar]]] hello");\n
\n
  // Reference-style links with Strong\n
  MT("linkReferenceStrong",\n
     "[link [[][link&strong **foo**][link ]]][string&url [[bar]]] hello");\n
\n
  // Reference-style links with EmStrong\n
  MT("linkReferenceEmStrong",\n
     "[link [[][link&strong **][link&em&strong *foo**][link&em *][link ]]][string&url [[bar]]] hello");\n
\n
  // Reference-style links with optional space separator (per docuentation)\n
  // "You can optionally use a space to separate the sets of brackets"\n
  MT("linkReferenceSpace",\n
     "[link [[foo]]] [string&url [[bar]]] hello");\n
\n
  // Should only allow a single space ("...use *a* space...")\n
  MT("linkReferenceDoubleSpace",\n
     "[[foo]]  [[bar]] hello");\n
\n
  // Reference-style links with implicit link name\n
  MT("linkImplicit",\n
     "[link [[foo]]][string&url [[]]] hello");\n
\n
  // @todo It would be nice if, at some point, the document was actually\n
  // checked to see if the referenced link exists\n
\n
  // Link label, for reference-style links (taken from documentation)\n
\n
  MT("labelNoTitle",\n
     "[link [[foo]]:] [string&url http://example.com/]");\n
\n
  MT("labelIndented",\n
     "   [link [[foo]]:] [string&url http://example.com/]");\n
\n
  MT("labelSpaceTitle",\n
     "[link [[foo bar]]:] [string&url http://example.com/ \\"hello\\"]");\n
\n
  MT("labelDoubleTitle",\n
     "[link [[foo bar]]:] [string&url http://example.com/ \\"hello\\"] \\"world\\"");\n
\n
  MT("labelTitleDoubleQuotes",\n
     "[link [[foo]]:] [string&url http://example.com/  \\"bar\\"]");\n
\n
  MT("labelTitleSingleQuotes",\n
     "[link [[foo]]:] [string&url http://example.com/  \'bar\']");\n
\n
  MT("labelTitleParenthese",\n
     "[link [[foo]]:] [string&url http://example.com/  (bar)]");\n
\n
  MT("labelTitleInvalid",\n
     "[link [[foo]]:] [string&url http://example.com/] bar");\n
\n
  MT("labelLinkAngleBrackets",\n
     "[link [[foo]]:] [string&url <http://example.com/>  \\"bar\\"]");\n
\n
  MT("labelTitleNextDoubleQuotes",\n
     "[link [[foo]]:] [string&url http://example.com/]",\n
     "[string \\"bar\\"] hello");\n
\n
  MT("labelTitleNextSingleQuotes",\n
     "[link [[foo]]:] [string&url http://example.com/]",\n
     "[string \'bar\'] hello");\n
\n
  MT("labelTitleNextParenthese",\n
     "[link [[foo]]:] [string&url http://example.com/]",\n
     "[string (bar)] hello");\n
\n
  MT("labelTitleNextMixed",\n
     "[link [[foo]]:] [string&url http://example.com/]",\n
     "(bar\\" hello");\n
\n
  MT("labelEscape",\n
     "[link [[foo \\\\]] ]]:] [string&url http://example.com/]");\n
\n
  MT("labelEscapeColon",\n
     "[link [[foo \\\\]]: bar]]:] [string&url http://example.com/]");\n
\n
  MT("labelEscapeEnd",\n
     "[[foo\\\\]]: http://example.com/");\n
\n
  MT("linkWeb",\n
     "[link <http://example.com/>] foo");\n
\n
  MT("linkWebDouble",\n
     "[link <http://example.com/>] foo [link <http://example.com/>]");\n
\n
  MT("linkEmail",\n
     "[link <user@example.com>] foo");\n
\n
  MT("linkEmailDouble",\n
     "[link <user@example.com>] foo [link <user@example.com>]");\n
\n
  MT("emAsterisk",\n
     "[em *foo*] bar");\n
\n
  MT("emUnderscore",\n
     "[em _foo_] bar");\n
\n
  MT("emInWordAsterisk",\n
     "foo[em *bar*]hello");\n
\n
  MT("emInWordUnderscore",\n
     "foo[em _bar_]hello");\n
\n
  // Per documentation: "...surround an * or _ with spaces, it’ll be\n
  // treated as a literal asterisk or underscore."\n
\n
  MT("emEscapedBySpaceIn",\n
     "foo [em _bar _ hello_] world");\n
\n
  MT("emEscapedBySpaceOut",\n
     "foo _ bar[em _hello_]world");\n
\n
  MT("emEscapedByNewline",\n
     "foo",\n
     "_ bar[em _hello_]world");\n
\n
  // Unclosed emphasis characters\n
  // Instead of simply marking as EM / STRONG, it would be nice to have an\n
  // incomplete flag for EM and STRONG, that is styled slightly different.\n
  MT("emIncompleteAsterisk",\n
     "foo [em *bar]");\n
\n
  MT("emIncompleteUnderscore",\n
     "foo [em _bar]");\n
\n
  MT("strongAsterisk",\n
     "[strong **foo**] bar");\n
\n
  MT("strongUnderscore",\n
     "[strong __foo__] bar");\n
\n
  MT("emStrongAsterisk",\n
     "[em *foo][em&strong **bar*][strong hello**] world");\n
\n
  MT("emStrongUnderscore",\n
     "[em _foo][em&strong __bar_][strong hello__] world");\n
\n
  // "...same character must be used to open and close an emphasis span.""\n
  MT("emStrongMixed",\n
     "[em _foo][em&strong **bar*hello__ world]");\n
\n
  MT("emStrongMixed",\n
     "[em *foo][em&strong __bar_hello** world]");\n
\n
  // These characters should be escaped:\n
  // \\   backslash\n
  // `   backtick\n
  // *   asterisk\n
  // _   underscore\n
  // {}  curly braces\n
  // []  square brackets\n
  // ()  parentheses\n
  // #   hash mark\n
  // +   plus sign\n
  // -   minus sign (hyphen)\n
  // .   dot\n
  // !   exclamation mark\n
\n
  MT("escapeBacktick",\n
     "foo \\\\`bar\\\\`");\n
\n
  MT("doubleEscapeBacktick",\n
     "foo \\\\\\\\[comment `bar\\\\\\\\`]");\n
\n
  MT("escapeAsterisk",\n
     "foo \\\\*bar\\\\*");\n
\n
  MT("doubleEscapeAsterisk",\n
     "foo \\\\\\\\[em *bar\\\\\\\\*]");\n
\n
  MT("escapeUnderscore",\n
     "foo \\\\_bar\\\\_");\n
\n
  MT("doubleEscapeUnderscore",\n
     "foo \\\\\\\\[em _bar\\\\\\\\_]");\n
\n
  MT("escapeHash",\n
     "\\\\# foo");\n
\n
  MT("doubleEscapeHash",\n
     "\\\\\\\\# foo");\n
\n
  MT("escapeNewline",\n
     "\\\\",\n
     "[em *foo*]");\n
\n
  // Class override tests\n
  TokenTypeOverrideTest("overrideHeader1",\n
    "[override-header&override-header-1 # Foo]");\n
\n
  TokenTypeOverrideTest("overrideHeader2",\n
    "[override-header&override-header-2 ## Foo]");\n
\n
  TokenTypeOverrideTest("overrideHeader3",\n
    "[override-header&override-header-3 ### Foo]");\n
\n
  TokenTypeOverrideTest("overrideHeader4",\n
    "[override-header&override-header-4 #### Foo]");\n
\n
  TokenTypeOverrideTest("overrideHeader5",\n
    "[override-header&override-header-5 ##### Foo]");\n
\n
  TokenTypeOverrideTest("overrideHeader6",\n
    "[override-header&override-header-6 ###### Foo]");\n
\n
  TokenTypeOverrideTest("overrideCode",\n
    "[override-code `foo`]");\n
\n
  TokenTypeOverrideTest("overrideCodeBlock",\n
    "[override-code ```]",\n
    "[override-code foo]",\n
    "[override-code ```]");\n
\n
  TokenTypeOverrideTest("overrideQuote",\n
    "[override-quote&override-quote-1 > foo]",\n
    "[override-quote&override-quote-1 > bar]");\n
\n
  TokenTypeOverrideTest("overrideQuoteNested",\n
    "[override-quote&override-quote-1 > foo]",\n
    "[override-quote&override-quote-1 >][override-quote&override-quote-2 > bar]",\n
    "[override-quote&override-quote-1 >][override-quote&override-quote-2 >][override-quote&override-quote-3 > baz]");\n
\n
  TokenTypeOverrideTest("overrideLists",\n
    "[override-list1 - foo]",\n
    "",\n
    "    [override-list2 + bar]",\n
    "",\n
    "        [override-list3 * baz]",\n
    "",\n
    "            [override-list1 1. qux]",\n
    "",\n
    "                [override-list2 - quux]");\n
\n
  TokenTypeOverrideTest("overrideHr",\n
    "[override-hr * * *]");\n
\n
  TokenTypeOverrideTest("overrideImage",\n
    "[override-image ![[foo]]][override-link-href&url (http://example.com/)]")\n
\n
  TokenTypeOverrideTest("overrideLinkText",\n
    "[override-link-text [[foo]]][override-link-href&url (http://example.com)]");\n
\n
  TokenTypeOverrideTest("overrideLinkEmailAndInline",\n
    "[override-link-email <][override-link-inline foo@example.com>]");\n
\n
  TokenTypeOverrideTest("overrideEm",\n
    "[override-em *foo*]");\n
\n
  TokenTypeOverrideTest("overrideStrong",\n
    "[override-strong **foo**]");\n
\n
  TokenTypeOverrideTest("overrideStrikethrough",\n
    "[override-strikethrough ~~foo~~]");\n
\n
  FormatTokenTypeOverrideTest("overrideFormatting",\n
    "[override-formatting-escape \\\\*]");\n
\n
  // Tests to make sure GFM-specific things aren\'t getting through\n
\n
  MT("taskList",\n
     "[variable-2 * [ ]] bar]");\n
\n
  MT("noFencedCodeBlocks",\n
     "~~~",\n
     "foo",\n
     "~~~");\n
\n
  FencedTest("fencedCodeBlocks",\n
     "[comment ```]",\n
     "[comment foo]",\n
     "[comment ```]",\n
     "bar");\n
\n
  FencedTest("fencedCodeBlocksMultipleChars",\n
     "[comment `````]",\n
     "[comment foo]",\n
     "[comment ```]",\n
     "[comment foo]",\n
     "[comment `````]",\n
     "bar");\n
\n
  FencedTest("fencedCodeBlocksTildes",\n
     "[comment ~~~]",\n
     "[comment foo]",\n
     "[comment ~~~]",\n
     "bar");\n
\n
  FencedTest("fencedCodeBlocksTildesMultipleChars",\n
     "[comment ~~~~~]",\n
     "[comment ~~~]",\n
     "[comment foo]",\n
     "[comment ~~~~~]",\n
     "bar");\n
\n
  FencedTest("fencedCodeBlocksMultipleChars",\n
     "[comment `````]",\n
     "[comment foo]",\n
     "[comment ```]",\n
     "[comment foo]",\n
     "[comment `````]",\n
     "bar");\n
\n
  FencedTest("fencedCodeBlocksMixed",\n
     "[comment ~~~]",\n
     "[comment ```]",\n
     "[comment foo]",\n
     "[comment ~~~]",\n
     "bar");\n
\n
  // Tests that require XML mode\n
\n
  MT("xmlMode",\n
     "[tag&bracket <][tag div][tag&bracket >]",\n
     "*foo*",\n
     "[tag&bracket <][tag http://github.com][tag&bracket />]",\n
     "[tag&bracket </][tag div][tag&bracket >]",\n
     "[link <http://github.com/>]");\n
\n
  MT("xmlModeWithMarkdownInside",\n
     "[tag&bracket <][tag div] [attribute markdown]=[string 1][tag&bracket >]",\n
     "[em *foo*]",\n
     "[link <http://github.com/>]",\n
     "[tag </div>]",\n
     "[link <http://github.com/>]",\n
     "[tag&bracket <][tag div][tag&bracket >]",\n
     "[tag&bracket </][tag div][tag&bracket >]");\n
\n
})();\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>27934</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
