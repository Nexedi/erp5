<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604388.33</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>vhdl.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
// Originally written by Alf Nielsen, re-written by Michael Zhou\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
"use strict";\n
\n
function words(str) {\n
  var obj = {}, words = str.split(",");\n
  for (var i = 0; i < words.length; ++i) {\n
    var allCaps = words[i].toUpperCase();\n
    var firstCap = words[i].charAt(0).toUpperCase() + words[i].slice(1);\n
    obj[words[i]] = true;\n
    obj[allCaps] = true;\n
    obj[firstCap] = true;\n
  }\n
  return obj;\n
}\n
\n
function metaHook(stream) {\n
  stream.eatWhile(/[\\w\\$_]/);\n
  return "meta";\n
}\n
\n
CodeMirror.defineMode("vhdl", function(config, parserConfig) {\n
  var indentUnit = config.indentUnit,\n
      atoms = parserConfig.atoms || words("null"),\n
      hooks = parserConfig.hooks || {"`": metaHook, "$": metaHook},\n
      multiLineStrings = parserConfig.multiLineStrings;\n
\n
  var keywords = words("abs,access,after,alias,all,and,architecture,array,assert,attribute,begin,block," +\n
      "body,buffer,bus,case,component,configuration,constant,disconnent,downto,else,elsif,end,end block,end case," +\n
      "end component,end for,end generate,end if,end loop,end process,end record,end units,entity,exit,file,for," +\n
      "function,generate,generic,generic map,group,guarded,if,impure,in,inertial,inout,is,label,library,linkage," +\n
      "literal,loop,map,mod,nand,new,next,nor,null,of,on,open,or,others,out,package,package body,port,port map," +\n
      "postponed,procedure,process,pure,range,record,register,reject,rem,report,return,rol,ror,select,severity,signal," +\n
      "sla,sll,sra,srl,subtype,then,to,transport,type,unaffected,units,until,use,variable,wait,when,while,with,xnor,xor");\n
\n
  var blockKeywords = words("architecture,entity,begin,case,port,else,elsif,end,for,function,if");\n
\n
  var isOperatorChar = /[&|~><!\\)\\(*#%@+\\/=?\\:;}{,\\.\\^\\-\\[\\]]/;\n
  var curPunc;\n
\n
  function tokenBase(stream, state) {\n
    var ch = stream.next();\n
    if (hooks[ch]) {\n
      var result = hooks[ch](stream, state);\n
      if (result !== false) return result;\n
    }\n
    if (ch == \'"\') {\n
      state.tokenize = tokenString2(ch);\n
      return state.tokenize(stream, state);\n
    }\n
    if (ch == "\'") {\n
      state.tokenize = tokenString(ch);\n
      return state.tokenize(stream, state);\n
    }\n
    if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n
      curPunc = ch;\n
      return null;\n
    }\n
    if (/[\\d\']/.test(ch)) {\n
      stream.eatWhile(/[\\w\\.\']/);\n
      return "number";\n
    }\n
    if (ch == "-") {\n
      if (stream.eat("-")) {\n
        stream.skipToEnd();\n
        return "comment";\n
      }\n
    }\n
    if (isOperatorChar.test(ch)) {\n
      stream.eatWhile(isOperatorChar);\n
      return "operator";\n
    }\n
    stream.eatWhile(/[\\w\\$_]/);\n
    var cur = stream.current();\n
    if (keywords.propertyIsEnumerable(cur.toLowerCase())) {\n
      if (blockKeywords.propertyIsEnumerable(cur)) curPunc = "newstatement";\n
      return "keyword";\n
    }\n
    if (atoms.propertyIsEnumerable(cur)) return "atom";\n
    return "variable";\n
  }\n
\n
  function tokenString(quote) {\n
    return function(stream, state) {\n
      var escaped = false, next, end = false;\n
      while ((next = stream.next()) != null) {\n
        if (next == quote && !escaped) {end = true; break;}\n
        escaped = !escaped && next == "--";\n
      }\n
      if (end || !(escaped || multiLineStrings))\n
        state.tokenize = tokenBase;\n
      return "string";\n
    };\n
  }\n
  function tokenString2(quote) {\n
    return function(stream, state) {\n
      var escaped = false, next, end = false;\n
      while ((next = stream.next()) != null) {\n
        if (next == quote && !escaped) {end = true; break;}\n
        escaped = !escaped && next == "--";\n
      }\n
      if (end || !(escaped || multiLineStrings))\n
        state.tokenize = tokenBase;\n
      return "string-2";\n
    };\n
  }\n
\n
  function Context(indented, column, type, align, prev) {\n
    this.indented = indented;\n
    this.column = column;\n
    this.type = type;\n
    this.align = align;\n
    this.prev = prev;\n
  }\n
  function pushContext(state, col, type) {\n
    return state.context = new Context(state.indented, col, type, null, state.context);\n
  }\n
  function popContext(state) {\n
    var t = state.context.type;\n
    if (t == ")" || t == "]" || t == "}")\n
      state.indented = state.context.indented;\n
    return state.context = state.context.prev;\n
  }\n
\n
  // Interface\n
  return {\n
    startState: function(basecolumn) {\n
      return {\n
        tokenize: null,\n
        context: new Context((basecolumn || 0) - indentUnit, 0, "top", false),\n
        indented: 0,\n
        startOfLine: true\n
      };\n
    },\n
\n
    token: function(stream, state) {\n
      var ctx = state.context;\n
      if (stream.sol()) {\n
        if (ctx.align == null) ctx.align = false;\n
        state.indented = stream.indentation();\n
        state.startOfLine = true;\n
      }\n
      if (stream.eatSpace()) return null;\n
      curPunc = null;\n
      var style = (state.tokenize || tokenBase)(stream, state);\n
      if (style == "comment" || style == "meta") return style;\n
      if (ctx.align == null) ctx.align = true;\n
\n
      if ((curPunc == ";" || curPunc == ":") && ctx.type == "statement") popContext(state);\n
      else if (curPunc == "{") pushContext(state, stream.column(), "}");\n
      else if (curPunc == "[") pushContext(state, stream.column(), "]");\n
      else if (curPunc == "(") pushContext(state, stream.column(), ")");\n
      else if (curPunc == "}") {\n
        while (ctx.type == "statement") ctx = popContext(state);\n
        if (ctx.type == "}") ctx = popContext(state);\n
        while (ctx.type == "statement") ctx = popContext(state);\n
      }\n
      else if (curPunc == ctx.type) popContext(state);\n
      else if (ctx.type == "}" || ctx.type == "top" || (ctx.type == "statement" && curPunc == "newstatement"))\n
        pushContext(state, stream.column(), "statement");\n
      state.startOfLine = false;\n
      return style;\n
    },\n
\n
    indent: function(state, textAfter) {\n
      if (state.tokenize != tokenBase && state.tokenize != null) return 0;\n
      var firstChar = textAfter && textAfter.charAt(0), ctx = state.context, closing = firstChar == ctx.type;\n
      if (ctx.type == "statement") return ctx.indented + (firstChar == "{" ? 0 : indentUnit);\n
      else if (ctx.align) return ctx.column + (closing ? 0 : 1);\n
      else return ctx.indented + (closing ? 0 : indentUnit);\n
    },\n
\n
    electricChars: "{}"\n
  };\n
});\n
\n
CodeMirror.defineMIME("text/x-vhdl", "vhdl");\n
\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>6704</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
