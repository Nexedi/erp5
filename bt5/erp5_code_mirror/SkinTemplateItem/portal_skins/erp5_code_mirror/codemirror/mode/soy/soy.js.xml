<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604385.67</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>soy.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"), require("../htmlmixed/htmlmixed"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror", "../htmlmixed/htmlmixed"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
  "use strict";\n
\n
  var indentingTags = ["template", "literal", "msg", "fallbackmsg", "let", "if", "elseif",\n
                       "else", "switch", "case", "default", "foreach", "ifempty", "for",\n
                       "call", "param", "deltemplate", "delcall", "log"];\n
\n
  CodeMirror.defineMode("soy", function(config) {\n
    var textMode = CodeMirror.getMode(config, "text/plain");\n
    var modes = {\n
      html: CodeMirror.getMode(config, {name: "text/html", multilineTagIndentFactor: 2, multilineTagIndentPastTag: false}),\n
      attributes: textMode,\n
      text: textMode,\n
      uri: textMode,\n
      css: CodeMirror.getMode(config, "text/css"),\n
      js: CodeMirror.getMode(config, {name: "text/javascript", statementIndent: 2 * config.indentUnit})\n
    };\n
\n
    function last(array) {\n
      return array[array.length - 1];\n
    }\n
\n
    function tokenUntil(stream, state, untilRegExp) {\n
      var oldString = stream.string;\n
      var match = untilRegExp.exec(oldString.substr(stream.pos));\n
      if (match) {\n
        // We don\'t use backUp because it backs up just the position, not the state.\n
        // This uses an undocumented API.\n
        stream.string = oldString.substr(0, stream.pos + match.index);\n
      }\n
      var result = stream.hideFirstChars(state.indent, function() {\n
        return state.localMode.token(stream, state.localState);\n
      });\n
      stream.string = oldString;\n
      return result;\n
    }\n
\n
    return {\n
      startState: function() {\n
        return {\n
          kind: [],\n
          kindTag: [],\n
          soyState: [],\n
          indent: 0,\n
          localMode: modes.html,\n
          localState: CodeMirror.startState(modes.html)\n
        };\n
      },\n
\n
      copyState: function(state) {\n
        return {\n
          tag: state.tag, // Last seen Soy tag.\n
          kind: state.kind.concat([]), // Values of kind="" attributes.\n
          kindTag: state.kindTag.concat([]), // Opened tags with kind="" attributes.\n
          soyState: state.soyState.concat([]),\n
          indent: state.indent, // Indentation of the following line.\n
          localMode: state.localMode,\n
          localState: CodeMirror.copyState(state.localMode, state.localState)\n
        };\n
      },\n
\n
      token: function(stream, state) {\n
        var match;\n
\n
        switch (last(state.soyState)) {\n
          case "comment":\n
            if (stream.match(/^.*?\\*\\//)) {\n
              state.soyState.pop();\n
            } else {\n
              stream.skipToEnd();\n
            }\n
            return "comment";\n
\n
          case "variable":\n
            if (stream.match(/^}/)) {\n
              state.indent -= 2 * config.indentUnit;\n
              state.soyState.pop();\n
              return "variable-2";\n
            }\n
            stream.next();\n
            return null;\n
\n
          case "tag":\n
            if (stream.match(/^\\/?}/)) {\n
              if (state.tag == "/template" || state.tag == "/deltemplate") state.indent = 0;\n
              else state.indent -= (stream.current() == "/}" || indentingTags.indexOf(state.tag) == -1 ? 2 : 1) * config.indentUnit;\n
              state.soyState.pop();\n
              return "keyword";\n
            } else if (stream.match(/^([\\w?]+)(?==)/)) {\n
              if (stream.current() == "kind" && (match = stream.match(/^="([^"]+)/, false))) {\n
                var kind = match[1];\n
                state.kind.push(kind);\n
                state.kindTag.push(state.tag);\n
                state.localMode = modes[kind] || modes.html;\n
                state.localState = CodeMirror.startState(state.localMode);\n
              }\n
              return "attribute";\n
            } else if (stream.match(/^"/)) {\n
              state.soyState.push("string");\n
              return "string";\n
            }\n
            stream.next();\n
            return null;\n
\n
          case "literal":\n
            if (stream.match(/^(?=\\{\\/literal})/)) {\n
              state.indent -= config.indentUnit;\n
              state.soyState.pop();\n
              return this.token(stream, state);\n
            }\n
            return tokenUntil(stream, state, /\\{\\/literal}/);\n
\n
          case "string":\n
            if (stream.match(/^.*?"/)) {\n
              state.soyState.pop();\n
            } else {\n
              stream.skipToEnd();\n
            }\n
            return "string";\n
        }\n
\n
        if (stream.match(/^\\/\\*/)) {\n
          state.soyState.push("comment");\n
          return "comment";\n
        } else if (stream.match(stream.sol() ? /^\\s*\\/\\/.*/ : /^\\s+\\/\\/.*/)) {\n
          return "comment";\n
        } else if (stream.match(/^\\{\\$[\\w?]*/)) {\n
          state.indent += 2 * config.indentUnit;\n
          state.soyState.push("variable");\n
          return "variable-2";\n
        } else if (stream.match(/^\\{literal}/)) {\n
          state.indent += config.indentUnit;\n
          state.soyState.push("literal");\n
          return "keyword";\n
        } else if (match = stream.match(/^\\{([\\/@\\\\]?[\\w?]*)/)) {\n
          if (match[1] != "/switch")\n
            state.indent += (/^(\\/|(else|elseif|case|default)$)/.test(match[1]) && state.tag != "switch" ? 1 : 2) * config.indentUnit;\n
          state.tag = match[1];\n
          if (state.tag == "/" + last(state.kindTag)) {\n
            // We found the tag that opened the current kind="".\n
            state.kind.pop();\n
            state.kindTag.pop();\n
            state.localMode = modes[last(state.kind)] || modes.html;\n
            state.localState = CodeMirror.startState(state.localMode);\n
          }\n
          state.soyState.push("tag");\n
          return "keyword";\n
        }\n
\n
        return tokenUntil(stream, state, /\\{|\\s+\\/\\/|\\/\\*/);\n
      },\n
\n
      indent: function(state, textAfter) {\n
        var indent = state.indent, top = last(state.soyState);\n
        if (top == "comment") return CodeMirror.Pass;\n
\n
        if (top == "literal") {\n
          if (/^\\{\\/literal}/.test(textAfter)) indent -= config.indentUnit;\n
        } else {\n
          if (/^\\s*\\{\\/(template|deltemplate)\\b/.test(textAfter)) return 0;\n
          if (/^\\{(\\/|(fallbackmsg|elseif|else|ifempty)\\b)/.test(textAfter)) indent -= config.indentUnit;\n
          if (state.tag != "switch" && /^\\{(case|default)\\b/.test(textAfter)) indent -= config.indentUnit;\n
          if (/^\\{\\/switch\\b/.test(textAfter)) indent -= config.indentUnit;\n
        }\n
        if (indent && state.localMode.indent)\n
          indent += state.localMode.indent(state.localState, textAfter);\n
        return indent;\n
      },\n
\n
      innerMode: function(state) {\n
        if (state.soyState.length && last(state.soyState) != "literal") return null;\n
        else return {state: state.localState, mode: state.localMode};\n
      },\n
\n
      electricInput: /^\\s*\\{(\\/|\\/template|\\/deltemplate|\\/switch|fallbackmsg|elseif|else|case|default|ifempty|\\/literal\\})$/,\n
      lineComment: "//",\n
      blockCommentStart: "/*",\n
      blockCommentEnd: "*/",\n
      blockCommentContinue: " * ",\n
      fold: "indent"\n
    };\n
  }, "htmlmixed");\n
\n
  CodeMirror.registerHelper("hintWords", "soy", indentingTags.concat(\n
      ["delpackage", "namespace", "alias", "print", "css", "debugger"]));\n
\n
  CodeMirror.defineMIME("text/x-soy", "soy");\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>7564</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
