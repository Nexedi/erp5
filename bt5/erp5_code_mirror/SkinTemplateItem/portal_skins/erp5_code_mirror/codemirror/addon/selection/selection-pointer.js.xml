<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604375.12</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>selection-pointer.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
  "use strict";\n
\n
  CodeMirror.defineOption("selectionPointer", false, function(cm, val) {\n
    var data = cm.state.selectionPointer;\n
    if (data) {\n
      CodeMirror.off(cm.getWrapperElement(), "mousemove", data.mousemove);\n
      CodeMirror.off(cm.getWrapperElement(), "mouseout", data.mouseout);\n
      CodeMirror.off(window, "scroll", data.windowScroll);\n
      cm.off("cursorActivity", reset);\n
      cm.off("scroll", reset);\n
      cm.state.selectionPointer = null;\n
      cm.display.lineDiv.style.cursor = "";\n
    }\n
    if (val) {\n
      data = cm.state.selectionPointer = {\n
        value: typeof val == "string" ? val : "default",\n
        mousemove: function(event) { mousemove(cm, event); },\n
        mouseout: function(event) { mouseout(cm, event); },\n
        windowScroll: function() { reset(cm); },\n
        rects: null,\n
        mouseX: null, mouseY: null,\n
        willUpdate: false\n
      };\n
      CodeMirror.on(cm.getWrapperElement(), "mousemove", data.mousemove);\n
      CodeMirror.on(cm.getWrapperElement(), "mouseout", data.mouseout);\n
      CodeMirror.on(window, "scroll", data.windowScroll);\n
      cm.on("cursorActivity", reset);\n
      cm.on("scroll", reset);\n
    }\n
  });\n
\n
  function mousemove(cm, event) {\n
    var data = cm.state.selectionPointer;\n
    if (event.buttons == null ? event.which : event.buttons) {\n
      data.mouseX = data.mouseY = null;\n
    } else {\n
      data.mouseX = event.clientX;\n
      data.mouseY = event.clientY;\n
    }\n
    scheduleUpdate(cm);\n
  }\n
\n
  function mouseout(cm, event) {\n
    if (!cm.getWrapperElement().contains(event.relatedTarget)) {\n
      var data = cm.state.selectionPointer;\n
      data.mouseX = data.mouseY = null;\n
      scheduleUpdate(cm);\n
    }\n
  }\n
\n
  function reset(cm) {\n
    cm.state.selectionPointer.rects = null;\n
    scheduleUpdate(cm);\n
  }\n
\n
  function scheduleUpdate(cm) {\n
    if (!cm.state.selectionPointer.willUpdate) {\n
      cm.state.selectionPointer.willUpdate = true;\n
      setTimeout(function() {\n
        update(cm);\n
        cm.state.selectionPointer.willUpdate = false;\n
      }, 50);\n
    }\n
  }\n
\n
  function update(cm) {\n
    var data = cm.state.selectionPointer;\n
    if (!data) return;\n
    if (data.rects == null && data.mouseX != null) {\n
      data.rects = [];\n
      if (cm.somethingSelected()) {\n
        for (var sel = cm.display.selectionDiv.firstChild; sel; sel = sel.nextSibling)\n
          data.rects.push(sel.getBoundingClientRect());\n
      }\n
    }\n
    var inside = false;\n
    if (data.mouseX != null) for (var i = 0; i < data.rects.length; i++) {\n
      var rect = data.rects[i];\n
      if (rect.left <= data.mouseX && rect.right >= data.mouseX &&\n
          rect.top <= data.mouseY && rect.bottom >= data.mouseY)\n
        inside = true;\n
    }\n
    var cursor = inside ? data.value : "";\n
    if (cm.display.lineDiv.style.cursor != cursor)\n
      cm.display.lineDiv.style.cursor = cursor;\n
  }\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>3292</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
