<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604375.0</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>active-line.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
// Because sometimes you need to style the cursor\'s line.\n
//\n
// Adds an option \'styleActiveLine\' which, when enabled, gives the\n
// active line\'s wrapping <div> the CSS class "CodeMirror-activeline",\n
// and gives its background <div> the class "CodeMirror-activeline-background".\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
  "use strict";\n
  var WRAP_CLASS = "CodeMirror-activeline";\n
  var BACK_CLASS = "CodeMirror-activeline-background";\n
  var GUTT_CLASS = "CodeMirror-activeline-gutter";\n
\n
  CodeMirror.defineOption("styleActiveLine", false, function(cm, val, old) {\n
    var prev = old && old != CodeMirror.Init;\n
    if (val && !prev) {\n
      cm.state.activeLines = [];\n
      updateActiveLines(cm, cm.listSelections());\n
      cm.on("beforeSelectionChange", selectionChange);\n
    } else if (!val && prev) {\n
      cm.off("beforeSelectionChange", selectionChange);\n
      clearActiveLines(cm);\n
      delete cm.state.activeLines;\n
    }\n
  });\n
\n
  function clearActiveLines(cm) {\n
    for (var i = 0; i < cm.state.activeLines.length; i++) {\n
      cm.removeLineClass(cm.state.activeLines[i], "wrap", WRAP_CLASS);\n
      cm.removeLineClass(cm.state.activeLines[i], "background", BACK_CLASS);\n
      cm.removeLineClass(cm.state.activeLines[i], "gutter", GUTT_CLASS);\n
    }\n
  }\n
\n
  function sameArray(a, b) {\n
    if (a.length != b.length) return false;\n
    for (var i = 0; i < a.length; i++)\n
      if (a[i] != b[i]) return false;\n
    return true;\n
  }\n
\n
  function updateActiveLines(cm, ranges) {\n
    var active = [];\n
    for (var i = 0; i < ranges.length; i++) {\n
      var range = ranges[i];\n
      if (!range.empty()) continue;\n
      var line = cm.getLineHandleVisualStart(range.head.line);\n
      if (active[active.length - 1] != line) active.push(line);\n
    }\n
    if (sameArray(cm.state.activeLines, active)) return;\n
    cm.operation(function() {\n
      clearActiveLines(cm);\n
      for (var i = 0; i < active.length; i++) {\n
        cm.addLineClass(active[i], "wrap", WRAP_CLASS);\n
        cm.addLineClass(active[i], "background", BACK_CLASS);\n
        cm.addLineClass(active[i], "gutter", GUTT_CLASS);\n
      }\n
      cm.state.activeLines = active;\n
    });\n
  }\n
\n
  function selectionChange(cm, sel) {\n
    updateActiveLines(cm, sel.ranges);\n
  }\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>2624</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
