<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604374.24</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>simple.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
  "use strict";\n
\n
  CodeMirror.defineSimpleMode = function(name, states) {\n
    CodeMirror.defineMode(name, function(config) {\n
      return CodeMirror.simpleMode(config, states);\n
    });\n
  };\n
\n
  CodeMirror.simpleMode = function(config, states) {\n
    ensureState(states, "start");\n
    var states_ = {}, meta = states.meta || {}, hasIndentation = false;\n
    for (var state in states) if (state != meta && states.hasOwnProperty(state)) {\n
      var list = states_[state] = [], orig = states[state];\n
      for (var i = 0; i < orig.length; i++) {\n
        var data = orig[i];\n
        list.push(new Rule(data, states));\n
        if (data.indent || data.dedent) hasIndentation = true;\n
      }\n
    }\n
    var mode = {\n
      startState: function() {\n
        return {state: "start", pending: null,\n
                local: null, localState: null,\n
                indent: hasIndentation ? [] : null};\n
      },\n
      copyState: function(state) {\n
        var s = {state: state.state, pending: state.pending,\n
                 local: state.local, localState: null,\n
                 indent: state.indent && state.indent.slice(0)};\n
        if (state.localState)\n
          s.localState = CodeMirror.copyState(state.local.mode, state.localState);\n
        if (state.stack)\n
          s.stack = state.stack.slice(0);\n
        for (var pers = state.persistentStates; pers; pers = pers.next)\n
          s.persistentStates = {mode: pers.mode,\n
                                spec: pers.spec,\n
                                state: pers.state == state.localState ? s.localState : CodeMirror.copyState(pers.mode, pers.state),\n
                                next: s.persistentStates};\n
        return s;\n
      },\n
      token: tokenFunction(states_, config),\n
      innerMode: function(state) { return state.local && {mode: state.local.mode, state: state.localState}; },\n
      indent: indentFunction(states_, meta)\n
    };\n
    if (meta) for (var prop in meta) if (meta.hasOwnProperty(prop))\n
      mode[prop] = meta[prop];\n
    return mode;\n
  };\n
\n
  function ensureState(states, name) {\n
    if (!states.hasOwnProperty(name))\n
      throw new Error("Undefined state " + name + " in simple mode");\n
  }\n
\n
  function toRegex(val, caret) {\n
    if (!val) return /(?:)/;\n
    var flags = "";\n
    if (val instanceof RegExp) {\n
      if (val.ignoreCase) flags = "i";\n
      val = val.source;\n
    } else {\n
      val = String(val);\n
    }\n
    return new RegExp((caret === false ? "" : "^") + "(?:" + val + ")", flags);\n
  }\n
\n
  function asToken(val) {\n
    if (!val) return null;\n
    if (typeof val == "string") return val.replace(/\\./g, " ");\n
    var result = [];\n
    for (var i = 0; i < val.length; i++)\n
      result.push(val[i] && val[i].replace(/\\./g, " "));\n
    return result;\n
  }\n
\n
  function Rule(data, states) {\n
    if (data.next || data.push) ensureState(states, data.next || data.push);\n
    this.regex = toRegex(data.regex);\n
    this.token = asToken(data.token);\n
    this.data = data;\n
  }\n
\n
  function tokenFunction(states, config) {\n
    return function(stream, state) {\n
      if (state.pending) {\n
        var pend = state.pending.shift();\n
        if (state.pending.length == 0) state.pending = null;\n
        stream.pos += pend.text.length;\n
        return pend.token;\n
      }\n
\n
      if (state.local) {\n
        if (state.local.end && stream.match(state.local.end)) {\n
          var tok = state.local.endToken || null;\n
          state.local = state.localState = null;\n
          return tok;\n
        } else {\n
          var tok = state.local.mode.token(stream, state.localState), m;\n
          if (state.local.endScan && (m = state.local.endScan.exec(stream.current())))\n
            stream.pos = stream.start + m.index;\n
          return tok;\n
        }\n
      }\n
\n
      var curState = states[state.state];\n
      for (var i = 0; i < curState.length; i++) {\n
        var rule = curState[i];\n
        var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);\n
        if (matches) {\n
          if (rule.data.next) {\n
            state.state = rule.data.next;\n
          } else if (rule.data.push) {\n
            (state.stack || (state.stack = [])).push(state.state);\n
            state.state = rule.data.push;\n
          } else if (rule.data.pop && state.stack && state.stack.length) {\n
            state.state = state.stack.pop();\n
          }\n
\n
          if (rule.data.mode)\n
            enterLocalMode(config, state, rule.data.mode, rule.token);\n
          if (rule.data.indent)\n
            state.indent.push(stream.indentation() + config.indentUnit);\n
          if (rule.data.dedent)\n
            state.indent.pop();\n
          if (matches.length > 2) {\n
            state.pending = [];\n
            for (var j = 2; j < matches.length; j++)\n
              if (matches[j])\n
                state.pending.push({text: matches[j], token: rule.token[j - 1]});\n
            stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));\n
            return rule.token[0];\n
          } else if (rule.token && rule.token.join) {\n
            return rule.token[0];\n
          } else {\n
            return rule.token;\n
          }\n
        }\n
      }\n
      stream.next();\n
      return null;\n
    };\n
  }\n
\n
  function cmp(a, b) {\n
    if (a === b) return true;\n
    if (!a || typeof a != "object" || !b || typeof b != "object") return false;\n
    var props = 0;\n
    for (var prop in a) if (a.hasOwnProperty(prop)) {\n
      if (!b.hasOwnProperty(prop) || !cmp(a[prop], b[prop])) return false;\n
      props++;\n
    }\n
    for (var prop in b) if (b.hasOwnProperty(prop)) props--;\n
    return props == 0;\n
  }\n
\n
  function enterLocalMode(config, state, spec, token) {\n
    var pers;\n
    if (spec.persistent) for (var p = state.persistentStates; p && !pers; p = p.next)\n
      if (spec.spec ? cmp(spec.spec, p.spec) : spec.mode == p.mode) pers = p;\n
    var mode = pers ? pers.mode : spec.mode || CodeMirror.getMode(config, spec.spec);\n
    var lState = pers ? pers.state : CodeMirror.startState(mode);\n
    if (spec.persistent && !pers)\n
      state.persistentStates = {mode: mode, spec: spec.spec, state: lState, next: state.persistentStates};\n
\n
    state.localState = lState;\n
    state.local = {mode: mode,\n
                   end: spec.end && toRegex(spec.end),\n
                   endScan: spec.end && spec.forceEnd !== false && toRegex(spec.end, false),\n
                   endToken: token && token.join ? token[token.length - 1] : token};\n
  }\n
\n
  function indexOf(val, arr) {\n
    for (var i = 0; i < arr.length; i++) if (arr[i] === val) return true;\n
  }\n
\n
  function indentFunction(states, meta) {\n
    return function(state, textAfter, line) {\n
      if (state.local && state.local.mode.indent)\n
        return state.local.mode.indent(state.localState, textAfter, line);\n
      if (state.indent == null || state.local || meta.dontIndentStates && indexOf(state.state, meta.dontIndentStates) > -1)\n
        return CodeMirror.Pass;\n
\n
      var pos = state.indent.length - 1, rules = states[state.state];\n
      scan: for (;;) {\n
        for (var i = 0; i < rules.length; i++) {\n
          var rule = rules[i];\n
          if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {\n
            var m = rule.regex.exec(textAfter);\n
            if (m && m[0]) {\n
              pos--;\n
              if (rule.next || rule.push) rules = states[rule.next || rule.push];\n
              textAfter = textAfter.slice(m[0].length);\n
              continue scan;\n
            }\n
          }\n
        }\n
        break;\n
      }\n
      return pos < 0 ? 0 : state.indent[pos];\n
    };\n
  }\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>7899</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
