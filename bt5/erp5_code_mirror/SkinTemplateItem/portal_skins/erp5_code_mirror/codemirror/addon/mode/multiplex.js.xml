<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604374.15</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>multiplex.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
"use strict";\n
\n
CodeMirror.multiplexingMode = function(outer /*, others */) {\n
  // Others should be {open, close, mode [, delimStyle] [, innerStyle]} objects\n
  var others = Array.prototype.slice.call(arguments, 1);\n
\n
  function indexOf(string, pattern, from, returnEnd) {\n
    if (typeof pattern == "string") {\n
      var found = string.indexOf(pattern, from);\n
      return returnEnd && found > -1 ? found + pattern.length : found;\n
    }\n
    var m = pattern.exec(from ? string.slice(from) : string);\n
    return m ? m.index + from + (returnEnd ? m[0].length : 0) : -1;\n
  }\n
\n
  return {\n
    startState: function() {\n
      return {\n
        outer: CodeMirror.startState(outer),\n
        innerActive: null,\n
        inner: null\n
      };\n
    },\n
\n
    copyState: function(state) {\n
      return {\n
        outer: CodeMirror.copyState(outer, state.outer),\n
        innerActive: state.innerActive,\n
        inner: state.innerActive && CodeMirror.copyState(state.innerActive.mode, state.inner)\n
      };\n
    },\n
\n
    token: function(stream, state) {\n
      if (!state.innerActive) {\n
        var cutOff = Infinity, oldContent = stream.string;\n
        for (var i = 0; i < others.length; ++i) {\n
          var other = others[i];\n
          var found = indexOf(oldContent, other.open, stream.pos);\n
          if (found == stream.pos) {\n
            if (!other.parseDelimiters) stream.match(other.open);\n
            state.innerActive = other;\n
            state.inner = CodeMirror.startState(other.mode, outer.indent ? outer.indent(state.outer, "") : 0);\n
            return other.delimStyle && (other.delimStyle + " " + other.delimStyle + "-open");\n
          } else if (found != -1 && found < cutOff) {\n
            cutOff = found;\n
          }\n
        }\n
        if (cutOff != Infinity) stream.string = oldContent.slice(0, cutOff);\n
        var outerToken = outer.token(stream, state.outer);\n
        if (cutOff != Infinity) stream.string = oldContent;\n
        return outerToken;\n
      } else {\n
        var curInner = state.innerActive, oldContent = stream.string;\n
        if (!curInner.close && stream.sol()) {\n
          state.innerActive = state.inner = null;\n
          return this.token(stream, state);\n
        }\n
        var found = curInner.close ? indexOf(oldContent, curInner.close, stream.pos, curInner.parseDelimiters) : -1;\n
        if (found == stream.pos && !curInner.parseDelimiters) {\n
          stream.match(curInner.close);\n
          state.innerActive = state.inner = null;\n
          return curInner.delimStyle && (curInner.delimStyle + " " + curInner.delimStyle + "-close");\n
        }\n
        if (found > -1) stream.string = oldContent.slice(0, found);\n
        var innerToken = curInner.mode.token(stream, state.inner);\n
        if (found > -1) stream.string = oldContent;\n
\n
        if (found == stream.pos && curInner.parseDelimiters)\n
          state.innerActive = state.inner = null;\n
\n
        if (curInner.innerStyle) {\n
          if (innerToken) innerToken = innerToken + " " + curInner.innerStyle;\n
          else innerToken = curInner.innerStyle;\n
        }\n
\n
        return innerToken;\n
      }\n
    },\n
\n
    indent: function(state, textAfter) {\n
      var mode = state.innerActive ? state.innerActive.mode : outer;\n
      if (!mode.indent) return CodeMirror.Pass;\n
      return mode.indent(state.innerActive ? state.inner : state.outer, textAfter);\n
    },\n
\n
    blankLine: function(state) {\n
      var mode = state.innerActive ? state.innerActive.mode : outer;\n
      if (mode.blankLine) {\n
        mode.blankLine(state.innerActive ? state.inner : state.outer);\n
      }\n
      if (!state.innerActive) {\n
        for (var i = 0; i < others.length; ++i) {\n
          var other = others[i];\n
          if (other.open === "\\n") {\n
            state.innerActive = other;\n
            state.inner = CodeMirror.startState(other.mode, mode.indent ? mode.indent(state.outer, "") : 0);\n
          }\n
        }\n
      } else if (state.innerActive.close === "\\n") {\n
        state.innerActive = state.inner = null;\n
      }\n
    },\n
\n
    electricChars: outer.electricChars,\n
\n
    innerMode: function(state) {\n
      return state.inner ? {state: state.inner, mode: state.innerActive.mode} : {state: state.outer, mode: outer};\n
    }\n
  };\n
};\n
\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>4624</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
