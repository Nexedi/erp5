<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604372.17</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>comment.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
  "use strict";\n
\n
  var noOptions = {};\n
  var nonWS = /[^\\s\\u00a0]/;\n
  var Pos = CodeMirror.Pos;\n
\n
  function firstNonWS(str) {\n
    var found = str.search(nonWS);\n
    return found == -1 ? 0 : found;\n
  }\n
\n
  CodeMirror.commands.toggleComment = function(cm) {\n
    cm.toggleComment();\n
  };\n
\n
  CodeMirror.defineExtension("toggleComment", function(options) {\n
    if (!options) options = noOptions;\n
    var cm = this;\n
    var minLine = Infinity, ranges = this.listSelections(), mode = null;\n
    for (var i = ranges.length - 1; i >= 0; i--) {\n
      var from = ranges[i].from(), to = ranges[i].to();\n
      if (from.line >= minLine) continue;\n
      if (to.line >= minLine) to = Pos(minLine, 0);\n
      minLine = from.line;\n
      if (mode == null) {\n
        if (cm.uncomment(from, to, options)) mode = "un";\n
        else { cm.lineComment(from, to, options); mode = "line"; }\n
      } else if (mode == "un") {\n
        cm.uncomment(from, to, options);\n
      } else {\n
        cm.lineComment(from, to, options);\n
      }\n
    }\n
  });\n
\n
  CodeMirror.defineExtension("lineComment", function(from, to, options) {\n
    if (!options) options = noOptions;\n
    var self = this, mode = self.getModeAt(from);\n
    var commentString = options.lineComment || mode.lineComment;\n
    if (!commentString) {\n
      if (options.blockCommentStart || mode.blockCommentStart) {\n
        options.fullLines = true;\n
        self.blockComment(from, to, options);\n
      }\n
      return;\n
    }\n
    var firstLine = self.getLine(from.line);\n
    if (firstLine == null) return;\n
    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line + 1 : to.line, self.lastLine() + 1);\n
    var pad = options.padding == null ? " " : options.padding;\n
    var blankLines = options.commentBlankLines || from.line == to.line;\n
\n
    self.operation(function() {\n
      if (options.indent) {\n
        var baseString = null;\n
        for (var i = from.line; i < end; ++i) {\n
          var line = self.getLine(i);\n
          var whitespace = line.slice(0, firstNonWS(line));\n
          if (baseString == null || baseString.length > whitespace.length) {\n
            baseString = whitespace;\n
          }\n
        }\n
        for (var i = from.line; i < end; ++i) {\n
          var line = self.getLine(i), cut = baseString.length;\n
          if (!blankLines && !nonWS.test(line)) continue;\n
          if (line.slice(0, cut) != baseString) cut = firstNonWS(line);\n
          self.replaceRange(baseString + commentString + pad, Pos(i, 0), Pos(i, cut));\n
        }\n
      } else {\n
        for (var i = from.line; i < end; ++i) {\n
          if (blankLines || nonWS.test(self.getLine(i)))\n
            self.replaceRange(commentString + pad, Pos(i, 0));\n
        }\n
      }\n
    });\n
  });\n
\n
  CodeMirror.defineExtension("blockComment", function(from, to, options) {\n
    if (!options) options = noOptions;\n
    var self = this, mode = self.getModeAt(from);\n
    var startString = options.blockCommentStart || mode.blockCommentStart;\n
    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n
    if (!startString || !endString) {\n
      if ((options.lineComment || mode.lineComment) && options.fullLines != false)\n
        self.lineComment(from, to, options);\n
      return;\n
    }\n
\n
    var end = Math.min(to.line, self.lastLine());\n
    if (end != from.line && to.ch == 0 && nonWS.test(self.getLine(end))) --end;\n
\n
    var pad = options.padding == null ? " " : options.padding;\n
    if (from.line > end) return;\n
\n
    self.operation(function() {\n
      if (options.fullLines != false) {\n
        var lastLineHasText = nonWS.test(self.getLine(end));\n
        self.replaceRange(pad + endString, Pos(end));\n
        self.replaceRange(startString + pad, Pos(from.line, 0));\n
        var lead = options.blockCommentLead || mode.blockCommentLead;\n
        if (lead != null) for (var i = from.line + 1; i <= end; ++i)\n
          if (i != end || lastLineHasText)\n
            self.replaceRange(lead + pad, Pos(i, 0));\n
      } else {\n
        self.replaceRange(endString, to);\n
        self.replaceRange(startString, from);\n
      }\n
    });\n
  });\n
\n
  CodeMirror.defineExtension("uncomment", function(from, to, options) {\n
    if (!options) options = noOptions;\n
    var self = this, mode = self.getModeAt(from);\n
    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line : to.line - 1, self.lastLine()), start = Math.min(from.line, end);\n
\n
    // Try finding line comments\n
    var lineString = options.lineComment || mode.lineComment, lines = [];\n
    var pad = options.padding == null ? " " : options.padding, didSomething;\n
    lineComment: {\n
      if (!lineString) break lineComment;\n
      for (var i = start; i <= end; ++i) {\n
        var line = self.getLine(i);\n
        var found = line.indexOf(lineString);\n
        if (found > -1 && !/comment/.test(self.getTokenTypeAt(Pos(i, found + 1)))) found = -1;\n
        if (found == -1 && (i != end || i == start) && nonWS.test(line)) break lineComment;\n
        if (found > -1 && nonWS.test(line.slice(0, found))) break lineComment;\n
        lines.push(line);\n
      }\n
      self.operation(function() {\n
        for (var i = start; i <= end; ++i) {\n
          var line = lines[i - start];\n
          var pos = line.indexOf(lineString), endPos = pos + lineString.length;\n
          if (pos < 0) continue;\n
          if (line.slice(endPos, endPos + pad.length) == pad) endPos += pad.length;\n
          didSomething = true;\n
          self.replaceRange("", Pos(i, pos), Pos(i, endPos));\n
        }\n
      });\n
      if (didSomething) return true;\n
    }\n
\n
    // Try block comments\n
    var startString = options.blockCommentStart || mode.blockCommentStart;\n
    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n
    if (!startString || !endString) return false;\n
    var lead = options.blockCommentLead || mode.blockCommentLead;\n
    var startLine = self.getLine(start), endLine = end == start ? startLine : self.getLine(end);\n
    var open = startLine.indexOf(startString), close = endLine.lastIndexOf(endString);\n
    if (close == -1 && start != end) {\n
      endLine = self.getLine(--end);\n
      close = endLine.lastIndexOf(endString);\n
    }\n
    if (open == -1 || close == -1 ||\n
        !/comment/.test(self.getTokenTypeAt(Pos(start, open + 1))) ||\n
        !/comment/.test(self.getTokenTypeAt(Pos(end, close + 1))))\n
      return false;\n
\n
    // Avoid killing block comments completely outside the selection.\n
    // Positions of the last startString before the start of the selection, and the first endString after it.\n
    var lastStart = startLine.lastIndexOf(startString, from.ch);\n
    var firstEnd = lastStart == -1 ? -1 : startLine.slice(0, from.ch).indexOf(endString, lastStart + startString.length);\n
    if (lastStart != -1 && firstEnd != -1 && firstEnd + endString.length != from.ch) return false;\n
    // Positions of the first endString after the end of the selection, and the last startString before it.\n
    firstEnd = endLine.indexOf(endString, to.ch);\n
    var almostLastStart = endLine.slice(to.ch).lastIndexOf(startString, firstEnd - to.ch);\n
    lastStart = (firstEnd == -1 || almostLastStart == -1) ? -1 : to.ch + almostLastStart;\n
    if (firstEnd != -1 && lastStart != -1 && lastStart != to.ch) return false;\n
\n
    self.operation(function() {\n
      self.replaceRange("", Pos(end, close - (pad && endLine.slice(close - pad.length, close) == pad ? pad.length : 0)),\n
                        Pos(end, close + endString.length));\n
      var openEnd = open + startString.length;\n
      if (pad && startLine.slice(openEnd, openEnd + pad.length) == pad) openEnd += pad.length;\n
      self.replaceRange("", Pos(start, open), Pos(start, openEnd));\n
      if (lead) for (var i = start + 1; i <= end; ++i) {\n
        var line = self.getLine(i), found = line.indexOf(lead);\n
        if (found == -1 || nonWS.test(line.slice(0, found))) continue;\n
        var foundEnd = found + lead.length;\n
        if (pad && line.slice(foundEnd, foundEnd + pad.length) == pad) foundEnd += pad.length;\n
        self.replaceRange("", Pos(i, found), Pos(i, foundEnd));\n
      }\n
    });\n
    return true;\n
  });\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>8446</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
