<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604374.52</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>annotatescrollbar.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
  "use strict";\n
\n
  CodeMirror.defineExtension("annotateScrollbar", function(options) {\n
    if (typeof options == "string") options = {className: options};\n
    return new Annotation(this, options);\n
  });\n
\n
  CodeMirror.defineOption("scrollButtonHeight", 0);\n
\n
  function Annotation(cm, options) {\n
    this.cm = cm;\n
    this.options = options;\n
    this.buttonHeight = options.scrollButtonHeight || cm.getOption("scrollButtonHeight");\n
    this.annotations = [];\n
    this.doRedraw = this.doUpdate = null;\n
    this.div = cm.getWrapperElement().appendChild(document.createElement("div"));\n
    this.div.style.cssText = "position: absolute; right: 0; top: 0; z-index: 7; pointer-events: none";\n
    this.computeScale();\n
\n
    function scheduleRedraw(delay) {\n
      clearTimeout(self.doRedraw);\n
      self.doRedraw = setTimeout(function() { self.redraw(); }, delay);\n
    }\n
\n
    var self = this;\n
    cm.on("refresh", this.resizeHandler = function() {\n
      clearTimeout(self.doUpdate);\n
      self.doUpdate = setTimeout(function() {\n
        if (self.computeScale()) scheduleRedraw(20);\n
      }, 100);\n
    });\n
    cm.on("markerAdded", this.resizeHandler);\n
    cm.on("markerCleared", this.resizeHandler);\n
    if (options.listenForChanges !== false)\n
      cm.on("change", this.changeHandler = function() {\n
        scheduleRedraw(250);\n
      });\n
  }\n
\n
  Annotation.prototype.computeScale = function() {\n
    var cm = this.cm;\n
    var hScale = (cm.getWrapperElement().clientHeight - cm.display.barHeight - this.buttonHeight * 2) /\n
      cm.getScrollerElement().scrollHeight\n
    if (hScale != this.hScale) {\n
      this.hScale = hScale;\n
      return true;\n
    }\n
  };\n
\n
  Annotation.prototype.update = function(annotations) {\n
    this.annotations = annotations;\n
    this.redraw();\n
  };\n
\n
  Annotation.prototype.redraw = function(compute) {\n
    if (compute !== false) this.computeScale();\n
    var cm = this.cm, hScale = this.hScale;\n
\n
    var frag = document.createDocumentFragment(), anns = this.annotations;\n
\n
    var wrapping = cm.getOption("lineWrapping");\n
    var singleLineH = wrapping && cm.defaultTextHeight() * 1.5;\n
    var curLine = null, curLineObj = null;\n
    function getY(pos, top) {\n
      if (curLine != pos.line) {\n
        curLine = pos.line;\n
        curLineObj = cm.getLineHandle(curLine);\n
      }\n
      if (wrapping && curLineObj.height > singleLineH)\n
        return cm.charCoords(pos, "local")[top ? "top" : "bottom"];\n
      var topY = cm.heightAtLine(curLineObj, "local");\n
      return topY + (top ? 0 : curLineObj.height);\n
    }\n
\n
    if (cm.display.barWidth) for (var i = 0, nextTop; i < anns.length; i++) {\n
      var ann = anns[i];\n
      var top = nextTop || getY(ann.from, true) * hScale;\n
      var bottom = getY(ann.to, false) * hScale;\n
      while (i < anns.length - 1) {\n
        nextTop = getY(anns[i + 1].from, true) * hScale;\n
        if (nextTop > bottom + .9) break;\n
        ann = anns[++i];\n
        bottom = getY(ann.to, false) * hScale;\n
      }\n
      if (bottom == top) continue;\n
      var height = Math.max(bottom - top, 3);\n
\n
      var elt = frag.appendChild(document.createElement("div"));\n
      elt.style.cssText = "position: absolute; right: 0px; width: " + Math.max(cm.display.barWidth - 1, 2) + "px; top: "\n
        + (top + this.buttonHeight) + "px; height: " + height + "px";\n
      elt.className = this.options.className;\n
      if (ann.id) {\n
        elt.setAttribute("annotation-id", ann.id);\n
      }\n
    }\n
    this.div.textContent = "";\n
    this.div.appendChild(frag);\n
  };\n
\n
  Annotation.prototype.clear = function() {\n
    this.cm.off("refresh", this.resizeHandler);\n
    this.cm.off("markerAdded", this.resizeHandler);\n
    this.cm.off("markerCleared", this.resizeHandler);\n
    if (this.changeHandler) this.cm.off("change", this.changeHandler);\n
    this.div.parentNode.removeChild(this.div);\n
  };\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>4250</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
