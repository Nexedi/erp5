<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604372.34</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>dialog.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
// Open simple dialogs on top of an editor. Relies on dialog.css.\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
  function dialogDiv(cm, template, bottom) {\n
    var wrap = cm.getWrapperElement();\n
    var dialog;\n
    dialog = wrap.appendChild(document.createElement("div"));\n
    if (bottom)\n
      dialog.className = "CodeMirror-dialog CodeMirror-dialog-bottom";\n
    else\n
      dialog.className = "CodeMirror-dialog CodeMirror-dialog-top";\n
\n
    if (typeof template == "string") {\n
      dialog.innerHTML = template;\n
    } else { // Assuming it\'s a detached DOM element.\n
      dialog.appendChild(template);\n
    }\n
    return dialog;\n
  }\n
\n
  function closeNotification(cm, newVal) {\n
    if (cm.state.currentNotificationClose)\n
      cm.state.currentNotificationClose();\n
    cm.state.currentNotificationClose = newVal;\n
  }\n
\n
  CodeMirror.defineExtension("openDialog", function(template, callback, options) {\n
    if (!options) options = {};\n
\n
    closeNotification(this, null);\n
\n
    var dialog = dialogDiv(this, template, options.bottom);\n
    var closed = false, me = this;\n
    function close(newVal) {\n
      if (typeof newVal == \'string\') {\n
        inp.value = newVal;\n
      } else {\n
        if (closed) return;\n
        closed = true;\n
        dialog.parentNode.removeChild(dialog);\n
        me.focus();\n
\n
        if (options.onClose) options.onClose(dialog);\n
      }\n
    }\n
\n
    var inp = dialog.getElementsByTagName("input")[0], button;\n
    if (inp) {\n
      inp.focus();\n
\n
      if (options.value) {\n
        inp.value = options.value;\n
        if (options.selectValueOnOpen !== false) {\n
          inp.select();\n
        }\n
      }\n
\n
      if (options.onInput)\n
        CodeMirror.on(inp, "input", function(e) { options.onInput(e, inp.value, close);});\n
      if (options.onKeyUp)\n
        CodeMirror.on(inp, "keyup", function(e) {options.onKeyUp(e, inp.value, close);});\n
\n
      CodeMirror.on(inp, "keydown", function(e) {\n
        if (options && options.onKeyDown && options.onKeyDown(e, inp.value, close)) { return; }\n
        if (e.keyCode == 27 || (options.closeOnEnter !== false && e.keyCode == 13)) {\n
          inp.blur();\n
          CodeMirror.e_stop(e);\n
          close();\n
        }\n
        if (e.keyCode == 13) callback(inp.value, e);\n
      });\n
\n
      if (options.closeOnBlur !== false) CodeMirror.on(inp, "blur", close);\n
    } else if (button = dialog.getElementsByTagName("button")[0]) {\n
      CodeMirror.on(button, "click", function() {\n
        close();\n
        me.focus();\n
      });\n
\n
      if (options.closeOnBlur !== false) CodeMirror.on(button, "blur", close);\n
\n
      button.focus();\n
    }\n
    return close;\n
  });\n
\n
  CodeMirror.defineExtension("openConfirm", function(template, callbacks, options) {\n
    closeNotification(this, null);\n
    var dialog = dialogDiv(this, template, options && options.bottom);\n
    var buttons = dialog.getElementsByTagName("button");\n
    var closed = false, me = this, blurring = 1;\n
    function close() {\n
      if (closed) return;\n
      closed = true;\n
      dialog.parentNode.removeChild(dialog);\n
      me.focus();\n
    }\n
    buttons[0].focus();\n
    for (var i = 0; i < buttons.length; ++i) {\n
      var b = buttons[i];\n
      (function(callback) {\n
        CodeMirror.on(b, "click", function(e) {\n
          CodeMirror.e_preventDefault(e);\n
          close();\n
          if (callback) callback(me);\n
        });\n
      })(callbacks[i]);\n
      CodeMirror.on(b, "blur", function() {\n
        --blurring;\n
        setTimeout(function() { if (blurring <= 0) close(); }, 200);\n
      });\n
      CodeMirror.on(b, "focus", function() { ++blurring; });\n
    }\n
  });\n
\n
  /*\n
   * openNotification\n
   * Opens a notification, that can be closed with an optional timer\n
   * (default 5000ms timer) and always closes on click.\n
   *\n
   * If a notification is opened while another is opened, it will close the\n
   * currently opened one and open the new one immediately.\n
   */\n
  CodeMirror.defineExtension("openNotification", function(template, options) {\n
    closeNotification(this, close);\n
    var dialog = dialogDiv(this, template, options && options.bottom);\n
    var closed = false, doneTimer;\n
    var duration = options && typeof options.duration !== "undefined" ? options.duration : 5000;\n
\n
    function close() {\n
      if (closed) return;\n
      closed = true;\n
      clearTimeout(doneTimer);\n
      dialog.parentNode.removeChild(dialog);\n
    }\n
\n
    CodeMirror.on(dialog, \'click\', function(e) {\n
      CodeMirror.e_preventDefault(e);\n
      close();\n
    });\n
\n
    if (duration)\n
      doneTimer = setTimeout(close, duration);\n
\n
    return close;\n
  });\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>4938</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
