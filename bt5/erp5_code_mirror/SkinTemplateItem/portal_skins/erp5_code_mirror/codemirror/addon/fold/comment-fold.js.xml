<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604372.78</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>comment-fold.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
"use strict";\n
\n
CodeMirror.registerGlobalHelper("fold", "comment", function(mode) {\n
  return mode.blockCommentStart && mode.blockCommentEnd;\n
}, function(cm, start) {\n
  var mode = cm.getModeAt(start), startToken = mode.blockCommentStart, endToken = mode.blockCommentEnd;\n
  if (!startToken || !endToken) return;\n
  var line = start.line, lineText = cm.getLine(line);\n
\n
  var startCh;\n
  for (var at = start.ch, pass = 0;;) {\n
    var found = at <= 0 ? -1 : lineText.lastIndexOf(startToken, at - 1);\n
    if (found == -1) {\n
      if (pass == 1) return;\n
      pass = 1;\n
      at = lineText.length;\n
      continue;\n
    }\n
    if (pass == 1 && found < start.ch) return;\n
    if (/comment/.test(cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1))) &&\n
        (lineText.slice(found - endToken.length, found) == endToken ||\n
         !/comment/.test(cm.getTokenTypeAt(CodeMirror.Pos(line, found))))) {\n
      startCh = found + startToken.length;\n
      break;\n
    }\n
    at = found - 1;\n
  }\n
\n
  var depth = 1, lastLine = cm.lastLine(), end, endCh;\n
  outer: for (var i = line; i <= lastLine; ++i) {\n
    var text = cm.getLine(i), pos = i == line ? startCh : 0;\n
    for (;;) {\n
      var nextOpen = text.indexOf(startToken, pos), nextClose = text.indexOf(endToken, pos);\n
      if (nextOpen < 0) nextOpen = text.length;\n
      if (nextClose < 0) nextClose = text.length;\n
      pos = Math.min(nextOpen, nextClose);\n
      if (pos == text.length) break;\n
      if (pos == nextOpen) ++depth;\n
      else if (!--depth) { end = i; endCh = pos; break outer; }\n
      ++pos;\n
    }\n
  }\n
  if (end == null || line == end && endCh == startCh) return;\n
  return {from: CodeMirror.Pos(line, startCh),\n
          to: CodeMirror.Pos(end, endCh)};\n
});\n
\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>2147</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
