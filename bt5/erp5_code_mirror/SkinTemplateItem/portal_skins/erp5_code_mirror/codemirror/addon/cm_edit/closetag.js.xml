<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604371.94</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>closetag.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
/**\n
 * Tag-closer extension for CodeMirror.\n
 *\n
 * This extension adds an "autoCloseTags" option that can be set to\n
 * either true to get the default behavior, or an object to further\n
 * configure its behavior.\n
 *\n
 * These are supported options:\n
 *\n
 * `whenClosing` (default true)\n
 *   Whether to autoclose when the \'/\' of a closing tag is typed.\n
 * `whenOpening` (default true)\n
 *   Whether to autoclose the tag when the final \'>\' of an opening\n
 *   tag is typed.\n
 * `dontCloseTags` (default is empty tags for HTML, none for XML)\n
 *   An array of tag names that should not be autoclosed.\n
 * `indentTags` (default is block tags for HTML, none for XML)\n
 *   An array of tag names that should, when opened, cause a\n
 *   blank line to be added inside the tag, and the blank line and\n
 *   closing line to be indented.\n
 *\n
 * See demos/closetag.html for a usage example.\n
 */\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"), require("../fold/xml-fold"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror", "../fold/xml-fold"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
  CodeMirror.defineOption("autoCloseTags", false, function(cm, val, old) {\n
    if (old != CodeMirror.Init && old)\n
      cm.removeKeyMap("autoCloseTags");\n
    if (!val) return;\n
    var map = {name: "autoCloseTags"};\n
    if (typeof val != "object" || val.whenClosing)\n
      map["\'/\'"] = function(cm) { return autoCloseSlash(cm); };\n
    if (typeof val != "object" || val.whenOpening)\n
      map["\'>\'"] = function(cm) { return autoCloseGT(cm); };\n
    cm.addKeyMap(map);\n
  });\n
\n
  var htmlDontClose = ["area", "base", "br", "col", "command", "embed", "hr", "img", "input", "keygen", "link", "meta", "param",\n
                       "source", "track", "wbr"];\n
  var htmlIndent = ["applet", "blockquote", "body", "button", "div", "dl", "fieldset", "form", "frameset", "h1", "h2", "h3", "h4",\n
                    "h5", "h6", "head", "html", "iframe", "layer", "legend", "object", "ol", "p", "select", "table", "ul"];\n
\n
  function autoCloseGT(cm) {\n
    if (cm.getOption("disableInput")) return CodeMirror.Pass;\n
    var ranges = cm.listSelections(), replacements = [];\n
    for (var i = 0; i < ranges.length; i++) {\n
      if (!ranges[i].empty()) return CodeMirror.Pass;\n
      var pos = ranges[i].head, tok = cm.getTokenAt(pos);\n
      var inner = CodeMirror.innerMode(cm.getMode(), tok.state), state = inner.state;\n
      if (inner.mode.name != "xml" || !state.tagName) return CodeMirror.Pass;\n
\n
      var opt = cm.getOption("autoCloseTags"), html = inner.mode.configuration == "html";\n
      var dontCloseTags = (typeof opt == "object" && opt.dontCloseTags) || (html && htmlDontClose);\n
      var indentTags = (typeof opt == "object" && opt.indentTags) || (html && htmlIndent);\n
\n
      var tagName = state.tagName;\n
      if (tok.end > pos.ch) tagName = tagName.slice(0, tagName.length - tok.end + pos.ch);\n
      var lowerTagName = tagName.toLowerCase();\n
      // Don\'t process the \'>\' at the end of an end-tag or self-closing tag\n
      if (!tagName ||\n
          tok.type == "string" && (tok.end != pos.ch || !/[\\"\\\']/.test(tok.string.charAt(tok.string.length - 1)) || tok.string.length == 1) ||\n
          tok.type == "tag" && state.type == "closeTag" ||\n
          tok.string.indexOf("/") == (tok.string.length - 1) || // match something like <someTagName />\n
          dontCloseTags && indexOf(dontCloseTags, lowerTagName) > -1 ||\n
          closingTagExists(cm, tagName, pos, state, true))\n
        return CodeMirror.Pass;\n
\n
      var indent = indentTags && indexOf(indentTags, lowerTagName) > -1;\n
      replacements[i] = {indent: indent,\n
                         text: ">" + (indent ? "\\n\\n" : "") + "</" + tagName + ">",\n
                         newPos: indent ? CodeMirror.Pos(pos.line + 1, 0) : CodeMirror.Pos(pos.line, pos.ch + 1)};\n
    }\n
\n
    for (var i = ranges.length - 1; i >= 0; i--) {\n
      var info = replacements[i];\n
      cm.replaceRange(info.text, ranges[i].head, ranges[i].anchor, "+insert");\n
      var sel = cm.listSelections().slice(0);\n
      sel[i] = {head: info.newPos, anchor: info.newPos};\n
      cm.setSelections(sel);\n
      if (info.indent) {\n
        cm.indentLine(info.newPos.line, null, true);\n
        cm.indentLine(info.newPos.line + 1, null, true);\n
      }\n
    }\n
  }\n
\n
  function autoCloseCurrent(cm, typingSlash) {\n
    var ranges = cm.listSelections(), replacements = [];\n
    var head = typingSlash ? "/" : "</";\n
    for (var i = 0; i < ranges.length; i++) {\n
      if (!ranges[i].empty()) return CodeMirror.Pass;\n
      var pos = ranges[i].head, tok = cm.getTokenAt(pos);\n
      var inner = CodeMirror.innerMode(cm.getMode(), tok.state), state = inner.state;\n
      if (typingSlash && (tok.type == "string" || tok.string.charAt(0) != "<" ||\n
                          tok.start != pos.ch - 1))\n
        return CodeMirror.Pass;\n
      // Kludge to get around the fact that we are not in XML mode\n
      // when completing in JS/CSS snippet in htmlmixed mode. Does not\n
      // work for other XML embedded languages (there is no general\n
      // way to go from a mixed mode to its current XML state).\n
      var replacement;\n
      if (inner.mode.name != "xml") {\n
        if (cm.getMode().name == "htmlmixed" && inner.mode.name == "javascript")\n
          replacement = head + "script";\n
        else if (cm.getMode().name == "htmlmixed" && inner.mode.name == "css")\n
          replacement = head + "style";\n
        else\n
          return CodeMirror.Pass;\n
      } else {\n
        if (!state.context || !state.context.tagName ||\n
            closingTagExists(cm, state.context.tagName, pos, state))\n
          return CodeMirror.Pass;\n
        replacement = head + state.context.tagName;\n
      }\n
      if (cm.getLine(pos.line).charAt(tok.end) != ">") replacement += ">";\n
      replacements[i] = replacement;\n
    }\n
    cm.replaceSelections(replacements);\n
    ranges = cm.listSelections();\n
    for (var i = 0; i < ranges.length; i++)\n
      if (i == ranges.length - 1 || ranges[i].head.line < ranges[i + 1].head.line)\n
        cm.indentLine(ranges[i].head.line);\n
  }\n
\n
  function autoCloseSlash(cm) {\n
    if (cm.getOption("disableInput")) return CodeMirror.Pass;\n
    return autoCloseCurrent(cm, true);\n
  }\n
\n
  CodeMirror.commands.closeTag = function(cm) { return autoCloseCurrent(cm); };\n
\n
  function indexOf(collection, elt) {\n
    if (collection.indexOf) return collection.indexOf(elt);\n
    for (var i = 0, e = collection.length; i < e; ++i)\n
      if (collection[i] == elt) return i;\n
    return -1;\n
  }\n
\n
  // If xml-fold is loaded, we use its functionality to try and verify\n
  // whether a given tag is actually unclosed.\n
  function closingTagExists(cm, tagName, pos, state, newTag) {\n
    if (!CodeMirror.scanForClosingTag) return false;\n
    var end = Math.min(cm.lastLine() + 1, pos.line + 500);\n
    var nextClose = CodeMirror.scanForClosingTag(cm, pos, null, end);\n
    if (!nextClose || nextClose.tag != tagName) return false;\n
    var cx = state.context;\n
    // If the immediate wrapping context contains onCx instances of\n
    // the same tag, a closing tag only exists if there are at least\n
    // that many closing tags of that type following.\n
    for (var onCx = newTag ? 1 : 0; cx && cx.tagName == tagName; cx = cx.prev) ++onCx;\n
    pos = nextClose.to;\n
    for (var i = 1; i < onCx; i++) {\n
      var next = CodeMirror.scanForClosingTag(cm, pos, null, end);\n
      if (!next || next.tag != tagName) return false;\n
      pos = next.to;\n
    }\n
    return true;\n
  }\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>7705</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
