<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604371.99</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>continuelist.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
  "use strict";\n
\n
  var listRE = /^(\\s*)(>[> ]*|[*+-]\\s|(\\d+)([.)]))(\\s*)/,\n
      emptyListRE = /^(\\s*)(>[> ]*|[*+-]|(\\d+)[.)])(\\s*)$/,\n
      unorderedListRE = /[*+-]\\s/;\n
\n
  CodeMirror.commands.newlineAndIndentContinueMarkdownList = function(cm) {\n
    if (cm.getOption("disableInput")) return CodeMirror.Pass;\n
    var ranges = cm.listSelections(), replacements = [];\n
    for (var i = 0; i < ranges.length; i++) {\n
      var pos = ranges[i].head;\n
      var eolState = cm.getStateAfter(pos.line);\n
      var inList = eolState.list !== false;\n
      var inQuote = eolState.quote !== 0;\n
\n
      var line = cm.getLine(pos.line), match = listRE.exec(line);\n
      if (!ranges[i].empty() || (!inList && !inQuote) || !match) {\n
        cm.execCommand("newlineAndIndent");\n
        return;\n
      }\n
      if (emptyListRE.test(line)) {\n
        cm.replaceRange("", {\n
          line: pos.line, ch: 0\n
        }, {\n
          line: pos.line, ch: pos.ch + 1\n
        });\n
        replacements[i] = "\\n";\n
      } else {\n
        var indent = match[1], after = match[5];\n
        var bullet = unorderedListRE.test(match[2]) || match[2].indexOf(">") >= 0\n
          ? match[2]\n
          : (parseInt(match[3], 10) + 1) + match[4];\n
\n
        replacements[i] = "\\n" + indent + bullet + after;\n
      }\n
    }\n
\n
    cm.replaceSelections(replacements);\n
  };\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>1761</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
