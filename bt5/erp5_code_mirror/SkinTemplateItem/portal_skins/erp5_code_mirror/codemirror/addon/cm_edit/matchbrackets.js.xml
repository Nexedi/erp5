<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604372.04</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>matchbrackets.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
  var ie_lt8 = /MSIE \\d/.test(navigator.userAgent) &&\n
    (document.documentMode == null || document.documentMode < 8);\n
\n
  var Pos = CodeMirror.Pos;\n
\n
  var matching = {"(": ")>", ")": "(<", "[": "]>", "]": "[<", "{": "}>", "}": "{<"};\n
\n
  function findMatchingBracket(cm, where, strict, config) {\n
    var line = cm.getLineHandle(where.line), pos = where.ch - 1;\n
    var match = (pos >= 0 && matching[line.text.charAt(pos)]) || matching[line.text.charAt(++pos)];\n
    if (!match) return null;\n
    var dir = match.charAt(1) == ">" ? 1 : -1;\n
    if (strict && (dir > 0) != (pos == where.ch)) return null;\n
    var style = cm.getTokenTypeAt(Pos(where.line, pos + 1));\n
\n
    var found = scanForBracket(cm, Pos(where.line, pos + (dir > 0 ? 1 : 0)), dir, style || null, config);\n
    if (found == null) return null;\n
    return {from: Pos(where.line, pos), to: found && found.pos,\n
            match: found && found.ch == match.charAt(0), forward: dir > 0};\n
  }\n
\n
  // bracketRegex is used to specify which type of bracket to scan\n
  // should be a regexp, e.g. /[[\\]]/\n
  //\n
  // Note: If "where" is on an open bracket, then this bracket is ignored.\n
  //\n
  // Returns false when no bracket was found, null when it reached\n
  // maxScanLines and gave up\n
  function scanForBracket(cm, where, dir, style, config) {\n
    var maxScanLen = (config && config.maxScanLineLength) || 10000;\n
    var maxScanLines = (config && config.maxScanLines) || 1000;\n
\n
    var stack = [];\n
    var re = config && config.bracketRegex ? config.bracketRegex : /[(){}[\\]]/;\n
    var lineEnd = dir > 0 ? Math.min(where.line + maxScanLines, cm.lastLine() + 1)\n
                          : Math.max(cm.firstLine() - 1, where.line - maxScanLines);\n
    for (var lineNo = where.line; lineNo != lineEnd; lineNo += dir) {\n
      var line = cm.getLine(lineNo);\n
      if (!line) continue;\n
      var pos = dir > 0 ? 0 : line.length - 1, end = dir > 0 ? line.length : -1;\n
      if (line.length > maxScanLen) continue;\n
      if (lineNo == where.line) pos = where.ch - (dir < 0 ? 1 : 0);\n
      for (; pos != end; pos += dir) {\n
        var ch = line.charAt(pos);\n
        if (re.test(ch) && (style === undefined || cm.getTokenTypeAt(Pos(lineNo, pos + 1)) == style)) {\n
          var match = matching[ch];\n
          if ((match.charAt(1) == ">") == (dir > 0)) stack.push(ch);\n
          else if (!stack.length) return {pos: Pos(lineNo, pos), ch: ch};\n
          else stack.pop();\n
        }\n
      }\n
    }\n
    return lineNo - dir == (dir > 0 ? cm.lastLine() : cm.firstLine()) ? false : null;\n
  }\n
\n
  function matchBrackets(cm, autoclear, config) {\n
    // Disable brace matching in long lines, since it\'ll cause hugely slow updates\n
    var maxHighlightLen = cm.state.matchBrackets.maxHighlightLineLength || 1000;\n
    var marks = [], ranges = cm.listSelections();\n
    for (var i = 0; i < ranges.length; i++) {\n
      var match = ranges[i].empty() && findMatchingBracket(cm, ranges[i].head, false, config);\n
      if (match && cm.getLine(match.from.line).length <= maxHighlightLen) {\n
        var style = match.match ? "CodeMirror-matchingbracket" : "CodeMirror-nonmatchingbracket";\n
        marks.push(cm.markText(match.from, Pos(match.from.line, match.from.ch + 1), {className: style}));\n
        if (match.to && cm.getLine(match.to.line).length <= maxHighlightLen)\n
          marks.push(cm.markText(match.to, Pos(match.to.line, match.to.ch + 1), {className: style}));\n
      }\n
    }\n
\n
    if (marks.length) {\n
      // Kludge to work around the IE bug from issue #1193, where text\n
      // input stops going to the textare whever this fires.\n
      if (ie_lt8 && cm.state.focused) cm.focus();\n
\n
      var clear = function() {\n
        cm.operation(function() {\n
          for (var i = 0; i < marks.length; i++) marks[i].clear();\n
        });\n
      };\n
      if (autoclear) setTimeout(clear, 800);\n
      else return clear;\n
    }\n
  }\n
\n
  var currentlyHighlighted = null;\n
  function doMatchBrackets(cm) {\n
    cm.operation(function() {\n
      if (currentlyHighlighted) {currentlyHighlighted(); currentlyHighlighted = null;}\n
      currentlyHighlighted = matchBrackets(cm, false, cm.state.matchBrackets);\n
    });\n
  }\n
\n
  CodeMirror.defineOption("matchBrackets", false, function(cm, val, old) {\n
    if (old && old != CodeMirror.Init)\n
      cm.off("cursorActivity", doMatchBrackets);\n
    if (val) {\n
      cm.state.matchBrackets = typeof val == "object" ? val : {};\n
      cm.on("cursorActivity", doMatchBrackets);\n
    }\n
  });\n
\n
  CodeMirror.defineExtension("matchBrackets", function() {matchBrackets(this, true);});\n
  CodeMirror.defineExtension("findMatchingBracket", function(pos, strict, config){\n
    return findMatchingBracket(this, pos, strict, config);\n
  });\n
  CodeMirror.defineExtension("scanForBracket", function(pos, dir, style, config){\n
    return scanForBracket(this, pos, dir, style, config);\n
  });\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>5254</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
