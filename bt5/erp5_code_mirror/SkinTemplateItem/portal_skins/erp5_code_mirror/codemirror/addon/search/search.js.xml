<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604374.93</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>search.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
// Define search commands. Depends on dialog.js or another\n
// implementation of the openDialog method.\n
\n
// Replace works a little oddly -- it will do the replace on the next\n
// Ctrl-G (or whatever is bound to findNext) press. You prevent a\n
// replace by making sure the match is no longer selected when hitting\n
// Ctrl-G.\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"), require("./searchcursor"), require("../dialog/dialog"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror", "./searchcursor", "../dialog/dialog"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
  "use strict";\n
\n
  function searchOverlay(query, caseInsensitive) {\n
    if (typeof query == "string")\n
      query = new RegExp(query.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, "\\\\$&"), caseInsensitive ? "gi" : "g");\n
    else if (!query.global)\n
      query = new RegExp(query.source, query.ignoreCase ? "gi" : "g");\n
\n
    return {token: function(stream) {\n
      query.lastIndex = stream.pos;\n
      var match = query.exec(stream.string);\n
      if (match && match.index == stream.pos) {\n
        stream.pos += match[0].length || 1;\n
        return "searching";\n
      } else if (match) {\n
        stream.pos = match.index;\n
      } else {\n
        stream.skipToEnd();\n
      }\n
    }};\n
  }\n
\n
  function SearchState() {\n
    this.posFrom = this.posTo = this.lastQuery = this.query = null;\n
    this.overlay = null;\n
  }\n
\n
  function getSearchState(cm) {\n
    return cm.state.search || (cm.state.search = new SearchState());\n
  }\n
\n
  function queryCaseInsensitive(query) {\n
    return typeof query == "string" && query == query.toLowerCase();\n
  }\n
\n
  function getSearchCursor(cm, query, pos) {\n
    // Heuristic: if the query string is all lowercase, do a case insensitive search.\n
    return cm.getSearchCursor(query, pos, queryCaseInsensitive(query));\n
  }\n
\n
  function persistentDialog(cm, text, deflt, f) {\n
    cm.openDialog(text, f, {\n
      value: deflt,\n
      selectValueOnOpen: true,\n
      closeOnEnter: false,\n
      onClose: function() { clearSearch(cm); }\n
    });\n
  }\n
\n
  function dialog(cm, text, shortText, deflt, f) {\n
    if (cm.openDialog) cm.openDialog(text, f, {value: deflt, selectValueOnOpen: true});\n
    else f(prompt(shortText, deflt));\n
  }\n
\n
  function confirmDialog(cm, text, shortText, fs) {\n
    if (cm.openConfirm) cm.openConfirm(text, fs);\n
    else if (confirm(shortText)) fs[0]();\n
  }\n
\n
  function parseString(string) {\n
    return string.replace(/\\\\(.)/g, function(_, ch) {\n
      if (ch == "n") return "\\n"\n
      if (ch == "r") return "\\r"\n
      return ch\n
    })\n
  }\n
\n
  function parseQuery(query) {\n
    var isRE = query.match(/^\\/(.*)\\/([a-z]*)$/);\n
    if (isRE) {\n
      try { query = new RegExp(isRE[1], isRE[2].indexOf("i") == -1 ? "" : "i"); }\n
      catch(e) {} // Not a regular expression after all, do a string search\n
    } else {\n
      query = parseString(query)\n
    }\n
    if (typeof query == "string" ? query == "" : query.test(""))\n
      query = /x^/;\n
    return query;\n
  }\n
\n
  var queryDialog =\n
    \'Search: <input type="text" style="width: 10em" class="CodeMirror-search-field"/> <span style="color: #888" class="CodeMirror-search-hint">(Use /re/ syntax for regexp search)</span>\';\n
\n
  function startSearch(cm, state, query) {\n
    state.queryText = query;\n
    state.query = parseQuery(query);\n
    cm.removeOverlay(state.overlay, queryCaseInsensitive(state.query));\n
    state.overlay = searchOverlay(state.query, queryCaseInsensitive(state.query));\n
    cm.addOverlay(state.overlay);\n
    if (cm.showMatchesOnScrollbar) {\n
      if (state.annotate) { state.annotate.clear(); state.annotate = null; }\n
      state.annotate = cm.showMatchesOnScrollbar(state.query, queryCaseInsensitive(state.query));\n
    }\n
  }\n
\n
  function doSearch(cm, rev, persistent) {\n
    var state = getSearchState(cm);\n
    if (state.query) return findNext(cm, rev);\n
    var q = cm.getSelection() || state.lastQuery;\n
    if (persistent && cm.openDialog) {\n
      var hiding = null\n
      persistentDialog(cm, queryDialog, q, function(query, event) {\n
        CodeMirror.e_stop(event);\n
        if (!query) return;\n
        if (query != state.queryText) startSearch(cm, state, query);\n
        if (hiding) hiding.style.opacity = 1\n
        findNext(cm, event.shiftKey, function(_, to) {\n
          var dialog\n
          if (to.line < 3 && document.querySelector &&\n
              (dialog = cm.display.wrapper.querySelector(".CodeMirror-dialog")) &&\n
              dialog.getBoundingClientRect().bottom - 4 > cm.cursorCoords(to, "window").top)\n
            (hiding = dialog).style.opacity = .4\n
        })\n
      });\n
    } else {\n
      dialog(cm, queryDialog, "Search for:", q, function(query) {\n
        if (query && !state.query) cm.operation(function() {\n
          startSearch(cm, state, query);\n
          state.posFrom = state.posTo = cm.getCursor();\n
          findNext(cm, rev);\n
        });\n
      });\n
    }\n
  }\n
\n
  function findNext(cm, rev, callback) {cm.operation(function() {\n
    var state = getSearchState(cm);\n
    var cursor = getSearchCursor(cm, state.query, rev ? state.posFrom : state.posTo);\n
    if (!cursor.find(rev)) {\n
      cursor = getSearchCursor(cm, state.query, rev ? CodeMirror.Pos(cm.lastLine()) : CodeMirror.Pos(cm.firstLine(), 0));\n
      if (!cursor.find(rev)) return;\n
    }\n
    cm.setSelection(cursor.from(), cursor.to());\n
    cm.scrollIntoView({from: cursor.from(), to: cursor.to()}, 20);\n
    state.posFrom = cursor.from(); state.posTo = cursor.to();\n
    if (callback) callback(cursor.from(), cursor.to())\n
  });}\n
\n
  function clearSearch(cm) {cm.operation(function() {\n
    var state = getSearchState(cm);\n
    state.lastQuery = state.query;\n
    if (!state.query) return;\n
    state.query = state.queryText = null;\n
    cm.removeOverlay(state.overlay);\n
    if (state.annotate) { state.annotate.clear(); state.annotate = null; }\n
  });}\n
\n
  var replaceQueryDialog =\n
    \' <input type="text" style="width: 10em" class="CodeMirror-search-field"/> <span style="color: #888" class="CodeMirror-search-hint">(Use /re/ syntax for regexp search)</span>\';\n
  var replacementQueryDialog = \'With: <input type="text" style="width: 10em" class="CodeMirror-search-field"/>\';\n
  var doReplaceConfirm = "Replace? <button>Yes</button> <button>No</button> <button>All</button> <button>Stop</button>";\n
\n
  function replaceAll(cm, query, text) {\n
    cm.operation(function() {\n
      for (var cursor = getSearchCursor(cm, query); cursor.findNext();) {\n
        if (typeof query != "string") {\n
          var match = cm.getRange(cursor.from(), cursor.to()).match(query);\n
          cursor.replace(text.replace(/\\$(\\d)/g, function(_, i) {return match[i];}));\n
        } else cursor.replace(text);\n
      }\n
    });\n
  }\n
\n
  function replace(cm, all) {\n
    if (cm.getOption("readOnly")) return;\n
    var query = cm.getSelection() || getSearchState(cm).lastQuery;\n
    var dialogText = all ? "Replace all:" : "Replace:"\n
    dialog(cm, dialogText + replaceQueryDialog, dialogText, query, function(query) {\n
      if (!query) return;\n
      query = parseQuery(query);\n
      dialog(cm, replacementQueryDialog, "Replace with:", "", function(text) {\n
        text = parseString(text)\n
        if (all) {\n
          replaceAll(cm, query, text)\n
        } else {\n
          clearSearch(cm);\n
          var cursor = getSearchCursor(cm, query, cm.getCursor());\n
          var advance = function() {\n
            var start = cursor.from(), match;\n
            if (!(match = cursor.findNext())) {\n
              cursor = getSearchCursor(cm, query);\n
              if (!(match = cursor.findNext()) ||\n
                  (start && cursor.from().line == start.line && cursor.from().ch == start.ch)) return;\n
            }\n
            cm.setSelection(cursor.from(), cursor.to());\n
            cm.scrollIntoView({from: cursor.from(), to: cursor.to()});\n
            confirmDialog(cm, doReplaceConfirm, "Replace?",\n
                          [function() {doReplace(match);}, advance,\n
                           function() {replaceAll(cm, query, text)}]);\n
          };\n
          var doReplace = function(match) {\n
            cursor.replace(typeof query == "string" ? text :\n
                           text.replace(/\\$(\\d)/g, function(_, i) {return match[i];}));\n
            advance();\n
          };\n
          advance();\n
        }\n
      });\n
    });\n
  }\n
\n
  CodeMirror.commands.find = function(cm) {clearSearch(cm); doSearch(cm);};\n
  CodeMirror.commands.findPersistent = function(cm) {clearSearch(cm); doSearch(cm, false, true);};\n
  CodeMirror.commands.findNext = doSearch;\n
  CodeMirror.commands.findPrev = function(cm) {doSearch(cm, true);};\n
  CodeMirror.commands.clearSearch = clearSearch;\n
  CodeMirror.commands.replace = replace;\n
  CodeMirror.commands.replaceAll = function(cm) {replace(cm, true);};\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>8957</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
