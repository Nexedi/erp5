<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604372.55</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>panel.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
  CodeMirror.defineExtension("addPanel", function(node, options) {\n
    options = options || {};\n
\n
    if (!this.state.panels) initPanels(this);\n
\n
    var info = this.state.panels;\n
    var wrapper = info.wrapper;\n
    var cmWrapper = this.getWrapperElement();\n
\n
    if (options.after instanceof Panel && !options.after.cleared) {\n
      wrapper.insertBefore(node, options.before.node.nextSibling);\n
    } else if (options.before instanceof Panel && !options.before.cleared) {\n
      wrapper.insertBefore(node, options.before.node);\n
    } else if (options.replace instanceof Panel && !options.replace.cleared) {\n
      wrapper.insertBefore(node, options.replace.node);\n
      options.replace.clear();\n
    } else if (options.position == "bottom") {\n
      wrapper.appendChild(node);\n
    } else if (options.position == "before-bottom") {\n
      wrapper.insertBefore(node, cmWrapper.nextSibling);\n
    } else if (options.position == "after-top") {\n
      wrapper.insertBefore(node, cmWrapper);\n
    } else {\n
      wrapper.insertBefore(node, wrapper.firstChild);\n
    }\n
\n
    var height = (options && options.height) || node.offsetHeight;\n
    this._setSize(null, info.heightLeft -= height);\n
    info.panels++;\n
    return new Panel(this, node, options, height);\n
  });\n
\n
  function Panel(cm, node, options, height) {\n
    this.cm = cm;\n
    this.node = node;\n
    this.options = options;\n
    this.height = height;\n
    this.cleared = false;\n
  }\n
\n
  Panel.prototype.clear = function() {\n
    if (this.cleared) return;\n
    this.cleared = true;\n
    var info = this.cm.state.panels;\n
    this.cm._setSize(null, info.heightLeft += this.height);\n
    info.wrapper.removeChild(this.node);\n
    if (--info.panels == 0) removePanels(this.cm);\n
  };\n
\n
  Panel.prototype.changed = function(height) {\n
    var newHeight = height == null ? this.node.offsetHeight : height;\n
    var info = this.cm.state.panels;\n
    this.cm._setSize(null, info.height += (newHeight - this.height));\n
    this.height = newHeight;\n
  };\n
\n
  function initPanels(cm) {\n
    var wrap = cm.getWrapperElement();\n
    var style = window.getComputedStyle ? window.getComputedStyle(wrap) : wrap.currentStyle;\n
    var height = parseInt(style.height);\n
    var info = cm.state.panels = {\n
      setHeight: wrap.style.height,\n
      heightLeft: height,\n
      panels: 0,\n
      wrapper: document.createElement("div")\n
    };\n
    wrap.parentNode.insertBefore(info.wrapper, wrap);\n
    var hasFocus = cm.hasFocus();\n
    info.wrapper.appendChild(wrap);\n
    if (hasFocus) cm.focus();\n
\n
    cm._setSize = cm.setSize;\n
    if (height != null) cm.setSize = function(width, newHeight) {\n
      if (newHeight == null) return this._setSize(width, newHeight);\n
      info.setHeight = newHeight;\n
      if (typeof newHeight != "number") {\n
        var px = /^(\\d+\\.?\\d*)px$/.exec(newHeight);\n
        if (px) {\n
          newHeight = Number(px[1]);\n
        } else {\n
          info.wrapper.style.height = newHeight;\n
          newHeight = info.wrapper.offsetHeight;\n
          info.wrapper.style.height = "";\n
        }\n
      }\n
      cm._setSize(width, info.heightLeft += (newHeight - height));\n
      height = newHeight;\n
    };\n
  }\n
\n
  function removePanels(cm) {\n
    var info = cm.state.panels;\n
    cm.state.panels = null;\n
\n
    var wrap = cm.getWrapperElement();\n
    info.wrapper.parentNode.replaceChild(wrap, info.wrapper);\n
    wrap.style.height = info.setHeight;\n
    cm.setSize = cm._setSize;\n
    cm.setSize();\n
  }\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>3844</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
