<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts60604373.9</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>lint.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

// CodeMirror, copyright (c) by Marijn Haverbeke and others\n
// Distributed under an MIT license: http://codemirror.net/LICENSE\n
\n
(function(mod) {\n
  if (typeof exports == "object" && typeof module == "object") // CommonJS\n
    mod(require("../../lib/codemirror"));\n
  else if (typeof define == "function" && define.amd) // AMD\n
    define(["../../lib/codemirror"], mod);\n
  else // Plain browser env\n
    mod(CodeMirror);\n
})(function(CodeMirror) {\n
  "use strict";\n
  var GUTTER_ID = "CodeMirror-lint-markers";\n
\n
  function showTooltip(e, content) {\n
    var tt = document.createElement("div");\n
    tt.className = "CodeMirror-lint-tooltip";\n
    tt.appendChild(content.cloneNode(true));\n
    document.body.appendChild(tt);\n
\n
    function position(e) {\n
      if (!tt.parentNode) return CodeMirror.off(document, "mousemove", position);\n
      tt.style.top = Math.max(0, e.clientY - tt.offsetHeight - 5) + "px";\n
      tt.style.left = (e.clientX + 5) + "px";\n
    }\n
    CodeMirror.on(document, "mousemove", position);\n
    position(e);\n
    if (tt.style.opacity != null) tt.style.opacity = 1;\n
    return tt;\n
  }\n
  function rm(elt) {\n
    if (elt.parentNode) elt.parentNode.removeChild(elt);\n
  }\n
  function hideTooltip(tt) {\n
    if (!tt.parentNode) return;\n
    if (tt.style.opacity == null) rm(tt);\n
    tt.style.opacity = 0;\n
    setTimeout(function() { rm(tt); }, 600);\n
  }\n
\n
  function showTooltipFor(e, content, node) {\n
    var tooltip = showTooltip(e, content);\n
    function hide() {\n
      CodeMirror.off(node, "mouseout", hide);\n
      if (tooltip) { hideTooltip(tooltip); tooltip = null; }\n
    }\n
    var poll = setInterval(function() {\n
      if (tooltip) for (var n = node;; n = n.parentNode) {\n
        if (n && n.nodeType == 11) n = n.host;\n
        if (n == document.body) return;\n
        if (!n) { hide(); break; }\n
      }\n
      if (!tooltip) return clearInterval(poll);\n
    }, 400);\n
    CodeMirror.on(node, "mouseout", hide);\n
  }\n
\n
  function LintState(cm, options, hasGutter) {\n
    this.marked = [];\n
    this.options = options;\n
    this.timeout = null;\n
    this.hasGutter = hasGutter;\n
    this.onMouseOver = function(e) { onMouseOver(cm, e); };\n
    this.waitingFor = 0\n
  }\n
\n
  function parseOptions(_cm, options) {\n
    if (options instanceof Function) return {getAnnotations: options};\n
    if (!options || options === true) options = {};\n
    return options;\n
  }\n
\n
  function clearMarks(cm) {\n
    var state = cm.state.lint;\n
    if (state.hasGutter) cm.clearGutter(GUTTER_ID);\n
    for (var i = 0; i < state.marked.length; ++i)\n
      state.marked[i].clear();\n
    state.marked.length = 0;\n
  }\n
\n
  function makeMarker(labels, severity, multiple, tooltips) {\n
    var marker = document.createElement("div"), inner = marker;\n
    marker.className = "CodeMirror-lint-marker-" + severity;\n
    if (multiple) {\n
      inner = marker.appendChild(document.createElement("div"));\n
      inner.className = "CodeMirror-lint-marker-multiple";\n
    }\n
\n
    if (tooltips != false) CodeMirror.on(inner, "mouseover", function(e) {\n
      showTooltipFor(e, labels, inner);\n
    });\n
\n
    return marker;\n
  }\n
\n
  function getMaxSeverity(a, b) {\n
    if (a == "error") return a;\n
    else return b;\n
  }\n
\n
  function groupByLine(annotations) {\n
    var lines = [];\n
    for (var i = 0; i < annotations.length; ++i) {\n
      var ann = annotations[i], line = ann.from.line;\n
      (lines[line] || (lines[line] = [])).push(ann);\n
    }\n
    return lines;\n
  }\n
\n
  function annotationTooltip(ann) {\n
    var severity = ann.severity;\n
    if (!severity) severity = "error";\n
    var tip = document.createElement("div");\n
    tip.className = "CodeMirror-lint-message-" + severity;\n
    tip.appendChild(document.createTextNode(ann.message));\n
    return tip;\n
  }\n
\n
  function lintAsync(cm, getAnnotations, passOptions) {\n
    var state = cm.state.lint\n
    var id = ++state.waitingFor\n
    function abort() {\n
      id = -1\n
      cm.off("change", abort)\n
    }\n
    cm.on("change", abort)\n
    getAnnotations(cm.getValue(), function(annotations, arg2) {\n
      cm.off("change", abort)\n
      if (state.waitingFor != id) return\n
      if (arg2 && annotations instanceof CodeMirror) annotations = arg2\n
      updateLinting(cm, annotations)\n
    }, passOptions, cm);\n
  }\n
\n
  function startLinting(cm) {\n
    var state = cm.state.lint, options = state.options;\n
    var passOptions = options.options || options; // Support deprecated passing of `options` property in options\n
    var getAnnotations = options.getAnnotations || cm.getHelper(CodeMirror.Pos(0, 0), "lint");\n
    if (!getAnnotations) return;\n
    if (options.async || getAnnotations.async) {\n
      lintAsync(cm, getAnnotations, passOptions)\n
    } else {\n
      updateLinting(cm, getAnnotations(cm.getValue(), passOptions, cm));\n
    }\n
  }\n
\n
  function updateLinting(cm, annotationsNotSorted) {\n
    clearMarks(cm);\n
    var state = cm.state.lint, options = state.options;\n
\n
    var annotations = groupByLine(annotationsNotSorted);\n
\n
    for (var line = 0; line < annotations.length; ++line) {\n
      var anns = annotations[line];\n
      if (!anns) continue;\n
\n
      var maxSeverity = null;\n
      var tipLabel = state.hasGutter && document.createDocumentFragment();\n
\n
      for (var i = 0; i < anns.length; ++i) {\n
        var ann = anns[i];\n
        var severity = ann.severity;\n
        if (!severity) severity = "error";\n
        maxSeverity = getMaxSeverity(maxSeverity, severity);\n
\n
        if (options.formatAnnotation) ann = options.formatAnnotation(ann);\n
        if (state.hasGutter) tipLabel.appendChild(annotationTooltip(ann));\n
\n
        if (ann.to) state.marked.push(cm.markText(ann.from, ann.to, {\n
          className: "CodeMirror-lint-mark-" + severity,\n
          __annotation: ann\n
        }));\n
      }\n
\n
      if (state.hasGutter)\n
        cm.setGutterMarker(line, GUTTER_ID, makeMarker(tipLabel, maxSeverity, anns.length > 1,\n
                                                       state.options.tooltips));\n
    }\n
    if (options.onUpdateLinting) options.onUpdateLinting(annotationsNotSorted, annotations, cm);\n
  }\n
\n
  function onChange(cm) {\n
    var state = cm.state.lint;\n
    if (!state) return;\n
    clearTimeout(state.timeout);\n
    state.timeout = setTimeout(function(){startLinting(cm);}, state.options.delay || 500);\n
  }\n
\n
  function popupTooltips(annotations, e) {\n
    var target = e.target || e.srcElement;\n
    var tooltip = document.createDocumentFragment();\n
    for (var i = 0; i < annotations.length; i++) {\n
      var ann = annotations[i];\n
      tooltip.appendChild(annotationTooltip(ann));\n
    }\n
    showTooltipFor(e, tooltip, target);\n
  }\n
\n
  function onMouseOver(cm, e) {\n
    var target = e.target || e.srcElement;\n
    if (!/\\bCodeMirror-lint-mark-/.test(target.className)) return;\n
    var box = target.getBoundingClientRect(), x = (box.left + box.right) / 2, y = (box.top + box.bottom) / 2;\n
    var spans = cm.findMarksAt(cm.coordsChar({left: x, top: y}, "client"));\n
\n
    var annotations = [];\n
    for (var i = 0; i < spans.length; ++i) {\n
      annotations.push(spans[i].__annotation);\n
    }\n
    if (annotations.length) popupTooltips(annotations, e);\n
  }\n
\n
  CodeMirror.defineOption("lint", false, function(cm, val, old) {\n
    if (old && old != CodeMirror.Init) {\n
      clearMarks(cm);\n
      if (cm.state.lint.options.lintOnChange !== false)\n
        cm.off("change", onChange);\n
      CodeMirror.off(cm.getWrapperElement(), "mouseover", cm.state.lint.onMouseOver);\n
      clearTimeout(cm.state.lint.timeout);\n
      delete cm.state.lint;\n
    }\n
\n
    if (val) {\n
      var gutters = cm.getOption("gutters"), hasLintGutter = false;\n
      for (var i = 0; i < gutters.length; ++i) if (gutters[i] == GUTTER_ID) hasLintGutter = true;\n
      var state = cm.state.lint = new LintState(cm, parseOptions(cm, val), hasLintGutter);\n
      if (state.options.lintOnChange !== false)\n
        cm.on("change", onChange);\n
      if (state.options.tooltips != false)\n
        CodeMirror.on(cm.getWrapperElement(), "mouseover", state.onMouseOver);\n
\n
      startLinting(cm);\n
    }\n
  });\n
\n
  CodeMirror.defineExtension("performLint", function() {\n
    if (this.state.lint) startLinting(this);\n
  });\n
});\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>8032</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
