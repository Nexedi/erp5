<tal:block tal:condition="options/field_id | nothing">
  <tal:comment tal:replace="nothing">When rendered as an ERP5 field, we need to add a textarea and adjust CSS.
  </tal:comment>
  <textarea tal:attributes="id options/field_id;
                            name options/field_id"
            style="display:none"
            tal:content="options/content">
  </textarea>
  <style>
    /* Override some conflicting default erp5.css styles */
    /*  - font size and indentation rules */
    span {
      font-family: unset !important;
    }

    div#monaco-container * {
      font-family: Menlo, Monaco, "Courier New", monospace;
      font-size: unset !important;
    }

    /* - selected text highlight */
    .monaco-editor .view-lines {
      background-color: transparent !important;
    }

    /* - popup menu */
    .monaco-action-bar .action-label.disabled {
      height: 0px;
    }

    .monaco-menu li.action-item a.action-label {
      font-family: "Segoe WPC", "Segoe UI", ".SFNSDisplay-Light", "SFUIText-Light", "HelveticaNeue-Light", sans-serif, "Droid Sans Fallback" !important;
    }

    /* - Command palette (FIXME: background color inherits ERP5 page background color) */
    .quick-open-entry * {
      font-family: "Segoe WPC", "Segoe UI", ".SFNSDisplay-Light", "SFUIText-Light", "HelveticaNeue-Light", sans-serif, "Droid Sans Fallback" !important;
    }
  </style>
</tal:block>

<div id="monaco-container" style="width:100%;height:800px;border:1px solid grey;"></div>

<script tal:content='python: "var portal_url=" + modules["json"].dumps(options.get("portal_url"))'></script>
<script tal:content='python: "var field_id=" + modules["json"].dumps(options.get("field_id"))'></script>
<script tal:content='python: "var mode=" + modules["json"].dumps(options["mode"])'></script>
<script tal:content='python: "var textarea_selector=" + modules["json"].dumps(options.get("textarea_selector"))'>
</script>
<script tal:content='python: "var bound_names=" + modules["json"].dumps(options.get("bound_names"))'></script>
<script tal:content='python: "var script_name=" + modules["json"].dumps(options.get("script_name"))'></script>

<script
  tal:content='python: "window.monacoEditorWebPackResourceBaseUrl = " + modules["json"].dumps(options["portal_url"]) + " + \"/monaco-editor/\""'>
</script>

<script tal:attributes="src string:${options/portal_url}/monaco-editor/prettier@2.0.5/standalone.js"></script>
<script tal:attributes="src string:${options/portal_url}/monaco-editor/prettier@2.0.5/parser-babel.js"></script>

<script charset="utf-8">
/* we need to defer import for the monacoEditorWebPackResourceBaseUrl trick to work as expected in ZMI */
var $script = document.createElement("script");
$script.src =
  window.monacoEditorWebPackResourceBaseUrl + "/monaco-editor/app.bundle.min.js";
document.head.appendChild($script);

$script.onload = function() {
  var $textarea =
    document.querySelector(textarea_selector) ||
    document.getElementById(field_id);
  if (textarea_selector) {
    /* ZMI mode */
    /* create a div instead of the default textarea */
    var $monacoContainer = document.getElementById("monaco-container");
    $monacoContainer.parentNode.removeChild($monacoContainer);
    $textarea.parentNode.appendChild($monacoContainer);
    $monacoContainer.style.width = $textarea.parentNode.offsetWidth - 10 + "px";
    $monacoContainer.style.height = $textarea.parentNode.offsetHeight + "px";
    $textarea.style.display = "none";

    function saveDocument() {
      var $saveButton = document.querySelector('input[value="Save Changes"]');
      $saveButton.click();
      return false;
    }
  } else {
    /* ERP5 editor field mode */

    /* all ERP5 field have a .title that shows a popup, we don't want this popup on this editor */
    $textarea.parentNode.title = "";

    function saveDocument() {
      clickSaveButton("Base_edit");
      document.getElementById("main_form").submit();
    }
  }

  // this is codemorrir only
  if (mode === "htmlmixed") {
    mode = "html";
  }
 
  var editor = monaco.editor.create(
    document.getElementById("monaco-container"),
    {
      value: $textarea.value,
      language: mode,

      /* because Alt+Click is LeftClick on ChromeOS */
      multiCursorModifier: "ctrlCmd",

      autoIndent: true
    }
  );
  if (mode == "python") {
    editor.getModel().updateOptions({ tabSize: 2 });
  }
  if (mode === "html") {
    monaco.languages.html.htmlDefaults.options.format.tabSize = 2;
    monaco.languages.html.htmlDefaults.options.format.insertSpaces = true;
  }
  if (mode === "javascript") {
    // load an external library in namespace of the edited .js
    function addExtraLibrary(script_name, lib_name) {
      return fetch(script_name)
        .then(function(resp) {
          return resp.text();
        })
        .then(function(script_code) {
          monaco.languages.typescript.javascriptDefaults.addExtraLib(
            script_code,
            lib_name
          );
        });
    }
    let lines = $textarea.value.split('\n');
    // type mapping for nexedi libraries, plus external references from current document.
    let extra_libraries = [
        addExtraLibrary('../monaco-rsvp.d.ts', 'rsvp'),
        addExtraLibrary('../monaco-renderjs.d.ts', 'renderjs'),
        addExtraLibrary('../monaco-jio.d.ts', 'jio')]

    for(let i = 0; i < lines.length; i++){
      let match = lines[i].match(/erp5_monaco_editor_include\:\s*([^\s]+)\s+([a-zA-Z0-9]+)/);
      if (match){
        addExtraLibrary(match[1], match[2]);
      }
    }
    Promise.all(extra_libraries);
  }
  monaco.languages.registerDocumentFormattingEditProvider('javascript', {
    provideDocumentFormattingEdits(model, options, token) {
      const text = prettier.format(model.getValue(), {
        parser: 'babel',
        plugins: [prettierPlugins.babel],
        // see http://json.schemastore.org/prettierrc for supported options.
        singleQuote: true,
        tabWidth: 2
      });

      return [
        {
          range: model.getFullModelRange(),
          text,
        },
      ];
    },
  });

  // lint javascript with typescript compiler
  monaco.languages.typescript.javascriptDefaults.setDiagnosticsOptions({
    noSemanticValidation: false,
    noSyntaxValidation: false
  });
  monaco.languages.typescript.javascriptDefaults.setCompilerOptions({
    target: monaco.languages.typescript.ScriptTarget.ES6,
    allowNonTsExtensions: true,
    checkJs: true,
    allowJs: true,
    module: monaco.languages.typescript.ModuleKind.UMD
  });

  var timeout = null;

  // minimal pollyfil for AbortController
  if (self.AbortController === undefined) {
    class AbortController {
      constructor() {
        this.signal = { aborted: false };
      }
      abort() {
        this.signal.aborted = true;
      }
    }
    console.warn("AbortController not available");
    self.AbortController = AbortController;
  }

  function checkPythonSourceCode(controller) {
    const data = new FormData();
    const checker_parameters = {
      code: editor.getValue()
    };
    // ZMI python scripts pass extra parameters to linter
    if (bound_names) {
      checker_parameters["bound_names"] = JSON.parse(bound_names);
      checker_parameters["params"] = document.querySelector(
        'input[name="params"]'
      ).value;
    }

    data.append("data", JSON.stringify(checker_parameters));
    fetch(portal_url + "/ERP5Site_checkPythonSourceCodeAsJSON", {
      method: "POST",
      body: data,
      signal: controller.signal
    })
      .then(response => response.json())
      .then(data => {
        monaco.editor.setModelMarkers(
          editor.getModel(),
          "pylint",
          data["annotations"].map(annotation => {
            return {
              startLineNumber: annotation.row + 1,
              endLineNumber: annotation.row + 1,
              startColumn: annotation.col,
              endColumn: Infinity,
              message: annotation.text,
              severity:
                annotation.type === "error"
                  ? monaco.MarkerSeverity.Error
                  : monaco.MarkerSeverity.Warning
            };
          })
        );
        timeout = null;
      }, e => {
        if (!e instanceof DOMException /* AbortError */ ) {
          throw e;
        }
        /* ignore aborted requests */
    });
  }

  var controller;
  editor.getModel().onDidChangeContent(event => {
    $textarea.value = editor.getValue();
    changed = true; /* global variable used in erp5.js for onbeforeunload event */
    if (mode == "python") {
      // debounced `checkPythonSourceCode`
      if (controller) {
        controller.abort();
      }
      controller = new AbortController();
      if (timeout) {
        clearTimeout(timeout);
      }
      function makeTimeoutFunction(ac){
        return () => checkPythonSourceCode(ac)
      }
      timeout = setTimeout(makeTimeoutFunction(controller), 3000);
    }
  });

  yapfDocumentFormattingProvider = {
    _provideFormattingEdits: function(model, range, options, token) {
      const controller = new AbortController();
      token.onCancellationRequested(() => {controller.abort()})
      const data = new FormData();
      data.append("data", JSON.stringify({code: model.getValue(), range:range}));
      return fetch(portal_url + "/ERP5Site_formatPythonSourceCode", {
        method: "POST",
        body: data,
        signal: controller.signal
      })
        .then(response => response.json())
        .then(data => {
          if (data.error){
            editor.revealLine(data.error_line);
            return;
          }
          if (data.changed) {
            return [
              {
                range: model.getFullModelRange(),
                text: data.formatted_code,
              },
            ];
          };
        }, e => {
          if (!e instanceof DOMException /* AbortError */ ) {
            throw e;
          }
          /* ignore aborted requests */
      });
    },
    provideDocumentRangeFormattingEdits: function(model, range, options, token){
      return this._provideFormattingEdits(model, range, options, token);
    },
    provideDocumentFormattingEdits: function(model, options, token) {
      return this._provideFormattingEdits(model, null, options, token);
    }
  }

  monaco.languages.registerDocumentFormattingEditProvider(
      'python',
      yapfDocumentFormattingProvider)
  monaco.languages.registerDocumentRangeFormattingEditProvider(
      'python',
      yapfDocumentFormattingProvider)

  monaco.languages.registerDefinitionProvider('python', {
      provideDefinition: async function(model, position, token) {
        const controller = new AbortController();
        token.onCancellationRequested(() => {controller.abort()})
        const data = new FormData();
        const complete_parameters = {
            code: model.getValue(),
            position: {line: position.lineNumber, column: position.column}
        };
        // ZMI python scripts pass extra parameters to linter
        if (bound_names) {
          complete_parameters["script_name"] = script_name;
          complete_parameters["bound_names"] = JSON.parse(bound_names);
          complete_parameters["params"] = document.querySelector(
            'input[name="params"]'
          ).value;
        }

        complete_parameters['xxx_definition'] = true;
        data.append("data", JSON.stringify(complete_parameters));

        return fetch(portal_url + "/ERP5Site_getPythonSourceCodeCompletionList", {
          method: "POST",
          body: data,
          signal: controller.signal
        })
          .then(response => response.json())
          .then(data => {
            var definitions = [];
            for (let i = 0; i < data.length; i++) {
              if (data[i].code) {
                // TODO: these models are not refreshed, if the file they refefer is modified,
                // they show outdated content.
                let definition_uri = monaco.Uri.from({
                  scheme: 'file',
                  path: data[i].uri,
                });
                let definition_model = monaco.editor.getModel(
                  definition_uri
                );

                if (!definition_model) {
                  definition_model = monaco.editor.createModel(
                    data[i].code,
                    'python',
                    definition_uri
                  );
                }
                data[i].uri = definition_model.uri;
              }
              definitions.push({
                range: data[i].range,
                uri: data[i].uri ? data[i].uri : model.uri,
              });
            }
            return definitions;
          }, e => {
            if (!(e instanceof DOMException) /* AbortError */ ) {
              throw e;
            }
            /* ignore aborted requests */
        });
        
      }
  });

  monaco.languages.registerCompletionItemProvider('python', {
    provideCompletionItems: async function(model, position, context, token) {
      const controller = new AbortController();
      token.onCancellationRequested(() => {controller.abort()})
      const data = new FormData();
      const complete_parameters = {
        code: model.getValue(),
        position: {line: position.lineNumber, column: position.column}
      };
      // ZMI python scripts pass extra parameters to linter
      if (bound_names) {
        complete_parameters["script_name"] = script_name;
        complete_parameters["bound_names"] = JSON.parse(bound_names);
        complete_parameters["params"] = document.querySelector(
          'input[name="params"]'
        ).value;
      }

      data.append("data", JSON.stringify(complete_parameters));
      return fetch(portal_url + "/ERP5Site_getPythonSourceCodeCompletionList", {
        method: "POST",
        body: data,
        signal: controller.signal
      })
        .then(response => response.json())
        .then(data => {
          return {suggestions: data.map(c => {
            c.kind = monaco.languages.CompletionItemKind[c._kind];
            // this makes monaco render documentation as markdown.
            c.documentation = {value: c.documentation};
            return c
          })};
        }, e => {
          if (!e instanceof DOMException /* AbortError */ ) {
            throw e;
          }
          /* ignore aborted requests */
      });
    }
  });
  monaco.languages.registerHoverProvider('python', {
    provideHover: function (model, position, token) {
      const controller = new AbortController();
      token.onCancellationRequested(() => {controller.abort()})
      const data = new FormData();
      const complete_parameters = {
        code: model.getValue(),
        position: {line: position.lineNumber, column: position.column}
      };
      // ZMI python scripts pass extra parameters to linter
      if (bound_names) {
        complete_parameters["script_name"] = script_name;
        complete_parameters["bound_names"] = JSON.parse(bound_names);
        complete_parameters["params"] = document.querySelector(
          'input[name="params"]'
        ).value;
      }
      complete_parameters['xxx_hover'] = true;
      data.append("data", JSON.stringify(complete_parameters));
      return fetch(portal_url + "/ERP5Site_getPythonSourceCodeCompletionList", {
        method: "POST",
        body: data,
        signal: controller.signal
      })
        .then(response => response.json())
        .then(data => {
          return {
            range: new monaco.Range(position.lineNumber, position.column, position.lineNumber, 0),
            contents: [
              { value: data }, // XXX
            ]
		    	}
        }, e => {
          if (!e instanceof DOMException /* AbortError */ ) {
            throw e;
          }
          /* ignore aborted requests */
      });
    }
  });


  if (mode === "python") {
    // Perform a first check when loading document.
    checkPythonSourceCode(new AbortController());
  }


  editor.addAction({
    id: "save",
    label: "Save",
    keybindings: [monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_S],
    precondition: null,
    keybindingContext: null,
    contextMenuGroupId: "navigation",
    contextMenuOrder: 1.5,
    run: function(ed) {
      return saveDocument();
    }
  });
};
</script>