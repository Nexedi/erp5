%% meta
{
  "title": "Python",
  "languages": {
    "js": {
      "pluginType": "language",
      "languageId": "js",
      "displayName": "Javascript",
      "codeMirrorMode": "javascript",
      "module": "window",
      "evaluator": "eval",
      "keybinding": "j",
      "url": ""
    },
    "py": {
      "languageId": "py",
      "displayName": "python",
      "codeMirrorMode": "python",
      "keybinding": "p",
      "url": "/pyodide_dev.js",
      "module": "pyodide",
      "evaluator": "runPython",
      "pluginType": "language"
    }
  },
  "lastExport": "2019-01-02T16:28:20.097Z"
}

%% plugin
{
  "languageId": "py",
  "displayName": "python",
  "codeMirrorMode": "python",
  "keybinding": "p",
  "url": "/pyodide_dev.js",
  "module": "pyodide",
  "evaluator": "runPython",
  "pluginType": "language"
}

%% js
pyodide.loadPackage('olapy')

%% code {"language":"py"}
import os

import pandas as pd
import pyodide
from olapy.core.services.xmla_lib import get_response

def olapy_response(dataframes_paths, mdx_query):
# dataframes = {'Facts': pd.read_csv(pyodide.open_url("olapy-data/cubes/sales/Facts.csv"), sep=';', encoding='utf8'),
#               'Product': pd.read_csv(pyodide.open_url("olapy-data/cubes/sales/Product.csv"), sep=';', encoding='utf8'),
#               'Geography': pd.read_csv(pyodide.open_url("olapy-data/cubes/sales/Geography.csv"), sep=';',
#                                        encoding='utf8')
#               }
    dataframes = {}
    for df_path in dataframes_paths:
        dataframes[os.path.splitext(os.path.basename(df_path))[0]] = pd.read_csv(pyodide.open_url(df_path), sep=';',
                                                                          encoding='utf8')
    xmla_request_params = {'cube': 'sales',
                           'properties': {'AxisFormat': 'TupleFormat', 'Format': 'Multidimensional',
                                          'Content': 'SchemaData',
                                          'Catalog': 'sales',
                                          'LocaleIdentifier': '1033', 'Timeout': '0'},
                           'mdx_query': mdx_query}

    return get_response(xmla_request_params=xmla_request_params, dataframes=dataframes,
                        output='xmla')  # or output='dict'

%% js
function get_olapy_response(dataframes_paths, mdx_query) {
  var reponse = pyodide.pyimport("olapy_response")
  return reponse(dataframes_paths, mdx_query)
}