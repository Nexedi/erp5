/**
 * Selenium extensions for the ERP5 project
 */


/**
 * Checks the element referenced by `locator` is a float equals to `text`.
 * Values are converted to float, to be format-independant (ie. 1 000 = 1000.0)
 */
Selenium.prototype.assertFloat = function(locator, text) {
    var actualValueText = getText(this.page().findElement(locator));
    var actualValue = parseFloat(actualValueText.replace(/ /g, "").replace(/&nbsp;/g, ""));
    var expectedValue = parseFloat(text.replace(/ /g, "").replace(/&nbsp;/g, ""));

    if (isNaN(actualValue)) {
        Assert.fail("Actual value "+ actualValueText +
                        " cannot be parsed as float");
    }
    Assert.matches(expectedValue.toString(), actualValue.toString());
};


/**
 * like assertFloat, but for the value of <input elements.
 */
Selenium.prototype.assertFloatValue = function(locator, text) {
    var actualValueText = getInputValue(this.page().findElement(locator));
    var actualValue = parseFloat(actualValueText.replace(/ /g, "").replace(/&nbsp;/g, ""));
    var expectedValue = parseFloat(text.replace(/ /g, "").replace(/&nbsp;/g, ""));

    if (isNaN(actualValue)) {
        Assert.fail("Actual value "+ actualValueText +
                        " cannot be parsed as float");
    }
    Assert.matches(expectedValue.toString(), actualValue.toString());
};


/**
 * Checks the portal status message.
 */
Selenium.prototype.assertPortalStatusMessage = function(text) {
    var psm_locator = "//div[@id='transition_message']";
    var actualValue = getText(this.page().findElement(psm_locator));
    Assert.matches(text, actualValue);
};

Selenium.prototype.doType = function(locator, newText) {
    if (typeof(netscape) != "undefined" && typeof(netscape.security.PrivilegeManager) != "undefined" ) {
      // On old firefox versions, we enable privilege to upload file in javascript.
      // The user needs to have signed.applets.codebase_principal_support set to true in about:config
      // This is done in prefs.js generated by product/ERP5Type/tests/runFunctionalTest.py
      // This approach no longer work in newer firefox versions https://developer.mozilla.org/en-US/docs/Bypassing_Security_Restrictions_and_Signing_Code
      // Without this, tests dealing with file upload will fail
      netscape.security.PrivilegeManager.enablePrivilege("UniversalFileRead");
    }
    var element = this.page().findElement(locator);
    this.page().replaceText(element, newText);
};

/*
 * Get the location of the current page. This function is missing in
 * Selenium 0.8 or later.
 */
Selenium.prototype.uteLocation = function() {
    return this.page().location || this.browserbot.getCurrentWindow().location;
};

Selenium.prototype.doPhantomRender = function(filename) {
    if (window.page && window.page.render) {
        page.render(filename);
    }
};

Selenium.prototype.assertElementPositionRangeTop = function(locator, range){
    var positionTop = parseFloat(this.getElementPositionTop(locator));
    /* example of range 450..455 */
    var rangeList = range.split("..");
    var minimumPositionTop = parseFloat(rangeList[0]);
    var maximumPositionTop = parseFloat(rangeList[1]);
    if (positionTop < minimumPositionTop || positionTop > maximumPositionTop ){
      Assert.fail(positionTop + " is not between " + minimumPositionTop + " and " + maximumPositionTop);
    }
};


/*
 * Upload/Load the PDF to the pdf.js viewer
 */

// As of now, we don't have a good way in erp5 to submit files using selenium,
// So, I have created this PDF specific function that loads the pdf.
// TODO: create a generic function to send keys and submit files.
Selenium.prototype.doOpenPDF = function() {
  this.browserbot.selectFrame('index=0');
  self = this;
  self.doWaitForPageToLoad();
  self.page().currentWindow.webViewerLoad('https://softinst67525.host.vifib.net/erp5/portal_skins/erp5_dms/pdf_js/pdf_test.pdf');
};

/*
 * Verify if the loaded pdf is correct
 */
Selenium.prototype.assertPDF = function(text) {
  var value = this.page().findElement('//*[@id="pageContainer1"]/div[2]/div[1]').innerHTML;
  Assert.matches(text, value);
};