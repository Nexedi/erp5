<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="Web Script" module="erp5.portal_type"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Access_contents_information_Permission</string> </key>
            <value>
              <tuple>
                <string>Anonymous</string>
                <string>Assignee</string>
                <string>Assignor</string>
                <string>Associate</string>
                <string>Auditor</string>
                <string>Manager</string>
                <string>Owner</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>_Add_portal_content_Permission</string> </key>
            <value>
              <tuple>
                <string>Assignee</string>
                <string>Assignor</string>
                <string>Manager</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>_Change_local_roles_Permission</string> </key>
            <value>
              <tuple>
                <string>Assignor</string>
                <string>Manager</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>_Modify_portal_content_Permission</string> </key>
            <value>
              <tuple>
                <string>Assignee</string>
                <string>Assignor</string>
                <string>Manager</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>_View_Permission</string> </key>
            <value>
              <tuple>
                <string>Anonymous</string>
                <string>Assignee</string>
                <string>Assignor</string>
                <string>Associate</string>
                <string>Auditor</string>
                <string>Manager</string>
                <string>Owner</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>categories</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
        <item>
            <key> <string>content_md5</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>default_reference</string> </key>
            <value> <string>gadget_erp5_field_listbox.js</string> </value>
        </item>
        <item>
            <key> <string>description</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>rjs_gadget_erp5_listbox_js</string> </value>
        </item>
        <item>
            <key> <string>language</string> </key>
            <value> <string>en</string> </value>
        </item>
        <item>
            <key> <string>portal_type</string> </key>
            <value> <string>Web Script</string> </value>
        </item>
        <item>
            <key> <string>short_title</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>text_content</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/*jslint indent: 2, maxerr: 3, nomen: true */\n
/*global window, document, rJS, URI, RSVP, loopEventListener,\n
  SimpleQuery, ComplexQuery, Query, Handlebars, console*/\n
(function (window, document, rJS, URI, RSVP, loopEventListener,\n
  SimpleQuery, ComplexQuery, Query, Handlebars, console) {\n
  "use strict";\n
  var gadget_klass = rJS(window),\n
    listbox_hidden_thead_source = gadget_klass.__template_element\n
                         .getElementById("listbox-hidden-thead-template")\n
                         .innerHTML,\n
    listbox_hidden_thead_template = Handlebars.compile(listbox_hidden_thead_source),\n
    listbox_show_thead_source = gadget_klass.__template_element\n
                         .getElementById("listbox-show-thead-template")\n
                         .innerHTML,\n
    listbox_show_thead_template = Handlebars.compile(listbox_show_thead_source),\n
\n
    listbox_hidden_tbody_source = gadget_klass.__template_element\n
                         .getElementById("listbox-hidden-tbody-template")\n
                         .innerHTML,\n
    listbox_hidden_tbody_template = Handlebars.compile(listbox_hidden_tbody_source),\n
    listbox_show_tbody_source = gadget_klass.__template_element\n
                         .getElementById("listbox-show-tbody-template")\n
                         .innerHTML,\n
    listbox_show_tbody_template = Handlebars.compile(listbox_show_tbody_source),\n
\n
    listbox_tfoot_source = gadget_klass.__template_element\n
                         .getElementById("listbox-tfoot-template")\n
                         .innerHTML,\n
    listbox_tfoot_template = Handlebars.compile(listbox_tfoot_source),\n
\n
    listbox_source = gadget_klass.__template_element\n
                         .getElementById("listbox-template")\n
                         .innerHTML,\n
    listbox_template = Handlebars.compile(listbox_source),\n
\n
    error_message_source = gadget_klass.__template_element\n
                         .getElementById("error-message-template")\n
                         .innerHTML,\n
    error_message_template = Handlebars.compile(error_message_source);\n
\n
\n
  function renderListboxThead(gadget, template) {\n
    if (template === undefined) {\n
      template = listbox_hidden_thead_template;\n
    }\n
    return gadget.translateHtml(template(\n
      {\n
        "head_value": gadget.props.head_value,\n
        "show_anchor": gadget.props.field_json.show_anchor\n
      }\n
    ));\n
  }\n
\n
\n
\n
  function renderEditableField(gadget, element) {\n
    var i,\n
      promise_list = [],\n
      uid_value_dict = {},\n
      uid_value,\n
      column,\n
      line,\n
      element_list = element.querySelectorAll(".editable_div");\n
    gadget.props.listbox_uid_dict = {};\n
    gadget.props.cell_gadget_list = [];\n
    function renderSubCell(element, sub_field_json) {\n
      return gadget.getFieldTypeGadgetUrl(sub_field_json.type)\n
        .push(function (gadget_url) {\n
          return gadget.declareGadget(gadget_url, {\n
            element: element\n
          });\n
        })\n
        .push(function (cell_gadget) {\n
          gadget.props.cell_gadget_list.push(cell_gadget);\n
          sub_field_json.editable = sub_field_json.editable && gadget.props.field_json.editable; // XXX \n
          return cell_gadget.render({field_json: sub_field_json});\n
        });\n
    }\n
    for (i = 0; i < element_list.length; i += 1) {\n
      column = element_list[i].getAttribute("column");\n
      line = element_list[i].getAttribute("line");\n
      if (gadget.props.listbox_uid_dict.key === undefined) {\n
        gadget.props.listbox_uid_dict.key = gadget.props.result.data.rows[line].value["listbox_uid:list"].key;\n
        gadget.props.listbox_uid_dict.value = [gadget.props.result.data.rows[line].value["listbox_uid:list"].value];\n
        uid_value_dict[gadget.props.result.data.rows[line].value["listbox_uid:list"].value] = null;\n
      } else {\n
        uid_value = gadget.props.result.data.rows[line].value["listbox_uid:list"].value;\n
        if (!uid_value_dict.hasOwnProperty(uid_value)) {\n
          uid_value_dict[uid_value] = null;\n
          gadget.props.listbox_uid_dict.value.push(uid_value);\n
        }\n
      }\n
      promise_list.push(renderSubCell(element_list[i],\n
        gadget.props.result.data.rows[line].value[gadget.props.field_json.column_list[column][0]] || ""));\n
    }\n
    return RSVP.all(promise_list);\n
  }\n
\n
  function renderListboxTbody(gadget, template) {\n
    var tmp;\n
    if (template === undefined) {\n
      template = listbox_hidden_tbody_template;\n
    }\n
\n
    return gadget.translateHtml(template(\n
      {\n
        "body_value": gadget.props.body_value,\n
        "show_ancher": gadget.props.field_json.show_anchor,\n
        "column_list": gadget.props.field_json.column_list\n
      }\n
    ))\n
      .push(function (my_html) {\n
        tmp = document.createElement("tbody");\n
        tmp.innerHTML = my_html;\n
        return renderEditableField(gadget, tmp);\n
      })\n
      .push(function () {\n
        var table =  gadget.props.element.querySelector("table"),\n
          tbody = table.querySelector("tbody");\n
        table.removeChild(tbody);\n
        table.appendChild(tmp);\n
      });\n
  }\n
\n
  function renderListboxTfoot(gadget) {\n
    return gadget.translateHtml(listbox_tfoot_template(\n
      {\n
        "colspan": gadget.props.foot.colspan,\n
        "previous_classname": gadget.props.foot.previous_classname,\n
        "previous_url": gadget.props.foot.previous_url,\n
        "record": gadget.props.foot.record,\n
        "next_classname": gadget.props.foot.next_classname,\n
        "next_url": gadget.props.foot.next_url\n
      }\n
    ));\n
  }\n
\n
\n
  function renderListbox(gadget) {\n
    return gadget.translateHtml(listbox_template(\n
      {\n
        "hide_class": gadget.props.hide_class\n
      }\n
    ));\n
  }\n
\n
\n
  function renderErrorMessage(gadget) {\n
    return gadget.getUrlFor({\n
      command: \'store_and_change\',\n
      options: {\n
        "extended_search": ""\n
      }\n
    })\n
      .push(function (url) {\n
        return gadget.translateHtml(error_message_template(\n
          {\n
            \'reset_url\' : url\n
          }\n
        ));\n
      });\n
  }\n
\n
  rJS(window)\n
    /////////////////////////////////////////////////////////////////\n
    // ready\n
    /////////////////////////////////////////////////////////////////\n
    // Init local properties\n
    .ready(function (g) {\n
      g.props = {\n
        cell_gadget_list: [],\n
        listbox_uid_dict: {}\n
      };\n
    })\n
\n
    // Assign the element to a variable\n
    .ready(function (g) {\n
      return g.getElement()\n
        .push(function (element) {\n
          g.props.element = element;\n
        });\n
    })\n
\n
    //////////////////////////////////////////////\n
    // acquired method\n
    //////////////////////////////////////////////\n
    .declareAcquiredMethod("jio_allDocs", "jio_allDocs")\n
    .declareAcquiredMethod("translateHtml", "translateHtml")\n
    .declareAcquiredMethod("getUrlFor", "getUrlFor")\n
    .declareAcquiredMethod("getUrlParameter", "getUrlParameter")\n
    .declareAcquiredMethod("getFieldTypeGadgetUrl", "getFieldTypeGadgetUrl")\n
    .declareAcquiredMethod("renderEditorPanel", "renderEditorPanel")\n
    .declareAcquiredMethod("redirect", "redirect")\n
    .declareAcquiredMethod("translate", "translate")\n
    //////////////////////////////////////////////\n
    // initialize the gadget content\n
    //////////////////////////////////////////////\n
    .declareMethod(\'render\', function (options) {\n
      var gadget = this,\n
        field_json = options.field_json,\n
        head_value = [],\n
        class_value,\n
        tmp,\n
        i,\n
        j;\n
\n
      gadget.props.field_json = field_json;\n
      gadget.props.extended_search = options.extended_search;\n
      gadget.props.hide_class = options.hide_enabled ? "" : "ui-disabled";\n
      gadget.props.sort_list = [];\n
\n
      //only display which is in listbox\'s column list\n
      if (field_json.sort_column_list.length) {\n
        field_json.sort_column_list = field_json.sort_column_list.filter(function (n) {\n
          for (i = 0; i < field_json.column_list.length; i += 1) {\n
            if (field_json.column_list[i][0] === n[0] && field_json.column_list[i][1] === n[1]) {\n
              return true;\n
            }\n
          }\n
          return false;\n
        });\n
      }\n
\n
      if (field_json.search_column_list.length) {\n
        field_json.search_column_list = field_json.search_column_list.filter(function (n) {\n
          for (i = 0; i < field_json.column_list.length; i += 1) {\n
            if (field_json.column_list[i][0] === n[0] && field_json.column_list[i][1] === n[1]) {\n
              return true;\n
            }\n
          }\n
          return false;\n
        });\n
      }\n
      field_json.search_column_list.push(["searchable_text", "Searchable Text"]);\n
\n
      return new RSVP.Queue()\n
        .push(function () {\n
          return renderListbox(gadget);\n
        })\n
        .push(function (my_html) {\n
          gadget.props.element.querySelector(".document_table").innerHTML = my_html;\n
          // XXX Fix in case of multiple listboxes\n
          return RSVP.all([\n
            gadget.getUrlParameter(field_json.key + \'_begin_from\'),\n
            gadget.getUrlParameter(field_json.key + \'_sort_list:json\')\n
          ]);\n
        })\n
        .push(function (all_result) {\n
          var result = all_result[0];\n
          gadget.props.sort_list = all_result[1] || [];\n
          if (result === undefined) {\n
            result = \'0\';\n
          }\n
          for (i = 0; i < gadget.props.field_json.column_list.length; i += 1) {\n
            class_value = "";\n
            for (j = 0; j < gadget.props.sort_list.length; j += 1) {\n
              tmp = gadget.props.sort_list[j].split(",");\n
              if (tmp[0] === gadget.props.field_json.column_list[i][0]) {\n
                if (tmp[1] === "ascending") {\n
                  class_value = "ui-icon-arrow-up";\n
                } else {\n
                  class_value = "ui-icon-arrow-down";\n
                }\n
                break;\n
              }\n
            }\n
            head_value.push({\n
              "data-i18n": field_json.column_list[i][1],\n
              "class_value": class_value,\n
              "text": field_json.column_list[i][1]\n
            });\n
          }\n
          gadget.props.head_value = head_value;\n
          gadget.props.begin_from = parseInt(result, 10) || 0;\n
          return renderListboxThead(gadget);\n
        })\n
        .push(function (my_html) {\n
          gadget.props.element.querySelector(".thead").innerHTML = my_html;\n
        });\n
    })\n
    .declareMethod(\'getListboxInfo\', function () {\n
      //XXXXX search column list is used for search editor to\n
      //construct search panel\n
      //hardcoded begin_from key to define search position\n
      return { "search_column_list": this.props.field_json.search_column_list,\n
               "begin_from": this.props.field_json.key + "_begin_from"};\n
    })\n
\n
    //////////////////////////////////////////////\n
    // render the listbox in an asynchronous way\n
    //////////////////////////////////////////////\n
    .declareService(function () {\n
      var gadget = this,\n
        props = gadget.props,\n
        field_json = props.field_json,\n
        begin_from = props.begin_from,\n
        url_query =  props.extended_search,\n
        query_string = new URI(field_json.query).query(true).query,\n
        lines = field_json.lines,\n
        select_list = [],\n
        dataset,\n
        counter,\n
        queue,\n
        i;\n
\n
      if (field_json.query === undefined) {\n
        gadget.props.element.querySelector(\'tfoot\').textContent = "Unsupported list method: \'" + field_json.list_method + "\'";\n
        return;\n
      }\n
     // function buildQueryString(previous, next) {\n
     //   return previous + next[0] + \':= "\' + url_query + \'" OR \';\n
     // }\n
\n
      if (url_query) {\n
        //query_string = field_json.column_list.reduce(buildQueryString, \' AND (\').replace(new RegExp("OR " + \'$\'), \')\');\n
        if (query_string) {\n
          query_string = \'(\' + query_string + \') AND (\' + url_query + \')\';\n
        } else {\n
          query_string = url_query;\n
        }\n
      }\n
\n
      for (i = 0; i < field_json.column_list.length; i += 1) {\n
        select_list.push(field_json.column_list[i][0]);\n
      }\n
      select_list.push("uid");\n
      queue = gadget.jio_allDocs({\n
        // XXX Not jIO compatible, but until a better api is found...\n
        "list_method_template": field_json.list_method_template,\n
        "query": query_string,\n
        "limit": [begin_from, lines + 1],\n
        "select_list": select_list,\n
        "sort_on": gadget.props.sort_list\n
      });\n
      queue\n
        .push(undefined, function (error) {\n
          //XXXXX hack to not crash interface\n
          //this will catch all error, not only search criteria invalid error\n
          console.warn(error);\n
          return renderErrorMessage(gadget)\n
            .push(function (error_html) {\n
              gadget.props.element.querySelector(".document_table").innerHTML = error_html;\n
              queue.cancel();\n
            });\n
        })\n
        .push(function (result) {\n
          var promise_list = [result];\n
          counter = Math.min(result.data.total_rows, lines);\n
          for (i = 0; i < counter; i += 1) {\n
            promise_list.push(\n
              gadget.getUrlFor({\n
                command: \'index\',\n
                options: {\n
                  jio_key: result.data.rows[i].id,\n
                  selection_index: begin_from + i,\n
                  query: query_string,\n
                  list_method_template: field_json.list_method_template,\n
                  "sort_list:json": gadget.props.sort_list\n
                }\n
              })\n
            );\n
          }\n
          return RSVP.all(promise_list);\n
\n
        }).push(function (result_list) {\n
          var j,\n
            result = result_list[0],\n
            value,\n
            body_value = [],\n
            tr_value = [],\n
            tmp_url;\n
          dataset = result;\n
          for (i = 0; i < counter; i += 1) {\n
            tmp_url = result_list[i + 1];\n
            tr_value = [];\n
            for (j = 0; j < field_json.column_list.length; j += 1) {\n
              value = result.data.rows[i].value[field_json.column_list[j][0]] || "";\n
              tr_value.push({\n
                "type": value.type,\n
                "editable": value.editable,\n
                "href": tmp_url,\n
                "text": value,\n
                "line": i,\n
                "column": j\n
              });\n
            }\n
            body_value.push({\n
              "value": result.data.rows[i].value.uid,\n
              "tr_value": tr_value\n
            });\n
          }\n
          gadget.props.body_value = body_value;\n
          gadget.props.result = result;\n
          return renderListboxTbody(gadget);\n
        }).push(function () {\n
          var prev_param = {},\n
            next_param = {};\n
          function setNext() {\n
            if (dataset.data.rows.length > lines) {\n
              next_param[gadget.props.field_json.key + \'_begin_from\'] = begin_from + lines;\n
            }\n
          }\n
\n
          if (begin_from === 0) {\n
            setNext();\n
          } else {\n
            prev_param[gadget.props.field_json.key + \'_begin_from\'] = begin_from - lines;\n
            setNext();\n
          }\n
          return RSVP.all([\n
            gadget.getUrlFor({command: \'change\', options: prev_param}),\n
            gadget.getUrlFor({command: \'change\', options: next_param})\n
          ]);\n
\n
        }).push(function (url_list) {\n
          var foot = {};\n
          foot.colspan = field_json.column_list.length;\n
          foot.default_colspan = foot.colspan;\n
          foot.previous_classname = "ui-btn ui-icon-carat-l ui-btn-icon-left responsive ui-first-child";\n
          foot.previous_url = url_list[0];\n
          foot.next_classname = "ui-btn ui-icon-carat-r ui-btn-icon-right responsive ui-last-child";\n
          foot.next_url = url_list[1];\n
          if ((begin_from === 0) && (counter === 0)) {\n
            foot.record = "No records";\n
          } else if ((dataset.data.rows.length <= lines) && (begin_from === 0)) {\n
            foot.record = counter + " Records";\n
          } else {\n
            foot.record = "Records " + (((begin_from + lines) / lines - 1) * lines + 1) + " - " + (((begin_from + lines) / lines - 1) * lines + counter);\n
          }\n
\n
          if (begin_from === 0) {\n
            foot.previous_classname += " ui-disabled";\n
          }\n
          if (dataset.data.rows.length <= lines) {\n
            foot.next_classname += " ui-disabled";\n
          }\n
          gadget.props.foot = foot;\n
          return renderListboxTfoot(gadget);\n
        }).push(function (my_html) {\n
          gadget.props.element.querySelector(".tfoot").innerHTML = my_html;\n
        });\n
      return queue;\n
    })\n
\n
\n
    .declareMethod("getContent", function () {\n
      var form_gadget = this,\n
        k,\n
        field_gadget,\n
        count = form_gadget.props.cell_gadget_list.length,\n
        data = {},\n
        queue = new RSVP.Queue();\n
\n
      function extendData(field_data) {\n
        var key;\n
        for (key in field_data) {\n
          if (field_data.hasOwnProperty(key)) {\n
            data[key] = field_data[key];\n
          }\n
        }\n
      }\n
\n
      for (k = 0; k < count; k += 1) {\n
        field_gadget = form_gadget.props.cell_gadget_list[k];\n
        // XXX Hack until better defined\n
        if (field_gadget.getContent !== undefined) {\n
          queue\n
            .push(field_gadget.getContent.bind(field_gadget))\n
            .push(extendData);\n
        }\n
      }\n
      return queue\n
        .push(function () {\n
          data[form_gadget.props.listbox_uid_dict.key] = form_gadget.props.listbox_uid_dict.value;\n
          return data;\n
        });\n
    })\n
    .declareService(function () {\n
      var gadget = this,\n
        url,\n
        options = {},\n
        sort_button = gadget.props.element.querySelector(\'button[name="Sort"]\');\n
      return loopEventListener(\n
        sort_button,\n
        "click",\n
        false,\n
        function () {\n
          url = "gadget_erp5_sort_editor.html";\n
          options.sort_column_list = gadget.props.field_json.sort_column_list;\n
          options.sort_list = gadget.props.sort_list;\n
          options.key = gadget.props.field_json.key + "_sort_list:json";\n
          return gadget.renderEditorPanel(url, options);\n
        }\n
      );\n
    })\n
    .declareService(function () {\n
      var gadget = this,\n
        hide_button = gadget.props.element.querySelector(\'button[name="Hide"]\');\n
      return loopEventListener(\n
        hide_button,\n
        "click",\n
        false,\n
        function () {\n
          return new RSVP.Queue()\n
            .push(function () {\n
              var i,\n
                all_hide_elements,\n
                query_list = [],\n
                search_query,\n
                thead_template,\n
                tbody_template,\n
                hide_button_html,\n
                hide_elements;\n
              if (gadget.props.foot.colspan === gadget.props.foot.default_colspan) {\n
                thead_template = listbox_show_thead_template;\n
                tbody_template = listbox_show_tbody_template;\n
                hide_button_html = "Submit";\n
                gadget.props.foot.colspan += 1;\n
              } else {\n
                //hide closed\n
                //maybe submit\n
                all_hide_elements = gadget.props.element.querySelectorAll(".hide_element");\n
                hide_elements = gadget.props.element.querySelectorAll(".hide_element:checked");\n
                //nothing selected, show all\n
                if (hide_elements.length === 0) {\n
                  return gadget.redirect({\n
                    command: \'store_and_change\',\n
                    options: {\n
                      "extended_search": ""\n
                    }\n
                  });\n
                }\n
\n
                if (hide_elements.length < all_hide_elements.length) {\n
                  for (i = 0; i < hide_elements.length; i += 1) {\n
                    query_list.push(new SimpleQuery({\n
                      key: "catalog.uid",\n
                      type: "simple",\n
                      value: hide_elements[i].getAttribute("value")\n
                    }));\n
                  }\n
                  search_query = new ComplexQuery({\n
                    operator: "OR",\n
                    query_list: query_list,\n
                    type: "complex"\n
                  });\n
                  return gadget.redirect({\n
                    command: \'store_and_change\',\n
                    options: {\n
                      "extended_search": Query.objectToSearchText(search_query)\n
                    }\n
                  });\n
                }\n
\n
                gadget.props.foot.colspan -= 1;\n
                hide_button_html = "Hide Rows";\n
                thead_template = listbox_hidden_thead_template;\n
                tbody_template = listbox_hidden_tbody_template;\n
              }\n
              return RSVP.all([\n
                renderListboxThead(gadget, thead_template),\n
                renderListboxTbody(gadget, tbody_template),\n
                renderListboxTfoot(gadget, listbox_tfoot_template),\n
                gadget.translate(hide_button_html)\n
              ]);\n
            })\n
            .push(function (all_innerHTML) {\n
              //change hide button\'s text\n
              hide_button.innerHTML = all_innerHTML[3];\n
              gadget.props.element.querySelector(".thead").innerHTML = all_innerHTML[0];\n
              gadget.props.element.querySelector(".tfoot").innerHTML = all_innerHTML[2];\n
            });\n
        }\n
      );\n
    })\n
\n
    .allowPublicAcquisition("notifyInvalid", function () {\n
      return;\n
    })\n
\n
    .allowPublicAcquisition("notifyValid", function () {\n
      return;\n
    });\n
\n
}(window, document, rJS, URI, RSVP, loopEventListener,\n
  SimpleQuery, ComplexQuery, Query, Handlebars, console));

]]></string> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>Gadget ERP5 Listbox JS</string> </value>
        </item>
        <item>
            <key> <string>version</string> </key>
            <value> <string>001</string> </value>
        </item>
        <item>
            <key> <string>workflow_history</string> </key>
            <value>
              <persistent> <string encoding="base64">AAAAAAAAAAI=</string> </persistent>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
  <record id="2" aka="AAAAAAAAAAI=">
    <pickle>
      <global name="PersistentMapping" module="Persistence.mapping"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>data</string> </key>
            <value>
              <dictionary>
                <item>
                    <key> <string>document_publication_workflow</string> </key>
                    <value>
                      <persistent> <string encoding="base64">AAAAAAAAAAM=</string> </persistent>
                    </value>
                </item>
                <item>
                    <key> <string>edit_workflow</string> </key>
                    <value>
                      <persistent> <string encoding="base64">AAAAAAAAAAQ=</string> </persistent>
                    </value>
                </item>
                <item>
                    <key> <string>processing_status_workflow</string> </key>
                    <value>
                      <persistent> <string encoding="base64">AAAAAAAAAAU=</string> </persistent>
                    </value>
                </item>
              </dictionary>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
  <record id="3" aka="AAAAAAAAAAM=">
    <pickle>
      <global name="WorkflowHistoryList" module="Products.ERP5Type.patches.WorkflowTool"/>
    </pickle>
    <pickle>
      <tuple>
        <none/>
        <list>
          <dictionary>
            <item>
                <key> <string>action</string> </key>
                <value> <string>publish_alive</string> </value>
            </item>
            <item>
                <key> <string>actor</string> </key>
                <value> <string>romain</string> </value>
            </item>
            <item>
                <key> <string>comment</string> </key>
                <value> <string></string> </value>
            </item>
            <item>
                <key> <string>error_message</string> </key>
                <value> <string></string> </value>
            </item>
            <item>
                <key> <string>time</string> </key>
                <value>
                  <object>
                    <klass>
                      <global name="DateTime" module="DateTime.DateTime"/>
                    </klass>
                    <tuple>
                      <none/>
                    </tuple>
                    <state>
                      <tuple>
                        <float>1406898405.51</float>
                        <string>GMT</string>
                      </tuple>
                    </state>
                  </object>
                </value>
            </item>
            <item>
                <key> <string>validation_state</string> </key>
                <value> <string>published_alive</string> </value>
            </item>
          </dictionary>
        </list>
      </tuple>
    </pickle>
  </record>
  <record id="4" aka="AAAAAAAAAAQ=">
    <pickle>
      <global name="WorkflowHistoryList" module="Products.ERP5Type.patches.WorkflowTool"/>
    </pickle>
    <pickle>
      <tuple>
        <none/>
        <list>
          <dictionary>
            <item>
                <key> <string>action</string> </key>
                <value> <string>edit</string> </value>
            </item>
            <item>
                <key> <string>actor</string> </key>
                <value> <string>zope</string> </value>
            </item>
            <item>
                <key> <string>comment</string> </key>
                <value>
                  <none/>
                </value>
            </item>
            <item>
                <key> <string>error_message</string> </key>
                <value> <string></string> </value>
            </item>
            <item>
                <key> <string>serial</string> </key>
                <value> <string>949.2121.3637.17544</string> </value>
            </item>
            <item>
                <key> <string>state</string> </key>
                <value> <string>current</string> </value>
            </item>
            <item>
                <key> <string>time</string> </key>
                <value>
                  <object>
                    <klass>
                      <global name="DateTime" module="DateTime.DateTime"/>
                    </klass>
                    <tuple>
                      <none/>
                    </tuple>
                    <state>
                      <tuple>
                        <float>1455022186.29</float>
                        <string>UTC</string>
                      </tuple>
                    </state>
                  </object>
                </value>
            </item>
          </dictionary>
        </list>
      </tuple>
    </pickle>
  </record>
  <record id="5" aka="AAAAAAAAAAU=">
    <pickle>
      <global name="WorkflowHistoryList" module="Products.ERP5Type.patches.WorkflowTool"/>
    </pickle>
    <pickle>
      <tuple>
        <none/>
        <list>
          <dictionary>
            <item>
                <key> <string>action</string> </key>
                <value> <string>detect_converted_file</string> </value>
            </item>
            <item>
                <key> <string>actor</string> </key>
                <value> <string>romain</string> </value>
            </item>
            <item>
                <key> <string>comment</string> </key>
                <value> <string></string> </value>
            </item>
            <item>
                <key> <string>error_message</string> </key>
                <value> <string></string> </value>
            </item>
            <item>
                <key> <string>external_processing_state</string> </key>
                <value> <string>converted</string> </value>
            </item>
            <item>
                <key> <string>serial</string> </key>
                <value> <string>0.0.0.0</string> </value>
            </item>
            <item>
                <key> <string>time</string> </key>
                <value>
                  <object>
                    <klass>
                      <global name="DateTime" module="DateTime.DateTime"/>
                    </klass>
                    <tuple>
                      <none/>
                    </tuple>
                    <state>
                      <tuple>
                        <float>1405429753.25</float>
                        <string>GMT</string>
                      </tuple>
                    </state>
                  </object>
                </value>
            </item>
          </dictionary>
        </list>
      </tuple>
    </pickle>
  </record>
</ZopeData>
