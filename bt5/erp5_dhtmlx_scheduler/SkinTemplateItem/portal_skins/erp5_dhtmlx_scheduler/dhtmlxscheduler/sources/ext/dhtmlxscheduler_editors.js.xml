<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts65189553.46</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>dhtmlxscheduler_editors.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/*\r\n
@license\r\n
dhtmlxScheduler v.4.3.1 \r\n
\r\n
This software is covered by GPL license. You also can obtain Commercial or Enterprise license to use it in non-GPL project - please contact sales@dhtmlx.com. Usage without proper license is prohibited.\r\n
\r\n
(c) Dinamenta, UAB.\r\n
*/\r\n
scheduler.form_blocks[\'combo\']={\r\n
\trender:function(sns) {\r\n
\t\tif (!sns.cached_options)\r\n
\t\t\tsns.cached_options = {};\r\n
\t\tvar res = \'\';\r\n
\t\tres += "<div class=\'"+sns.type+"\' style=\'height:"+(sns.height||20)+"px;\' ></div>";\r\n
\t\treturn res;\r\n
\t},\r\n
\tset_value:function(node,value,ev,config){\r\n
\t\t(function(){\r\n
\t\t\tresetCombo();\r\n
\t\t\tvar id = scheduler.attachEvent("onAfterLightbox",function(){\r\n
\t\t\t\t// otherwise destructor will never be called after form reset(e.g. in readonly event mode)\r\n
\t\t\t\tresetCombo();\r\n
\t\t\t\tscheduler.detachEvent(id);\r\n
\t\t\t});\r\n
\t\t\tfunction resetCombo(){\r\n
\t\t\t\tif(node._combo && node._combo.DOMParent) {\r\n
\t\t\t\t\tvar combo = node._combo;\r\n
\t\t\t\t\tif(combo.unload){\r\n
\t\t\t\t\t\tcombo.unload();\r\n
\t\t\t\t\t}else if(combo.destructor){\r\n
\t\t\t\t\t\tcombo.destructor();\r\n
\t\t\t\t\t}\r\n
\t\t\t\t\t// dhtmlxCombo 4.1.0 bug\r\n
\t\t\t\t\tcombo.DOMParent = combo.DOMelem = null;\r\n
\t\t\t\t}\r\n
\t\t\t}\r\n
\t\t})();\r\n
\t\twindow.dhx_globalImgPath = config.image_path||\'/\';\r\n
\t\tnode._combo = new dhtmlXCombo(node, config.name, node.offsetWidth-8);\r\n
\t\tif (config.onchange)\r\n
\t\t\tnode._combo.attachEvent("onChange", config.onchange);\r\n
\r\n
\t\tif (config.options_height)\r\n
\t\t\tnode._combo.setOptionHeight(config.options_height);\r\n
\t\tvar combo = node._combo;\r\n
\t\tcombo.enableFilteringMode(config.filtering, config.script_path||null, !!config.cache);\r\n
\t\t\r\n
\t\tif (!config.script_path) { // script-side filtration is used\r\n
\t\t\tvar all_options = [];\r\n
\t\t\tfor (var i = 0; i < config.options.length; i++) {\r\n
\t\t\t\tvar option = config.options[i];\r\n
\t\t\t\tvar single_option = [\r\n
\t\t\t\t\toption.key,\r\n
\t\t\t\t\toption.label,\r\n
\t\t\t\t\toption.css\r\n
\t\t\t\t];\r\n
\t\t\t\tall_options.push(single_option);\r\n
\t\t\t}\r\n
\t\t\tcombo.addOption(all_options);\r\n
\t\t\tif (ev[config.map_to]) {\r\n
\t\t\t\tvar index = combo.getIndexByValue(ev[config.map_to]);\r\n
\t\t\t\tcombo.selectOption(index);\r\n
\t\t\t}\r\n
\t\t} else { // server-side filtration is used\r\n
\t\t\tvar selected_id = ev[config.map_to];\r\n
\t\t\tif (selected_id) {\r\n
\t\t\t\tif (config.cached_options[selected_id]) {\r\n
\t\t\t\t\tcombo.addOption(selected_id, config.cached_options[selected_id]);\r\n
\t\t\t\t\tcombo.disable(1);\r\n
\t\t\t\t\tcombo.selectOption(0);\r\n
\t\t\t\t\tcombo.disable(0);\r\n
\t\t\t\t} else {\r\n
\t\t\t\t\tdhtmlxAjax.get(config.script_path+"?id="+selected_id+"&uid="+scheduler.uid(), function(result){\r\n
\t\t\t\t\t\tvar option = result.doXPath("//option")[0];\r\n
\t\t\t\t\t\tvar label = option.childNodes[0].nodeValue;\r\n
\t\t\t\t\t\tconfig.cached_options[selected_id] = label;\r\n
\t\t\t\t\t\tcombo.addOption(selected_id, label);\r\n
\t\t\t\t\t\tcombo.disable(1);\r\n
\t\t\t\t\t\tcombo.selectOption(0);\r\n
\t\t\t\t\t\tcombo.disable(0);\r\n
\t\t\t\t\t});\r\n
\t\t\t\t}\r\n
\t\t\t} else {\r\n
\t\t\t\tcombo.setComboValue("");\r\n
\t\t\t}\r\n
\t\t}\r\n
\t},\r\n
\tget_value:function(node,ev,config) {\r\n
\t\tvar selected_id = node._combo.getSelectedValue(); // value = key\r\n
\t\tif (config.script_path) {\r\n
\t\t\tconfig.cached_options[selected_id] = node._combo.getSelectedText();\r\n
\t\t}\r\n
\t\treturn selected_id;\r\n
\t},\r\n
\tfocus:function(node){\r\n
\t}\r\n
};\r\n
\r\n
scheduler.form_blocks[\'radio\']={\r\n
\trender:function(sns) {\r\n
\t\tvar res = \'\';\r\n
\t\tres += "<div class=\'dhx_cal_ltext dhx_cal_radio\' style=\'height:"+sns.height+"px;\' >";\r\n
\t\tfor (var i=0; i<sns.options.length; i++) {\r\n
\t\t\tvar id = scheduler.uid();\r\n
\t\t\tres += "<input id=\'"+id+"\' type=\'radio\' name=\'"+sns.name+"\' value=\'"+sns.options[i].key+"\'><label for=\'"+id+"\'>"+" "+sns.options[i].label+"</label>";\r\n
\t\t\tif(sns.vertical)\r\n
\t\t\t\tres += "<br/>";\r\n
\t\t}\r\n
\t\tres += "</div>";\r\n
\t\t\r\n
\t\treturn res;\r\n
\t},\r\n
\tset_value:function(node,value,ev,config){\r\n
\t\tvar radiobuttons = node.getElementsByTagName(\'input\');\r\n
\t\tfor (var i = 0; i < radiobuttons.length; i++) {\r\n
\t\t\tradiobuttons[i].checked = false;\r\n
\t\t\tvar checked_value = ev[config.map_to]||value;\r\n
\t\t\tif (radiobuttons[i].value == checked_value) {\r\n
\t\t\t\tradiobuttons[i].checked = true;\r\n
\t\t\t}\r\n
\t\t}\r\n
\t},\r\n
\tget_value:function(node,ev,config){\r\n
\t\tvar radiobuttons = node.getElementsByTagName(\'input\');\r\n
\t\tfor(var i=0; i<radiobuttons.length; i++) {\r\n
\t\t\tif(radiobuttons[i].checked) {\r\n
\t\t\t\treturn radiobuttons[i].value;\r\n
\t\t\t}\r\n
\t\t}\r\n
\t},\r\n
\tfocus:function(node){\r\n
\t}\r\n
};\r\n
\r\n
scheduler.form_blocks[\'checkbox\']={\r\n
\trender:function(sns) {\r\n
\t\tif (scheduler.config.wide_form)\r\n
\t\t\treturn \'<div class="dhx_cal_wide_checkbox" \'+(sns.height?("style=\'height:"+sns.height+"px;\'"):"")+\'></div>\';\r\n
\t\telse\r\n
\t\t\treturn \'\';\r\n
\t},\r\n
\tset_value:function(node,value,ev,config){\r\n
\t\tnode=document.getElementById(config.id);\r\n
\t\tvar id = scheduler.uid();\r\n
\t\tvar isChecked = (typeof config.checked_value != "undefined") ? value == config.checked_value : !!value;\r\n
\t\tnode.className += " dhx_cal_checkbox";\r\n
\t\tvar check_html = "<input id=\'"+id+"\' type=\'checkbox\' value=\'true\' name=\'"+config.name+"\'"+((isChecked)?"checked=\'true\'":\'\')+"\'>"; \r\n
\t\tvar label_html = "<label for=\'"+id+"\'>"+(scheduler.locale.labels["section_"+config.name]||config.name)+"</label>";\r\n
\t\tif (scheduler.config.wide_form){\r\n
\t\t\tnode.innerHTML = label_html;\r\n
\t\t\tnode.nextSibling.innerHTML=check_html;\r\n
\t\t} else \r\n
\t\t\tnode.innerHTML=check_html+label_html;\r\n
\r\n
\t\tif (config.handler) {\r\n
\t\t\tvar checkbox = node.getElementsByTagName(\'input\')[0];\r\n
\t\t\tcheckbox.onclick = config.handler;\r\n
\t\t}\r\n
\t},\r\n
\tget_value:function(node,ev,config){\r\n
\t\tnode=document.getElementById(config.id);\r\n
\t\tvar checkbox = node.getElementsByTagName(\'input\')[0]; // moved to the header\r\n
\t\tif (!checkbox)\r\n
\t\t\tcheckbox = node.nextSibling.getElementsByTagName(\'input\')[0];\r\n
\t\treturn (checkbox.checked)?(config.checked_value||true):(config.unchecked_value||false);\r\n
\t},\r\n
\tfocus:function(node){\r\n
\t}\r\n
};\r\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>5593</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
