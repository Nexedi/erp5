<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts65189555.47</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>dhtmlxscheduler_outerdrag.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/*\r\n
@license\r\n
dhtmlxScheduler v.4.3.1 \r\n
\r\n
This software is covered by GPL license. You also can obtain Commercial or Enterprise license to use it in non-GPL project - please contact sales@dhtmlx.com. Usage without proper license is prohibited.\r\n
\r\n
(c) Dinamenta, UAB.\r\n
*/\r\n
// lame old code doesn\'t provide raw event object\r\n
scheduler.attachEvent("onTemplatesReady", function() {\r\n
\tvar dragger = (new dhtmlDragAndDropObject());\r\n
\tvar old = dragger.stopDrag;\r\n
\tvar last_event;\r\n
\tdragger.stopDrag = function(e) {\r\n
\t\tlast_event = e || event;\r\n
\t\treturn old.apply(this, arguments);\r\n
\t};\r\n
\tdragger.addDragLanding(scheduler._els["dhx_cal_data"][0], {\r\n
\t\t_drag: function(sourceHtmlObject, dhtmlObject, targetHtmlObject, targetHtml) {\r\n
\r\n
\t\t\tif (scheduler.checkEvent("onBeforeExternalDragIn") && !scheduler.callEvent("onBeforeExternalDragIn", [sourceHtmlObject, dhtmlObject, targetHtmlObject, targetHtml, last_event]))\r\n
\t\t\t\treturn;\r\n
\r\n
\t\t\tvar temp = scheduler.attachEvent("onEventCreated", function(id) {\r\n
\t\t\t\tif (!scheduler.callEvent("onExternalDragIn", [id, sourceHtmlObject, last_event])) {\r\n
\t\t\t\t\tthis._drag_mode = this._drag_id = null;\r\n
\t\t\t\t\tthis.deleteEvent(id);\r\n
\t\t\t\t}\r\n
\t\t\t});\r\n
\r\n
\t\t\tvar action_data = scheduler.getActionData(last_event);\r\n
\t\t\tvar event_data = {\r\n
\t\t\t\tstart_date: new Date(action_data.date)\r\n
\t\t\t};\r\n
\r\n
\t\t\t// custom views, need to assign section id, fix dates\r\n
\t\t\tif (scheduler.matrix && scheduler.matrix[scheduler._mode]) {\r\n
\t\t\t\tvar view_options = scheduler.matrix[scheduler._mode];\r\n
\t\t\t\tevent_data[view_options.y_property] = action_data.section;\r\n
\r\n
\t\t\t\tvar pos = scheduler._locate_cell_timeline(last_event);\r\n
\t\t\t\tevent_data.start_date = view_options._trace_x[pos.x];\r\n
\t\t\t\tevent_data.end_date = scheduler.date.add(event_data.start_date, view_options.x_step, view_options.x_unit);\r\n
\t\t\t}\r\n
\t\t\tif (scheduler._props && scheduler._props[scheduler._mode]) {\r\n
\t\t\t\tevent_data[scheduler._props[scheduler._mode].map_to] = action_data.section;\r\n
\t\t\t}\r\n
\r\n
\t\t\tscheduler.addEventNow(event_data);\r\n
\r\n
\t\t\tscheduler.detachEvent(temp);\r\n
\r\n
\t\t},\r\n
\t\t_dragIn: function(htmlObject, shtmlObject) {\r\n
\t\t\treturn htmlObject;\r\n
\t\t},\r\n
\t\t_dragOut: function(htmlObject) {\r\n
\t\t\treturn this;\r\n
\t\t}\r\n
\t});\r\n
});\r\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>2175</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
