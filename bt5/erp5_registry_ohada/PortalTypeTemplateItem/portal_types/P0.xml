<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="ERP5TypeInformation" module="Products.ERP5Type.ERP5Type"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_property_domain_dict</string> </key>
            <value>
              <dictionary>
                <item>
                    <key> <string>short_title</string> </key>
                    <value>
                      <persistent> <string encoding="base64">AAAAAAAAAAI=</string> </persistent>
                    </value>
                </item>
                <item>
                    <key> <string>title</string> </key>
                    <value>
                      <persistent> <string encoding="base64">AAAAAAAAAAM=</string> </persistent>
                    </value>
                </item>
              </dictionary>
            </value>
        </item>
        <item>
            <key> <string>acquire_local_roles</string> </key>
            <value> <int>0</int> </value>
        </item>
        <item>
            <key> <string>content_icon</string> </key>
            <value> <string>document_icon.gif</string> </value>
        </item>
        <item>
            <key> <string>content_meta_type</string> </key>
            <value> <string>ERP5 Text Document</string> </value>
        </item>
        <item>
            <key> <string>description</string> </key>
            <value> <string>      Document is an abstract class with all methods\n
      related to document management in ERP5. This includes\n
      searchable text, explicit relations, implicit relations,\n
      metadata, versions, languages, etc.\n
\n
      Documents may either store their content directly or\n
      cache content which is retrieved from a specified URL.\n
      The second case if often referred as "External Document".\n
      Standalone "External Documents" may be created by specifying\n
      a URL to the contribution tool which is in charge of initiating\n
      the download process and selecting the appropriate document type.\n
      Groups of "External Documents" may also be generated from\n
      so-called "External Source" (refer to ExternalSource class\n
      for more information).\n
\n
      External Documents may be downloaded once or updated at\n
      regular interval. The later can be useful to update the content\n
      of an external source. Previous versions may be stored\n
      in place or kept in a separate file. This feature\n
      is known as the crawling API. It is mostly implemented\n
      in ContributionTool with wrappers in the Document class.\n
      It can be useful for create a small search engine.\n
\n
      There are currently two types of Document subclasses:\n
\n
      * File for binary file based documents. File\n
        has subclasses such as Image, OOoDocument,\n
        PDFDocument, etc. to implement specific conversion\n
        methods.\n
\n
      * TextDocument for text based documents. TextDocument\n
        has subclasses such as Wiki to implement specific\n
        methods. TextDocument itself has a subclass\n
        (XSLTDocument) which provides XSLT based analysis\n
        and transformation of XML content based on XSLT\n
        templates. \n
\n
      Document classes which implement conversion should use\n
      the ConversionCacheMixin class so that converted values are\n
      stored inside ZODB and do not need to be recalculated.\n
      More generally, conversion should be achieved through\n
      the convert method and other methods of the conversion\n
      API (convertToBaseFormat, etc.). Moreover, any Document\n
      subclass must ne able to convert documents to text\n
      (asText method) and HTML (asHTML method). Text is required\n
      for full text indexing. HTML is required for crawling.\n
\n
      Instances can be created directly, or via portal_contributions tool\n
      which manages document ingestion process whereby a file can be uploaded\n
      by http or sent in by email or dropped in by webdav or in some other\n
      way as yet unknown. The ingestion process has the following steps:\n
\n
      (1) portal type detection\n
      (2) object creation and upload of data\n
      (3) metadata discovery (optionally with conversion of data to another format)\n
      (4) other possible actions to finalise the ingestion (ex. by assigning\n
          a reference)\n
\n
      This class handles (3) and calls a ZMI script to do (4).\n
\n
      Metadata can be drawn from various sources:\n
\n
      input      -   data supplied with http request or set on the object during (2) (e.g.\n
                     discovered from email text)\n
      file_name  -   data which might be encoded in file name\n
      user_login -   information about user who is contributing the file\n
      content    -   data which might be derived from document content\n
\n
      If a certain property is defined in more than one source, it is set according to\n
      preference order returned by a script \n
         Document_getPreferredDocumentMetadataDiscoveryOrderList\n
         (or any type-based version since discovery is type dependent)\n
\n
      Methods for discovering metadata are:\n
\n
        getPropertyDictFromInput\n
        getPropertyDictFromFileName\n
        getPropertyDictFromUserLogin\n
        getPropertyDictFromContent\n
\n
      Methods for processing content are implemented either in \n
      Document class or in Base class:\n
\n
        getSearchableReferenceList (Base)\n
        getSearchableText (Base)\n
        index_html (overriden in Document subclasses)\n
\n
      Methods for handling relations are implemented either in \n
      Document class or in Base class:\n
\n
        getImplicitSuccessorValueList (Base)\n
        getImplicitPredecessorValueList (Base)\n
        getImplicitSimilarValueList (Base)\n
        getSimilarCloudValueList (Document)\n
\n
      Implicit relations consist in finding document references inside\n
      searchable text (ex. INV-23456) and deducting relations from that.\n
      Two customisable methods required. One to find a list of implicit references\n
      inside the content (getSearchableReferenceList) and one to convert a given\n
      document reference into a list of reference strings which could\n
      be present in other content (asSearchableReferenceList).\n
\n
      document.getSearchableReferenceList() returns\n
        [\n
         {\'reference\':\' INV-12367\'},\n
         {\'reference\': \'INV-1112\', \'version\':\'012}\', \n
         {\'reference\': \'AB-CC-DRK\', \'version\':\'011\', \'language\': \'en\'}\n
        ]\n
\n
      The Document class behaviour can be extended / customized through scripts\n
      (which are type-based so can be adjusted per portal type).\n
\n
      * Document_getPropertyDictFromUserLogin - finds a user (by user_login or from session)\n
        and returns properties which should be set on the document\n
\n
      * Document_getPropertyDictFromContent - analyzes document content and returns\n
        properties which should be set on the document\n
\n
      * Base_getImplicitSuccessorValueList - finds appropriate all documents\n
        referenced in the current content\n
\n
      * Base_getImplicitPredecessorValueList - finds document predecessors based on\n
        the document coordinates (can use only complete coordinates, or also partial)\n
\n
      * Document_getPreferredDocumentMetadataDiscoveryOrderList - returns an order\n
        in which metadata should be set/overwritten\n
\n
      * Document_finishIngestion - called by portal_activities after all the ingestion\n
        is completed (and after document has been converted, so text_content\n
        is available if the document has it)\n
\n
      * Document_getNewRevision - calculates revision number which should be set\n
        on this document. Implementation depends on revision numbering policy which\n
        can be very different. Interaction workflow should call setNewRevision method.\n
\n
      * Document_populateContent - analyses the document content and produces\n
        subcontent based on it (ex. images, news, etc.). This scripts can\n
        involve for example an XSLT transformation to process XML.\n
\n
      Subcontent: documents may include subcontent (files, images, etc.)\n
      so that publication of rich content can be path independent. Subcontent\n
      can also be used to help the rendering in HTML of complex documents\n
      such as ODF documents.\n
\n
    Consistency checking:\n
      Default implementation uses DocumentReferenceConstraint to check if the \n
      reference/language/version triplet is unique. Additional constraints\n
      can be added if necessary.\n
\n
    NOTE: Document.py supports a notion of revision which is very specific.\n
    The underlying concept is that, as soon as a document has a reference,\n
    the association of (reference, version, language) must be unique\n
    accross the whole system. This means that a given document in a given\n
    version in a given language is unique. The underlying idea is similar\n
    to the one in a Wiki system in which each page is unique and acts\n
    the the atom of collaboration. In the case of ERP5, if a team collaborates\n
    on a Text document written with an offline word processor, all\n
    updates should be placed inside the same object. A Contribution\n
    will thus modify an existing document, if allowed from security\n
    point of view, and increase the revision number. Same goes for\n
    properties (title). Each change generates a new revision.\n
</string> </value>
        </item>
        <item>
            <key> <string>factory</string> </key>
            <value> <string>addTextDocument</string> </value>
        </item>
        <item>
            <key> <string>filter_content_types</string> </key>
            <value> <int>1</int> </value>
        </item>
        <item>
            <key> <string>group_list</string> </key>
            <value>
              <tuple/>
            </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>P0</string> </value>
        </item>
        <item>
            <key> <string>init_script</string> </key>
            <value> <string>Form_init</string> </value>
        </item>
        <item>
            <key> <string>permission</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
  <record id="2" aka="AAAAAAAAAAI=">
    <pickle>
      <tuple>
        <global name="TranslationInformation" module="Products.ERP5Type.TranslationProviderBase"/>
        <tuple/>
      </tuple>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>domain_name</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>property_name</string> </key>
            <value> <string>short_title</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
  <record id="3" aka="AAAAAAAAAAM=">
    <pickle>
      <tuple>
        <global name="TranslationInformation" module="Products.ERP5Type.TranslationProviderBase"/>
        <tuple/>
      </tuple>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>domain_name</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>property_name</string> </key>
            <value> <string>title</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
