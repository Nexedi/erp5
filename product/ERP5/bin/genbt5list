#! /usr/bin/python
##############################################################################
#
# Copyright (c) 2002 Nexedi SARL and Contributors. All Rights Reserved.
#                    Yoshinori Okuji <yo@nexedi.com>
#
# WARNING: This program as such is intended to be used by professional
# programmers who take the whole responsability of assessing all potential
# consequences resulting from its eventual inadequacies and bugs
# End users who are looking for a ready-to-use solution with commercial
# garantees and support are strongly adviced to contract a Free Software
# Service Company
#
# This program is Free Software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
##############################################################################


"""Generate repository information on Business Templates.
"""

import tarfile
import os
import sys
import tempfile
import shutil
import cgi
import hashlib

property_list = '''
title
version
revision
description
license
dependency_list
provision_list
copyright_list
'''.strip().splitlines()

bt_title_path = os.path.join('bt', 'title')

def info(message):
  """Print a message to stdout.
  """
  sys.stdout.write(message)

def err(message):
  """Print a message to stderr.
  """
  sys.stderr.write(message)

def readProperty(property_dict, property_name, property_file):
    try:
      text = property_file.read()
      if property_name.endswith('_list'):
        property_dict[property_name[:-5]] = text.splitlines()
      else:
        property_dict[property_name] = text
    finally:
      property_file.close()

def readBusinessTemplate(tar):
  """Read an archived Business Template info.
  """
  property_dict = {}
  filename_sha_dict = {}
  for info in tar:
    if info.isfile():
      _, name_list = info.name.split('/', 2)
      file_object = tar.extractfile(info)
      if name_list[1] == 'bt' and name_list[2] in property_list:
        readProperty(property_dict, name_list[2], file_object)
      else:
        filename_sha_dict[os.path.join(name_list)] = \
            hashlib.sha1(file_object.read()).hexdigest()

  return property_dict, filename_sha_dict

def readBusinessTemplateDirectory(dir):
  """Read Business Template Directory info.
  """
  property_dict = {}
  filename_sha_dict = {}
  for path, _, filename_list in os.walk(dir):
    for filename in filename_list:
      with open(os.path.join(path, filename), 'rb') as file_object:
        if path.split('/', 2)[1] == 'bt' and filename in property_list:
          readProperty(property_dict, filename, file_object)
        else:
          filename_sha_dict[os.path.join(path, filename)] = \
              hashlib.sha1(file_object.read()).hexdigest()

  return property_dict, filename_sha_dict

def generateInformation(fd):
  os.write(fd, '<?xml version="1.0"?>\n')
  os.write(fd, '<repository>\n')

  for file in sorted(os.listdir(os.getcwd())):
    if file.endswith('.bt5'):
      info('Reading %s... ' % (file,))
      try:
        tar = tarfile.open(file, 'r:gz')
      except tarfile.TarError:
        err('An error happened in %s; skipping\n' % (file,))
        continue
      try:
        property_dict, filename_sha_dict = readBusinessTemplate(tar)
      finally:
        tar.close()
    elif os.path.isfile(os.path.join(file, bt_title_path)):
      info('Reading Directory %s... ' % (file,))
      property_dict, filename_sha_dict = readBusinessTemplateDirectory(file)
    else:
      continue
    os.write(fd, '  <template id="%s">\n' % (file,))
    for property_id, property_value in sorted(property_dict.items()):
      if type(property_value) is str:
        os.write(fd, '    <%s>%s</%s>\n' % (
              property_id, cgi.escape(property_value), property_id))
      else:
        for value in property_value:
          os.write(fd, '    <%s>%s</%s>\n' % (
                property_id, cgi.escape(value), property_id))

    os.write(fd, '    <content>\n')
    for filename, sha in filename_sha_dict.iteritems():
      os.write(fd, '      <filename>\n')
      os.write(fd, '        <path>%s</path>\n' % filename)
      os.write(fd, '        <sha>%s</sha>\n' % sha)
      os.write(fd, '      </filename>\n')
    os.write(fd, '    </content>\n')

    os.write(fd, '  </template>\n')
    info('done\n')
  os.write(fd, '</repository>\n')

def main():
  if len(sys.argv) < 2:
    dir_list = ['.']
  else:
    dir_list = sys.argv[1:]

  cur_umask = os.umask(0666)
  os.umask(cur_umask)
  cwd = os.getcwd()
  for d in dir_list:
    os.chdir(d)
    try:
      fd, path = tempfile.mkstemp(dir='.')
      try:
        generateInformation(fd)
        os.fchmod(fd, 0666 & ~cur_umask)
        os.rename(path, 'bt5list')
      except:
        os.remove(path)
        raise
      finally:
        os.close(fd)
    finally:
      os.chdir(cwd)

if __name__ == "__main__":
  main()
