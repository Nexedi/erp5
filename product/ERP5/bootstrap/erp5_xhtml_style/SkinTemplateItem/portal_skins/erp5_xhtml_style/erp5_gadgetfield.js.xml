<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Cacheable__manager_id</string> </key>
            <value> <string>http_cache</string> </value>
        </item>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts52880321.72</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>erp5_gadgetfield.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/*global window, rJS, RSVP, document*/\n
/*jslint nomen: true, maxlen:80, indent:2*/\n
(function (window, document, rJS, RSVP) {\n
  "use strict";\n
  function promiseEventListener(target, type, useCapture) {\n
    //////////////////////////\n
    // Resolve the promise as soon as the event is triggered\n
    // eventListener is removed when promise is cancelled/resolved/rejected\n
    //////////////////////////\n
    var handle_event_callback;\n
\n
    function canceller() {\n
      target.removeEventListener(type, handle_event_callback, useCapture);\n
    }\n
\n
    function resolver(resolve) {\n
      handle_event_callback = function (evt) {\n
        canceller();\n
        evt.stopPropagation();\n
        evt.preventDefault();\n
        resolve(evt);\n
        return false;\n
      };\n
\n
      target.addEventListener(type, handle_event_callback, useCapture);\n
    }\n
    return new RSVP.Promise(resolver, canceller);\n
  }\n
\n
  function getMaxHeight(wrap_obj) {\n
    var height;\n
    if (wrap_obj) {\n
      height = window.innerHeight - wrap_obj.offsetTop - 280;\n
    } else {\n
      height = window.innerHeight;\n
    }\n
    if (height < 400) {\n
      height = 400;\n
    }\n
    return height + "px";\n
  }\n
\n
  rJS(window)\n
    /////////////////////////////////////////////////////////////////\n
    // ready\n
    /////////////////////////////////////////////////////////////////\n
    // Init local properties\n
    .ready(function (g) {\n
      g.props = {};\n
    })\n
\n
    // Assign the element to a variable\n
    .ready(function (g) {\n
      return g.getElement()\n
        .push(function (element) {\n
          g.props.element = element;\n
        });\n
    })\n
    /////////////////////////////////////////////////////////////////\n
    // declared methods\n
    /////////////////////////////////////////////////////////////////\n
    .allowPublicAcquisition(\'setFillStyle\', function () {\n
      var gadget = this,\n
        iframe = gadget.props.element.querySelector(\'iframe\'),\n
        height = getMaxHeight(iframe),\n
        width = "100%";\n
      iframe.setAttribute(\n
        \'style\',\n
        \'width: \' + width + \'; border: 0 none; height: \' + height\n
      );\n
      return {height: height, width: width};\n
    })\n
    .allowPublicAcquisition(\'triggerMaximize\', function () {\n
      var gadget = this,\n
        fullscreen_classname = "ui-content-fullscreen",\n
        info,\n
        wrap = gadget.props.element.querySelector(\'iframe\'),\n
        subiframe = wrap.contentDocument.querySelector(\'iframe\');\n
      if (wrap.className.search(" " + fullscreen_classname) === -1) {\n
        gadget.props.fullScreenRestore = {\n
          scrollTop: window.pageYOffset,\n
          scrollLeft: window.pageXOffset,\n
          width: wrap.width,\n
          height: wrap.height\n
        };\n
\n
        wrap.style.width = "100%";\n
        wrap.style.height = getMaxHeight();\n
        wrap.className += " " + fullscreen_classname;\n
        document.documentElement.style.overflow = "hidden";\n
      } else {\n
        wrap.className = wrap.className\n
          .replace(new RegExp("\\\\s*" + fullscreen_classname + "\\\\b"), "");\n
        document.documentElement.style.overflow = "";\n
        info = gadget.props.fullScreenRestore;\n
        // wrap.style.width = info.width;\n
        wrap.style.width = "100%";\n
        wrap.style.height = getMaxHeight(wrap);\n
        window.scrollTo(info.scrollLeft, info.scrollTop);\n
      }\n
      if (subiframe) {\n
        subiframe.style.height = wrap.style.height;\n
      }\n
    })\n
\n
    .allowPublicAcquisition(\'submitContent\', function () {\n
      return document.querySelector("button[name=\'Base_edit:method\']").click();\n
    })\n
    .declareService(function () {\n
      var g = this,\n
        i,\n
        list_gadget = document.getElementsByClassName("gadget"),\n
        all_gadget,\n
        list = [],\n
        gadget_attributes = [],\n
        url,\n
        form = g.props.element.querySelector("form"),\n
        scope,\n
        value,\n
        key,\n
        tmp;\n
      for (i = 0; i < list_gadget.length; i += 1) {\n
        url = list_gadget[i].getAttribute("data-gadget-url");\n
        key = list_gadget[i].getAttribute("data-gadget-editable");\n
        value = list_gadget[i].getAttribute("data-gadget-value");\n
        //renderable \n
        if (url !== undefined && url !== null) {\n
          tmp = {};\n
          scope = list_gadget[i].getAttribute("data-gadget-scope");\n
          list.push(g.getDeclaredGadget(scope));\n
          tmp.sandbox = list_gadget[i].getAttribute("data-gadget-sandbox");\n
          tmp.editable = key;\n
          tmp.key = key;\n
          tmp.value = value;\n
          gadget_attributes.push(tmp);\n
        }\n
      }\n
      return new RSVP.Queue()\n
        .push(function () {\n
          return RSVP.all(list);\n
        })\n
        .push(function (results) {\n
          all_gadget = results;\n
          list = [];\n
          for (i = 0; i < gadget_attributes.length; i += 1) {\n
            if (gadget_attributes[i].sandbox === "iframe") {\n
              list.push(all_gadget[i].getElement());\n
            }\n
          }\n
          return RSVP.all(list);\n
        })\n
        .push(function (elements) {\n
          var iframe,\n
            j,\n
            sub_value,\n
            sub_key;\n
          list = [];\n
          for (i = 0, j = 0; i < gadget_attributes.length; i += 1) {\n
            if (all_gadget[i].render !== undefined) {\n
              sub_value = gadget_attributes[i].value;\n
              sub_key = gadget_attributes[i].key;\n
              list.push(\n
                all_gadget[i].render(\n
                  {\n
                    "key": sub_key,\n
                    "value": sub_value\n
                  }\n
                )\n
              );\n
            }\n
            if (gadget_attributes[i].sandbox === "iframe") {\n
              iframe = elements[j].querySelector(\'iframe\');\n
              //xxx input field\n
              elements[j].parentNode.style.width = "100%";\n
              elements[j].parentNode.style.height = "100%";\n
              //xxx section div\n
              elements[j].style.width = "100%";\n
              elements[j].style.height = "100%";\n
              iframe.style.width = "100%";\n
              iframe.style.height = "100%";\n
              j += 1;\n
            }\n
          }\n
          return RSVP.all(list);\n
        })\n
        .push(function () {\n
          /*Do not use ajax call but submit an hidden form.\n
            So in this way, we can use form submit mecanisme\n
            provided by browser.\n
            if use ajax, we should get the return page manually\n
            which is difficult.\n
            The new hidden fields have been added with the \n
            gadget values and the submit button which \n
            has been activated (relation field image, save button, etc).\n
            This is done by listening the "click" event on the \n
            submit/image button.\n
            After all, submit the form manually again.\n
          */\n
          var input_images =\n
            g.props.element.querySelectorAll("input[type=\'image\']"),\n
            input_submits =\n
            g.props.element.querySelectorAll("button[type=\'submit\']");\n
          list = [];\n
          if (input_images.length || input_submits.length) {\n
            list.push(promiseEventListener(g.props.element, "submit", false));\n
            for (i = 0; i < input_images.length; i += 1) {\n
              list.push(promiseEventListener(input_images[i], "click", false));\n
            }\n
            for (i = 0; i < input_submits.length; i += 1) {\n
              list.push(promiseEventListener(input_submits[i], "click", false));\n
            }\n
            return RSVP.any(list);\n
          }\n
          return promiseEventListener(g.props.element, "submit", false);\n
        })\n
        .push(function (evt) {\n
          var input,\n
            hidden_button,\n
            target;\n
          list = [];\n
          if (evt.type === "click") {\n
            input = document.createElement("input");\n
            input.setAttribute("type", "hidden");\n
            target = evt.currentTarget || evt.target;\n
            input.setAttribute("name", target.getAttribute("name"));\n
            form.appendChild(input);\n
          } else {\n
            hidden_button = g.props.element.querySelector(".hidden_button");\n
            hidden_button.setAttribute("type", "hidden");\n
          }\n
          for (i = 0; i < all_gadget.length; i += 1) {\n
            if (all_gadget[i].getContent !== undefined &&\n
                gadget_attributes[i].editable !== null) {\n
              list.push(all_gadget[i].getContent());\n
            }\n
          }\n
          return RSVP.all(list);\n
        })\n
        .push(function (all_content) {\n
          var input,\n
            name;\n
          for (i = 0; i < all_content.length; i += 1) {\n
            for (name in all_content[i]) {\n
              if (all_content[i].hasOwnProperty(name)) {\n
                input = document.createElement("input");\n
                input.setAttribute("type", "hidden");\n
                input.setAttribute("name", name);\n
                input.setAttribute("value", all_content[i][name]);\n
                form.appendChild(input);\n
              }\n
            }\n
          }\n
        })\n
        .push(function () {\n
          form.submit();\n
        });\n
    });\n
}(window, document, rJS, RSVP));

]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>9114</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
