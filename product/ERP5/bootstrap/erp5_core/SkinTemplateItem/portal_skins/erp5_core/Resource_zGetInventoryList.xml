<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="SQL" module="Products.ZSQLMethods.SQL"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Use_Database_Methods_Permission</string> </key>
            <value>
              <list>
                <string>Member</string>
              </list>
            </value>
        </item>
        <item>
            <key> <string>allow_simple_one_argument_traversal</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>arguments_src</string> </key>
            <value> <string>from_table_list:list\r\n
from_expression\r\n
where_expression\r\n
order_by_expression\r\n
group_by_expression\r\n
selection_domain\r\n
select_expression\r\n
selection_report\r\n
ignore_variation\r\n
standardize\r\n
omit_simulation\r\n
only_accountable\r\n
omit_input\r\n
omit_output\r\n
input_simulation_state:list\r\n
output_simulation_state:list\r\n
precision\r\n
inventory_list\r\n
statistic\r\n
convert_quantity_result\r\n
quantity_unit_uid\r\n
stock_table_id=stock\r\n
transformed_uid\r\n
transformed_variation_text\r\n
group_by_time_sequence_list:list\r\n
interpolation_method\r\n
interpolation_method_from_date=not_applicable\r\n
interpolation_method_to_date=not_applicable\r\n
interpolation_method_at_date=not_applicable</string> </value>
        </item>
        <item>
            <key> <string>cache_time_</string> </key>
            <value> <int>0</int> </value>
        </item>
        <item>
            <key> <string>class_file_</string> </key>
            <value> <string>InventoryBrain</string> </value>
        </item>
        <item>
            <key> <string>class_name_</string> </key>
            <value> <string>InventoryListBrain</string> </value>
        </item>
        <item>
            <key> <string>connection_hook</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>connection_id</string> </key>
            <value> <string>erp5_sql_connection</string> </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>Resource_zGetInventoryList</string> </value>
        </item>
        <item>
            <key> <string>max_cache_</string> </key>
            <value> <int>100</int> </value>
        </item>
        <item>
            <key> <string>max_rows_</string> </key>
            <value> <int>0</int> </value>
        </item>
        <item>
            <key> <string>src</string> </key>
            <value> <string encoding="cdata"><![CDATA[

<dtml-let interpolation_ratio="SimulationTool_zGetInterpolationMethod(\n
  stock_table_id=stock_table_id,\n
  interpolation_method=interpolation_method,\n
  interpolation_method_from_date=interpolation_method_from_date,\n
  interpolation_method_to_date=interpolation_method_to_date,\n
  interpolation_method_at_date=interpolation_method_at_date,\n
  group_by_time_sequence_list=group_by_time_sequence_list,\n
  src__=1)">\n
\n
SELECT\n
<dtml-if expr="precision is not None">\n
  SUM(ROUND(\n
    <dtml-var stock_table_id>.quantity\n
    <dtml-if transformed_uid> * transformation.quantity</dtml-if>\n
    * <dtml-var interpolation_ratio>, <dtml-var precision>)) AS inventory,\n
  SUM(ROUND(\n
    <dtml-var stock_table_id>.quantity\n
    <dtml-if transformed_uid> * transformation.quantity</dtml-if>\n
    * <dtml-var interpolation_ratio>, <dtml-var precision>)) AS total_quantity,\n
  <dtml-if convert_quantity_result>\n
    SUM(ROUND(<dtml-var stock_table_id>.quantity * measure.quantity\n
      <dtml-if quantity_unit_uid> / quantity_unit_conversion.quantity</dtml-if>\n
    * <dtml-var interpolation_ratio>, <dtml-var precision>))\n
    AS converted_quantity,\n
  </dtml-if>\n
\n
  IFNULL(SUM(ROUND(\n
    <dtml-var stock_table_id>.total_price * <dtml-var interpolation_ratio>, <dtml-var precision>)), 0) AS total_price\n
<dtml-else>\n
  SUM(<dtml-var stock_table_id>.quantity\n
      <dtml-if transformed_uid> * transformation.quantity</dtml-if>\n
      * <dtml-var interpolation_ratio>\n
     ) AS inventory,\n
  SUM(<dtml-var stock_table_id>.quantity\n
      <dtml-if transformed_uid> * transformation.quantity</dtml-if>\n
      * <dtml-var interpolation_ratio>\n
     ) AS total_quantity,\n
  <dtml-if convert_quantity_result>\n
    ROUND(SUM(<dtml-var stock_table_id>.quantity * measure.quantity\n
      <dtml-if quantity_unit_uid> / quantity_unit_conversion.quantity</dtml-if>\n
      <dtml-if transformed_uid> * transformation.quantity</dtml-if> * <dtml-var interpolation_ratio>), 12)\n
    AS converted_quantity,\n
  </dtml-if>\n
  IFNULL(SUM(<dtml-var stock_table_id>.total_price * <dtml-var interpolation_ratio>), 0) AS total_price\n
</dtml-if>\n
<dtml-if inventory_list>\n
  ,\n
  <dtml-var stock_table_id>.node_uid AS node_uid,\n
  <dtml-var stock_table_id>.section_uid AS section_uid,\n
  <dtml-if transformed_uid>\n
    transformed_resource.title AS transformed_resource_title,\n
    transformed_resource.relative_url AS transformed_resource_relative_url,\n
    transformation.transformed_uid AS transformed_resource_uid,\n
    transformation.transformed_variation_text AS transformed_variation_text,\n
  </dtml-if>\n
  <dtml-var stock_table_id>.resource_uid AS resource_uid,\n
  <dtml-var stock_table_id>.variation_text AS variation_text,\n
  <dtml-var stock_table_id>.sub_variation_text AS sub_variation_text,\n
  <dtml-var stock_table_id>.uid AS stock_uid,\n
  <dtml-var stock_table_id>.date as date,\n
  <dtml-var stock_table_id>.mirror_date as mirror_date,\n
  <dtml-var stock_table_id>.simulation_state as simulation_state,\n
  <dtml-var stock_table_id>.mirror_section_uid as mirror_section_uid,\n
  <dtml-var stock_table_id>.payment_uid as payment_uid,\n
  <dtml-var stock_table_id>.mirror_node_uid as mirror_node_uid,\n
  <dtml-var stock_table_id>.function_uid as function_uid,\n
  <dtml-var stock_table_id>.project_uid as project_uid,\n
  <dtml-var stock_table_id>.funding_uid as funding_uid,\n
  <dtml-var stock_table_id>.payment_request_uid as payment_request_uid,\n
  catalog.path as path\n
</dtml-if>\n
<dtml-if statistic>\n
  ,\n
  COUNT(DISTINCT <dtml-var stock_table_id>.variation_text) AS variation_text,\n
  MAX(<dtml-var stock_table_id>.resource_uid) AS resource_uid,\n
  COUNT(DISTINCT <dtml-var stock_table_id>.uid) AS stock_uid,\n
  MAX(<dtml-var stock_table_id>.date) AS date\n
</dtml-if>\n
<dtml-if group_by_time_sequence_list>, slot_index </dtml-if> <dtml-comment>XXX is this really needed?</dtml-comment>\n
\n
<dtml-if select_expression>, <dtml-var select_expression></dtml-if>\n
\n
FROM\n
<dtml-if from_expression>\n
  <dtml-var from_expression>\n
<dtml-else>\n
  catalog\n
<dtml-in prefix="table" expr="from_table_list"> \n
  <dtml-if expr="table_key not in (\'catalog\', stock_table_id)">\n
  , <dtml-var table_item> AS <dtml-var table_key>\n
  </dtml-if>\n
</dtml-in>\n
, <dtml-var stock_table_id>\n
\n
   <dtml-if group_by_time_sequence_list>\n
     RIGHT JOIN\n
       ( <dtml-in prefix="time_slot" expr="_.list(_.enumerate(group_by_time_sequence_list))">\n
         SELECT\n
           <dtml-sqlvar expr="time_slot_key" type="int"> slot_index,\n
           <dtml-sqlvar expr="time_slot_item.get(\'from_date\')" type="datetime" optional> slot_from_date,\n
           <dtml-sqlvar expr="time_slot_item.get(\'at_date\')" type="datetime" optional> slot_at_date,\n
           <dtml-sqlvar expr="time_slot_item.get(\'to_date\')" type="datetime" optional> slot_to_date\n
\n
         <dtml-unless time_slot_end>UNION ALL</dtml-unless>\n
       </dtml-in> ) slots\n
     ON\n
     <dtml-if group_by_time_sequence_list>\n
     (\n
       ( slot_from_date is not null AND\n
        ( slot_at_date is not null AND\n
         GREATEST(`stock`.`date`, `stock`.`mirror_date`) >= slot_from_date AND\n
         LEAST(`stock`.`date`, `stock`.`mirror_date`) <= slot_at_date\n
        ) OR (\n
          (\n
            slot_to_date is not null AND\n
            GREATEST(`stock`.`date`, `stock`.`mirror_date`) >= slot_from_date AND\n
            LEAST(`stock`.`date`, `stock`.`mirror_date`) < slot_to_date\n
          ) OR (\n
            GREATEST(`stock`.`date`, `stock`.`mirror_date`) >= slot_from_date AND\n
            slot_at_date is null AND slot_to_date is null\n
          )\n
        )\n
       ) OR (\n
         slot_from_date is null AND (\n
           ( slot_at_date is not null AND\n
            ( LEAST(`stock`.`date`, `stock`.`mirror_date`) <= slot_at_date )\n
           ) OR  LEAST(`stock`.`date`, `stock`.`mirror_date`) < slot_to_date\n
         )\n
       )\n
     )\n
     <dtml-else>\n
     (\n
       ( slot_from_date is null OR stock.date >= slot_from_date )\n
       AND ( slot_at_date is null OR stock.date <= slot_at_date )\n
       AND ( slot_to_date is null OR stock.date < slot_to_date )\n
     )\n
     </dtml-if>\n
   </dtml-if>\n
\n
\n
\n
\n
</dtml-if>\n
<dtml-if quantity_unit_uid> <dtml-comment>XXX quantity unit conversion will not work when using implict_join=False</dtml-comment>\n
  LEFT JOIN quantity_unit_conversion ON \n
    (quantity_unit_conversion.resource_uid = <dtml-var stock_table_id>.resource_uid\n
    AND quantity_unit_conversion.quantity_unit_uid = <dtml-sqlvar quantity_unit_uid type=int>)\n
</dtml-if>\n
  <dtml-if selection_domain><dtml-let expression="portal_selections.buildSQLJoinExpressionFromDomainSelection(selection_domain, category_table_alias=\'domain_category\')"><dtml-if expression>, <dtml-var expression></dtml-if></dtml-let></dtml-if>\n
  <dtml-if selection_report><dtml-let expression="portal_selections.buildSQLJoinExpressionFromDomainSelection(selection_report, category_table_alias=\'report_category\')"><dtml-if expression>, <dtml-var expression></dtml-if></dtml-let></dtml-if>\n
  <dtml-if transformed_uid>, transformation, catalog as transformed_resource</dtml-if>\n
\n
WHERE\n
  <dtml-var stock_table_id>.uid = catalog.uid\n
<dtml-if where_expression>\n
  AND <dtml-var where_expression>\n
</dtml-if>\n
\n
<dtml-if transformed_uid>\n
  AND transformation.uid = <dtml-var stock_table_id>.resource_uid\n
  AND <dtml-var stock_table_id>.variation_text = transformation.variation_text\n
\n
  AND transformed_resource.uid = transformation.transformed_uid\n
  AND <dtml-sqltest transformed_uid column="transformation.transformed_uid" type=int multiple>\n
  <dtml-if transformed_variation_text>\n
  AND <dtml-sqltest transformed_variation_text column="transformation.transformed_variation_text" type=string>\n
  </dtml-if>\n
</dtml-if>\n
\n
<dtml-if omit_simulation>\n
  AND <dtml-var stock_table_id>.portal_type != \'Simulation Movement\'\n
</dtml-if>\n
<dtml-if only_accountable>\n
  AND <dtml-var stock_table_id>.is_accountable\n
</dtml-if>\n
<dtml-if selection_domain>\n
  AND <dtml-var "portal_selections.buildSQLExpressionFromDomainSelection(selection_domain, category_table_alias=\'domain_category\', join_table=stock_table_id, join_column=\'node_uid\')">\n
</dtml-if>\n
<dtml-if selection_report>\n
  AND <dtml-var "portal_selections.buildSQLExpressionFromDomainSelection(selection_report, category_table_alias=\'report_category\', strict_membership=1)">\n
</dtml-if>\n
\n
<dtml-if convert_quantity_result>\n
  AND concat(<dtml-var stock_table_id>.variation_text,\'\\n\') REGEXP measure.variation\n
</dtml-if>\n
\n
<dtml-if group_by_expression>\n
GROUP BY\n
    <dtml-if transformed_uid>transformation.transformed_uid,</dtml-if>\n
    <dtml-if group_by_time_sequence_list>slot_index,</dtml-if>\n
    <dtml-var group_by_expression>\n
\n
</dtml-if>\n
<dtml-if order_by_expression>\n
ORDER BY\n
  <dtml-var order_by_expression>\n
<dtml-else>\n
  <dtml-if group_by_time_sequence_list>\n
    ORDER BY slot_index\n
  </dtml-if>\n
</dtml-if>\n
</dtml-let>

]]></string> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string></string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
