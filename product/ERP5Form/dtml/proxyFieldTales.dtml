<dtml-var manage_page_header>
<dtml-var manage_tabs>

<main class="container-fluid">
<p class="form-help lead">
Edit <dtml-var meta_type> method TALES expressions here.
<dtml-if "not isTALESAvailable()"><br>
<span style="color: #FF0000;">
Zope Page Templates and therefore TALES is not installed.
This tab can therefore not be used.
</span>
</dtml-if>
</p>


<form action="manage_tales" method="POST">
<table class="table table-striped table-hover table-sm">


  <dtml-in "override_form.get_groups()">
  <dtml-let group=sequence-item fields="tales_form.get_fields_in_group(group)">

  <dtml-if fields>
  <tr>
  <td colspan="3" class="font-weight-bold">
    Proxy Widget properties
  </td>
  </tr>

  <dtml-var fieldListHeader>

  <dtml-let current_field="this()">
  <dtml-in fields>
  <dtml-let field=sequence-item field_id="field.id"
            value="current_field.get_tales(field.id)">
    <tr>
      <td>
        <dtml-var "field.title()">
      </td>
      <td>
        <dtml-var "field.render(value)">
      </td>
      <td>
        <dtml-var "current_field.form.get_field(field.id).meta_type">
      </td>
    </tr>
  </dtml-let>
  </dtml-in>
  </dtml-let>
  </dtml-if>
  </dtml-let>
  </dtml-in>

    <tr>
      <td>
        <div>Proxy Target</div>
      </td>
      <td>
        <a href="manage_tales_target" class="btn btn-info">Click to edit the target</a>
      </td>
      <td></td>
    </tr>

</table>
<table class="table table-striped table-hover table-sm">

<!-- XXX Loop until find not a proxy field -->
<dtml-let proxy_field="this()"
          current_field="None if proxy_field.getTemplateField() is None else proxy_field.getRecursiveTemplateField()">

  <dtml-if "current_field is not None">
    <dtml-let form="current_field.tales_form">

  <dtml-in "form.get_groups()">
    <dtml-let group=sequence-item fields="form.get_fields_in_group(group)">
      <dtml-if fields>
        <tr>
          <td colspan="4" class="font-weight-bold">
            <dtml-var group capitalize> properties
          </td>
        </tr>

        <dtml-var proxyFieldListHeader>

        <dtml-in fields>

          <dtml-let field=sequence-item field_id="field.id"
                    value="proxy_field.get_recursive_tales(field_id)">
            <tr>
              <td>
                <dtml-let checkbox_key="'surcharge_%s' % field_id" >
                  <dtml-if "proxy_field.is_delegated(field_id)">
                    <input type="checkbox" 
                           name="<dtml-var checkbox_key>" 
                           onclick="toggleFieldState(event)"
                           checked="checked" />
                  <dtml-else >
                    <input type="checkbox" 
                           onclick="toggleFieldState(event)"
                           name="<dtml-var checkbox_key>" />
                  </dtml-if >
                </dtml-let >
              </td>

              <td>
                <dtml-var "field.title()">
              </td>
              <dtml-if "proxy_field.is_delegated(field_id)">
                <td class="to_disable delegated">
                <dtml-var "field.render(value)">
                </td>
              <dtml-else >
                <td class="to_disable">
                  <dtml-var "field.render(value)">
                </td>
              </dtml-if>
              <td>
                <dtml-var "current_field.form.get_field(field.id).meta_type">
              </td>
            </tr>
          </dtml-let>

        </dtml-in>

      </dtml-if>
    </dtml-let>
  </dtml-in>

  </dtml-let>
  </dtml-if>
  </dtml-let>
</table>


<div class="zmi-controls">
  <input class="btn btn-primary" type="submit" name="submit" value="Save Changes" />
</div>


</form>
</main>
<script type="text/javascript">
function isClass(object, className) {
        if (object.className != undefined){
        return (object.className.search('(^|\\s)' + className + '(\\s|$)') != -1);
        }
        return false;
}
function GetElementsWithClassName(elementName,className) {
        var allElements = document.getElementsByTagName(elementName);
        var elemColl = new Array();
        for (i = 0; i< allElements.length; i++) {
                if (isClass(allElements[i], className)) {
                        elemColl[elemColl.length] = allElements[i];
                }
        }
        return elemColl;
}
function normalEvent() { return true; }
function ignoreEvent() { return false; }

var last_selected;
function registerSelection() {
  last_selected = this.selectedIndex;
}
function dontChangeSelection() {
  this.selectedIndex = last_selected;
}

var class_deletaged_list = GetElementsWithClassName('td','delegated');
for(var i=0; i<class_deletaged_list.length; i++) {
  var disable_children = class_deletaged_list[i].childNodes;
  for (var j=0; j<disable_children.length; j++) {
    var element = disable_children[j];
    if (element.type == 'hidden'){
      continue;
    }
    element.readOnly = true;
    if (element.type == 'checkbox'){
      element.onclick = ignoreEvent;
    } else if (element.tagName == 'SELECT') {
      element.onfocus = registerSelection;
      element.onchange = dontChangeSelection;
    }
  }
}

function toggleFieldState(evt) {
  evt=(evt)?evt:event;
  var target=(evt.target)?evt.target:evt.srcElement;
  tr_parent = target.parentNode.parentNode;
  allElements = tr_parent.childNodes;
  for (i=0; i<allElements.length; i++) {
    if (isClass(allElements[i], 'to_disable')) {
      var disable_children = allElements[i].childNodes;
      for (var j=0; j<disable_children.length; j++) {
        var field = disable_children[j];
        if (field.type == 'hidden'){
          continue;
        }
        if (field.readOnly){
          field.readOnly = false;
          if (field.type == 'checkbox'){
            field.onclick = normalEvent;
          } else if (field.tagName == 'SELECT') {
            field.onchange = normalEvent;
          }
        }
        else{
          field.readOnly = true;
          if (field.type == 'checkbox'){
            field.onclick = ignoreEvent;
          } else if (field.tagName == 'SELECT') {
            field.onfocus = registerSelection;
            field.onchange = dontChangeSelection;
          }
        }
      }
    }
  }
}
</script>
<dtml-var manage_page_footer>



