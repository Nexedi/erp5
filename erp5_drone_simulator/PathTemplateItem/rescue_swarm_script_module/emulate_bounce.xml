<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="Rescue Swarm Script" module="erp5.portal_type"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_Access_contents_information_Permission</string> </key>
            <value>
              <tuple>
                <string>Anonymous</string>
                <string>Assignee</string>
                <string>Assignor</string>
                <string>Associate</string>
                <string>Auditor</string>
                <string>Manager</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>_Add_portal_content_Permission</string> </key>
            <value>
              <tuple>
                <string>Assignee</string>
                <string>Assignor</string>
                <string>Manager</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>_Change_local_roles_Permission</string> </key>
            <value>
              <tuple>
                <string>Assignor</string>
                <string>Manager</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>_Modify_portal_content_Permission</string> </key>
            <value>
              <tuple>
                <string>Assignee</string>
                <string>Assignor</string>
                <string>Manager</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>_View_Permission</string> </key>
            <value>
              <tuple>
                <string>Anonymous</string>
                <string>Assignee</string>
                <string>Assignor</string>
                <string>Associate</string>
                <string>Auditor</string>
                <string>Manager</string>
              </tuple>
            </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>default_reference</string> </key>
            <value> <string>emulate_bounce</string> </value>
        </item>
        <item>
            <key> <string>description</string> </key>
            <value> <string>Bounce flight script: https://lab.nexedi.com/lpgeneau/flight-scripts/blob/update_loop/bouncy-flight.js</string> </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>emulate_bounce</string> </value>
        </item>
        <item>
            <key> <string>language</string> </key>
            <value>
              <none/>
            </value>
        </item>
        <item>
            <key> <string>portal_type</string> </key>
            <value> <string>Rescue Swarm Script</string> </value>
        </item>
        <item>
            <key> <string>text_content</string> </key>
            <value> <string encoding="cdata"><![CDATA[

const EPSILON = 70,\n
  EPSILON_ALTITUDE = 5,\n
  EPSILON_YAW = 6,\n
  FLIGH_ALTITUDE = 100,\n
  PARACHUTE_ALTITUDE = 35,\n
  RADIUS = 30.001,\n
  TARGET_YAW = 0,\n
  checkpoint_list = [\n
    {\n
      "latitude": 45.641,\n
      "longitude": 14.26472,\n
      "altitude": 604\n
    },\n
    {\n
      "latitude": 45.6463889,\n
      "longitude": 14.2516,\n
      "altitude": 642\n
    },\n
    {\n
      "latitude": 45.656,\n
      "longitude": 14.2516,\n
      "altitude": 596\n
    },\n
    {\n
      "latitude": 45.65916,\n
      "longitude": 14.255,\n
      "altitude": 634\n
    },\n
    {\n
      "latitude": 45.6527,\n
      "longitude": 14.2775,\n
      "altitude": 676\n
    },\n
    {\n
      "latitude": 45.6427,\n
      "longitude": 14.2519,\n
      "altitude": 589\n
    },\n
    {\n
      "latitude": 45.641,\n
      "longitude": 14.254,\n
      "altitude": 582\n
    },\n
    {\n
      "latitude": 45.6558,\n
      "longitude": 14.2775,\n
      "altitude": 686\n
    },\n
    {\n
      "latitude": 45.6594,\n
      "longitude": 14.271,\n
      "altitude": 667\n
    },\n
    {\n
      "latitude": 45.641,\n
      "longitude": 14.258,\n
      "altitude": 581\n
    },\n
    {\n
      "latitude": 45.653,\n
      "longitude": 14.2516,\n
      "altitude": 584\n
    },\n
    {\n
      "latitude": 45.6594,\n
      "longitude": 14.26194,\n
      "altitude": 633\n
    },\n
    {\n
      "latitude": 45.641,\n
      "longitude": 14.2716,\n
      "altitude": 621\n
    },\n
    {\n
      "latitude": 45.644,\n
      "longitude": 14.2775,\n
      "altitude": 642\n
    },\n
    {\n
      "latitude": 45.6594,\n
      "longitude": 14.26638,\n
      "altitude": 660\n
    },\n
    {\n
      "latitude": 45.6508,\n
      "longitude": 14.25194,\n
      "altitude": 591\n
    }\n
  ];\n
\n
function altitudeReached(altitude, target_altitude) {\n
  console.log(`[DEMO] Waiting for altitude... (${altitude} , ${target_altitude})`);\n
  return Math.abs(altitude - target_altitude) < EPSILON_ALTITUDE;\n
}\n
\n
function distance(lat1, lon1, lat2, lon2) {\n
  const R = 6371e3, // meters\n
    la1 = lat1 * Math.PI/180, // la, lo in radians\n
    la2 = lat2 * Math.PI/180,\n
    lo1 = lon1 * Math.PI/180,\n
    lo2 = lon2 * Math.PI/180;\n
\n
  //haversine formula\n
  const sin_lat = Math.sin((la2 - la1)/2),\n
    sin_lon = Math.sin((lo2 - lo1)/2),\n
    h = sin_lat*sin_lat + Math.cos(la1)*Math.cos(la2)*sin_lon*sin_lon;\n
  return 2*R*Math.asin(Math.sqrt(h));\n
}\n
\n
function exit_on_fail(ret, msg) {\n
  if (ret) {\n
    console.log(msg);\n
    me.exit(1);\n
  }\n
}\n
\n
me.onStart = function() {\n
  me.direction_set = false;\n
  me.init_alt_reached = false;\n
  me.landing_alt_reached = false;\n
  me.next_checkpoint = 0;\n
  me.parachute_triggered = false;\n
  me.start_altitude = me.getInitialAltitude() + FLIGH_ALTITUDE;\n
\n
  exit_on_fail(\n
    me.setAltitude(me.start_altitude + 1),\n
    "Failed to set start altitude");\n
};\n
\n
me.onUpdate = function(timestamp) {\n
  if (!me.init_alt_reached) {\n
    me.init_alt_reached = altitudeReached(me.getAltitudeAbs(), me.start_altitude);\n
    return;\n
  }\n
\n
  if (me.must_wait > 0) {\n
    if (!mustWait(timestamp)) {\n
      me.must_wait = 0;\n
      me.timestamp = 0;\n
    }\n
    return;\n
  }\n
\n
  if (!me.direction_set) {\n
    if (me.next_checkpoint < checkpoint_list.length) {\n
      exit_on_fail(\n
        me.setTargetCoordinates(\n
          checkpoint_list[me.next_checkpoint].latitude,\n
          checkpoint_list[me.next_checkpoint].longitude,\n
          checkpoint_list[me.next_checkpoint].altitude + FLIGH_ALTITUDE,\n
          RADIUS\n
        ),\n
        "Failed to set checkpoint coordinates");\n
      console.log(`[DEMO] Going to Checkpoint ${me.next_checkpoint}\\n`)\n
    } else {\n
      console.log("[DEMO] Setting landing coordinates...\\n");\n
      me.landing_altitude = me.getAltitudeAbs() - me.getCurrentPosition().z + PARACHUTE_ALTITUDE;\n
      exit_on_fail(\n
        me.setAltitude(me.landing_altitude),\n
        "Failed to set landing altitude");\n
    }\n
    me.direction_set = true;\n
    return;\n
  }\n
\n
  if (me.next_checkpoint < checkpoint_list.length) {\n
    me.current_position = me.getCurrentPosition();\n
    me.distance = distance(me.current_position.x, me.current_position.y,\n
                           checkpoint_list[me.next_checkpoint].latitude,\n
                           checkpoint_list[me.next_checkpoint].longitude);\n
    if (me.distance > EPSILON) {\n
      console.log(`Waiting for drone to get to destination (${me.distance} m)`);\n
    } else {\n
      console.log(`[DEMO] Reached Checkpoint ${me.next_checkpoint}\\n`);\n
      exit_on_fail(\n
        me.setCheckpoint(me.next_checkpoint),\n
        "Failed to set checkpoint");\n
      me.next_checkpoint += 1;\n
      me.direction_set = false;\n
    }\n
    return;\n
  }\n
\n
  if (!me.landing_alt_reached) {\n
    me.landing_alt_reached = altitudeReached(me.getAltitudeAbs(), me.landing_altitude);\n
    return;\n
  }\n
\n
  if (!me.parachute_triggered) {\n
    if (Math.abs(me.getYaw() - TARGET_YAW) < EPSILON_YAW) {\n
      console.log("[DEMO] Deploying parachute...");\n
      exit_on_fail(me.doParachute(2), "Failed to deploy parachute");\n
      me.parachute_triggered = true;\n
    } else {\n
      return console.log(`[DEMO] Waiting for yaw...`);\n
    }\n
  }\n
\n
  if (me.landed()) {\n
    me.exit(0);\n
  }\n
};\n


]]></string> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>emulate_bounce</string> </value>
        </item>
        <item>
            <key> <string>workflow_history</string> </key>
            <value>
              <persistent> <string encoding="base64">AAAAAAAAAAI=</string> </persistent>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
  <record id="2" aka="AAAAAAAAAAI=">
    <pickle>
      <global name="PersistentMapping" module="Persistence.mapping"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>data</string> </key>
            <value>
              <dictionary>
                <item>
                    <key> <string>document_publication_workflow</string> </key>
                    <value>
                      <persistent> <string encoding="base64">AAAAAAAAAAM=</string> </persistent>
                    </value>
                </item>
                <item>
                    <key> <string>edit_workflow</string> </key>
                    <value>
                      <persistent> <string encoding="base64">AAAAAAAAAAQ=</string> </persistent>
                    </value>
                </item>
              </dictionary>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
  <record id="3" aka="AAAAAAAAAAM=">
    <pickle>
      <global name="WorkflowHistoryList" module="Products.ERP5Type.Workflow"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_log</string> </key>
            <value>
              <list>
                <dictionary>
                  <item>
                      <key> <string>action</string> </key>
                      <value> <string>publish_alive</string> </value>
                  </item>
                  <item>
                      <key> <string>actor</string> </key>
                      <value> <string>zope</string> </value>
                  </item>
                  <item>
                      <key> <string>comment</string> </key>
                      <value> <string></string> </value>
                  </item>
                  <item>
                      <key> <string>error_message</string> </key>
                      <value> <string></string> </value>
                  </item>
                  <item>
                      <key> <string>time</string> </key>
                      <value>
                        <object>
                          <klass>
                            <global name="DateTime" module="DateTime.DateTime"/>
                          </klass>
                          <tuple>
                            <none/>
                          </tuple>
                          <state>
                            <tuple>
                              <float>1660315056.56</float>
                              <string>UTC</string>
                            </tuple>
                          </state>
                        </object>
                      </value>
                  </item>
                  <item>
                      <key> <string>validation_state</string> </key>
                      <value> <string>published_alive</string> </value>
                  </item>
                </dictionary>
              </list>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
  <record id="4" aka="AAAAAAAAAAQ=">
    <pickle>
      <global name="WorkflowHistoryList" module="Products.ERP5Type.Workflow"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_log</string> </key>
            <value>
              <list>
                <dictionary>
                  <item>
                      <key> <string>action</string> </key>
                      <value> <string>edit</string> </value>
                  </item>
                  <item>
                      <key> <string>actor</string> </key>
                      <value> <string>zope</string> </value>
                  </item>
                  <item>
                      <key> <string>comment</string> </key>
                      <value>
                        <none/>
                      </value>
                  </item>
                  <item>
                      <key> <string>error_message</string> </key>
                      <value> <string></string> </value>
                  </item>
                  <item>
                      <key> <string>serial</string> </key>
                      <value> <string>1002.23818.59984.50602</string> </value>
                  </item>
                  <item>
                      <key> <string>state</string> </key>
                      <value> <string>current</string> </value>
                  </item>
                  <item>
                      <key> <string>time</string> </key>
                      <value>
                        <object>
                          <klass>
                            <global name="DateTime" module="DateTime.DateTime"/>
                          </klass>
                          <tuple>
                            <none/>
                          </tuple>
                          <state>
                            <tuple>
                              <float>1660839085.05</float>
                              <string>UTC</string>
                            </tuple>
                          </state>
                        </object>
                      </value>
                  </item>
                </dictionary>
              </list>
            </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
